/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./node_modules/babel-loader/lib/index.js?!./src/puzzle-solver.worker.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/avl/src/index.js":
/*!***************************************!*\
  !*** ./node_modules/avl/src/index.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return AVLTree; });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./node_modules/avl/src/utils.js\");\n\n\n\n// function createNode (parent, left, right, height, key, data) {\n//   return { parent, left, right, balanceFactor: height, key, data };\n// }\n\n/**\n * @typedef {{\n *   parent:        ?Node,\n *   left:          ?Node,\n *   right:         ?Node,\n *   balanceFactor: number,\n *   key:           Key,\n *   data:          Value\n * }} Node\n */\n\n/**\n * @typedef {*} Key\n */\n\n/**\n * @typedef {*} Value\n */\n\n/**\n * Default comparison function\n * @param {Key} a\n * @param {Key} b\n * @returns {number}\n */\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n\n/**\n * Single left rotation\n * @param  {Node} node\n * @return {Node}\n */\nfunction rotateLeft (node) {\n  var rightNode = node.right;\n  node.right    = rightNode.left;\n\n  if (rightNode.left) rightNode.left.parent = node;\n\n  rightNode.parent = node.parent;\n  if (rightNode.parent) {\n    if (rightNode.parent.left === node) {\n      rightNode.parent.left = rightNode;\n    } else {\n      rightNode.parent.right = rightNode;\n    }\n  }\n\n  node.parent    = rightNode;\n  rightNode.left = node;\n\n  node.balanceFactor += 1;\n  if (rightNode.balanceFactor < 0) {\n    node.balanceFactor -= rightNode.balanceFactor;\n  }\n\n  rightNode.balanceFactor += 1;\n  if (node.balanceFactor > 0) {\n    rightNode.balanceFactor += node.balanceFactor;\n  }\n  return rightNode;\n}\n\n\nfunction rotateRight (node) {\n  var leftNode = node.left;\n  node.left = leftNode.right;\n  if (node.left) node.left.parent = node;\n\n  leftNode.parent = node.parent;\n  if (leftNode.parent) {\n    if (leftNode.parent.left === node) {\n      leftNode.parent.left = leftNode;\n    } else {\n      leftNode.parent.right = leftNode;\n    }\n  }\n\n  node.parent    = leftNode;\n  leftNode.right = node;\n\n  node.balanceFactor -= 1;\n  if (leftNode.balanceFactor > 0) {\n    node.balanceFactor -= leftNode.balanceFactor;\n  }\n\n  leftNode.balanceFactor -= 1;\n  if (node.balanceFactor < 0) {\n    leftNode.balanceFactor += node.balanceFactor;\n  }\n\n  return leftNode;\n}\n\n\n// function leftBalance (node) {\n//   if (node.left.balanceFactor === -1) rotateLeft(node.left);\n//   return rotateRight(node);\n// }\n\n\n// function rightBalance (node) {\n//   if (node.right.balanceFactor === 1) rotateRight(node.right);\n//   return rotateLeft(node);\n// }\n\n\nclass AVLTree {\n  /**\n   * Callback for comparator\n   * @callback comparatorCallback\n   * @param {Key} a\n   * @param {Key} b\n   * @returns {number}\n   */\n\n  /**\n   * @class AVLTree\n   * @constructor\n   * @param  {comparatorCallback} [comparator]\n   * @param  {boolean}            [noDuplicates=false] Disallow duplicates\n   */\n  constructor (comparator, noDuplicates = false) {\n    this._comparator = comparator || DEFAULT_COMPARE;\n    this._root = null;\n    this._size = 0;\n    this._noDuplicates = !!noDuplicates;\n  }\n\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  destroy() {\n    return this.clear();\n  }\n\n\n  /**\n   * Clear the tree\n   * @return {AVLTree}\n   */\n  clear() {\n    this._root = null;\n    this._size = 0;\n    return this;\n  }\n\n  /**\n   * Number of nodes\n   * @return {number}\n   */\n  get size () {\n    return this._size;\n  }\n\n\n  /**\n   * Whether the tree contains a node with the given key\n   * @param  {Key} key\n   * @return {boolean} true/false\n   */\n  contains (key) {\n    if (this._root)  {\n      var node       = this._root;\n      var comparator = this._comparator;\n      while (node)  {\n        var cmp = comparator(key, node.key);\n        if      (cmp === 0) return true;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    }\n    return false;\n  }\n\n\n  /* eslint-disable class-methods-use-this */\n\n  /**\n   * Successor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  next (node) {\n    var successor = node;\n    if (successor) {\n      if (successor.right) {\n        successor = successor.right;\n        while (successor.left) successor = successor.left;\n      } else {\n        successor = node.parent;\n        while (successor && successor.right === node) {\n          node = successor; successor = successor.parent;\n        }\n      }\n    }\n    return successor;\n  }\n\n\n  /**\n   * Predecessor node\n   * @param  {Node} node\n   * @return {?Node}\n   */\n  prev (node) {\n    var predecessor = node;\n    if (predecessor) {\n      if (predecessor.left) {\n        predecessor = predecessor.left;\n        while (predecessor.right) predecessor = predecessor.right;\n      } else {\n        predecessor = node.parent;\n        while (predecessor && predecessor.left === node) {\n          node = predecessor;\n          predecessor = predecessor.parent;\n        }\n      }\n    }\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n\n  /**\n   * Callback for forEach\n   * @callback forEachCallback\n   * @param {Node} node\n   * @param {number} index\n   */\n\n  /**\n   * @param  {forEachCallback} callback\n   * @return {AVLTree}\n   */\n  forEach(callback) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          callback(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\n   * @param  {Key}      low\n   * @param  {Key}      high\n   * @param  {Function} fn\n   * @param  {*?}       ctx\n   * @return {SplayTree}\n   */\n  range(low, high, fn, ctx) {\n    const Q = [];\n    const compare = this._comparator;\n    let node = this._root, cmp;\n\n    while (Q.length !== 0 || node) {\n      if (node) {\n        Q.push(node);\n        node = node.left;\n      } else {\n        node = Q.pop();\n        cmp = compare(node.key, high);\n        if (cmp > 0) {\n          break;\n        } else if (compare(node.key, low) >= 0) {\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\n        }\n        node = node.right;\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Returns all keys in order\n   * @return {Array<Key>}\n   */\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns `data` fields of all nodes in order.\n   * @return {Array<Value>}\n   */\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  /**\n   * Returns node at given index\n   * @param  {number} index\n   * @return {?Node}\n   */\n  at (index) {\n    // removed after a consideration, more misleading than useful\n    // index = index % this.size;\n    // if (index < 0) index = this.size - index;\n\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          if (i === index) return current;\n          i++;\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Returns node with the minimum key\n   * @return {?Node}\n   */\n  minNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node;\n  }\n\n\n  /**\n   * Returns node with the max key\n   * @return {?Node}\n   */\n  maxNode () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node;\n  }\n\n\n  /**\n   * Min key\n   * @return {?Key}\n   */\n  min () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.left) node = node.left;\n    return node.key;\n  }\n\n\n  /**\n   * Max key\n   * @return {?Key}\n   */\n  max () {\n    var node = this._root;\n    if (!node) return null;\n    while (node.right) node = node.right;\n    return node.key;\n  }\n\n\n  /**\n   * @return {boolean} true/false\n   */\n  isEmpty() {\n    return !this._root;\n  }\n\n\n  /**\n   * Removes and returns the node with smallest key\n   * @return {?Node}\n   */\n  pop () {\n    var node = this._root, returnValue = null;\n    if (node) {\n      while (node.left) node = node.left;\n      returnValue = { key: node.key, data: node.data };\n      this.remove(node.key);\n    }\n    return returnValue;\n  }\n\n\n  /**\n   * Find node by key\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  find (key) {\n    var root = this._root;\n    // if (root === null)    return null;\n    // if (key === root.key) return root;\n\n    var subtree = root, cmp;\n    var compare = this._comparator;\n    while (subtree) {\n      cmp = compare(key, subtree.key);\n      if      (cmp === 0) return subtree;\n      else if (cmp < 0)   subtree = subtree.left;\n      else                subtree = subtree.right;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Insert a node into the tree\n   * @param  {Key} key\n   * @param  {Value} [data]\n   * @return {?Node}\n   */\n  insert (key, data) {\n    if (!this._root) {\n      this._root = {\n        parent: null, left: null, right: null, balanceFactor: 0,\n        key, data\n      };\n      this._size++;\n      return this._root;\n    }\n\n    var compare = this._comparator;\n    var node    = this._root;\n    var parent  = null;\n    var cmp     = 0;\n\n    if (this._noDuplicates) {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp === 0) return null;\n        else if (cmp < 0)   node = node.left;\n        else                node = node.right;\n      }\n    } else {\n      while (node) {\n        cmp = compare(key, node.key);\n        parent = node;\n        if      (cmp <= 0)  node = node.left; //return null;\n        else                node = node.right;\n      }\n    }\n\n    var newNode = {\n      left: null,\n      right: null,\n      balanceFactor: 0,\n      parent, key, data\n    };\n    var newRoot;\n    if (cmp <= 0) parent.left  = newNode;\n    else         parent.right = newNode;\n\n    while (parent) {\n      cmp = compare(parent.key, key);\n      if (cmp < 0) parent.balanceFactor -= 1;\n      else         parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor === 0) break;\n      else if   (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      }\n      parent = parent.parent;\n    }\n\n    this._size++;\n    return newNode;\n  }\n\n\n  /**\n   * Removes the node from the tree. If not found, returns null.\n   * @param  {Key} key\n   * @return {?Node}\n   */\n  remove (key) {\n    if (!this._root) return null;\n\n    var node = this._root;\n    var compare = this._comparator;\n    var cmp = 0;\n\n    while (node) {\n      cmp = compare(key, node.key);\n      if      (cmp === 0) break;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n    if (!node) return null;\n\n    var returnValue = node.key;\n    var max, min;\n\n    if (node.left) {\n      max = node.left;\n\n      while (max.left || max.right) {\n        while (max.right) max = max.right;\n\n        node.key = max.key;\n        node.data = max.data;\n        if (max.left) {\n          node = max;\n          max = max.left;\n        }\n      }\n\n      node.key  = max.key;\n      node.data = max.data;\n      node = max;\n    }\n\n    if (node.right) {\n      min = node.right;\n\n      while (min.left || min.right) {\n        while (min.left) min = min.left;\n\n        node.key  = min.key;\n        node.data = min.data;\n        if (min.right) {\n          node = min;\n          min = min.right;\n        }\n      }\n\n      node.key  = min.key;\n      node.data = min.data;\n      node = min;\n    }\n\n    var parent = node.parent;\n    var pp     = node;\n    var newRoot;\n\n    while (parent) {\n      if (parent.left === pp) parent.balanceFactor -= 1;\n      else                    parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor < -1) {\n        // inlined\n        //var newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      } else if (parent.balanceFactor > 1) {\n        // inlined\n        // var newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      }\n\n      if (parent.balanceFactor === -1 || parent.balanceFactor === 1) break;\n\n      pp     = parent;\n      parent = parent.parent;\n    }\n\n    if (node.parent) {\n      if (node.parent.left === node) node.parent.left  = null;\n      else                           node.parent.right = null;\n    }\n\n    if (node === this._root) this._root = null;\n\n    this._size--;\n    return returnValue;\n  }\n\n\n  /**\n   * Bulk-load items\n   * @param  {Array<Key>}  keys\n   * @param  {Array<Value>}  [values]\n   * @return {AVLTree}\n   */\n  load(keys = [], values = [], presort) {\n    if (this._size !== 0) throw new Error('bulk-load: tree is not empty');\n    const size = keys.length;\n    if (presort) Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"sort\"])(keys, values, 0, size - 1, this._comparator);\n    this._root = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"loadRecursive\"])(null, keys, values, 0, size);\n    Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"markBalance\"])(this._root);\n    this._size = size;\n    return this;\n  }\n\n\n  /**\n   * Returns true if the tree is balanced\n   * @return {boolean}\n   */\n  isBalanced() {\n    return Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"isBalanced\"])(this._root);\n  }\n\n\n  /**\n   * String representation of the tree - primitive horizontal print-out\n   * @param  {Function(Node):string} [printNode]\n   * @return {string}\n   */\n  toString (printNode) {\n    return Object(_utils__WEBPACK_IMPORTED_MODULE_0__[\"print\"])(this._root, printNode);\n  }\n}\n\nAVLTree.default = AVLTree;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/avl/src/index.js\n");

/***/ }),

/***/ "./node_modules/avl/src/utils.js":
/*!***************************************!*\
  !*** ./node_modules/avl/src/utils.js ***!
  \***************************************/
/*! exports provided: print, isBalanced, loadRecursive, markBalance, sort */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"print\", function() { return print; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isBalanced\", function() { return isBalanced; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadRecursive\", function() { return loadRecursive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"markBalance\", function() { return markBalance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sort\", function() { return sort; });\n\n/**\n * Prints tree horizontally\n * @param  {Node}                       root\n * @param  {Function(node:Node):String} [printNode]\n * @return {String}\n */\nfunction print (root, printNode = (n) => n.key) {\n  var out = [];\n  row(root, '', true, (v) => out.push(v), printNode);\n  return out.join('');\n}\n\n/**\n * Prints level of the tree\n * @param  {Node}                        root\n * @param  {String}                      prefix\n * @param  {Boolean}                     isTail\n * @param  {Function(in:string):void}    out\n * @param  {Function(node:Node):String}  printNode\n */\nfunction row (root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\n\n/**\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\n * @param  {Node}    root\n * @return {Boolean}\n */\nfunction isBalanced(root) {\n  if (root === null) return true; // If node is empty then return true\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) return true;\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n\n\nfunction loadRecursive (parent, keys, values, start, end) {\n  const size = end - start;\n  if (size > 0) {\n    const middle = start + Math.floor(size / 2);\n    const key    = keys[middle];\n    const data   = values[middle];\n    const node   = { key, data, parent };\n    node.left    = loadRecursive(node, keys, values, start, middle);\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\n    return node;\n  }\n  return null;\n}\n\n\nfunction markBalance(node) {\n  if (node === null) return 0;\n  const lh = markBalance(node.left);\n  const rh = markBalance(node.right);\n\n  node.balanceFactor = lh - rh;\n  return Math.max(lh, rh) + 1;\n}\n\n\nfunction sort(keys, values, left, right, compare) {\n  if (left >= right) return;\n\n  // eslint-disable-next-line no-bitwise\n  const pivot = keys[(left + right) >> 1];\n  let i = left - 1;\n  let j = right + 1;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    do i++; while (compare(keys[i], pivot) < 0);\n    do j--; while (compare(keys[j], pivot) > 0);\n    if (i >= j) break;\n\n    let tmp = keys[i];\n    keys[i] = keys[j];\n    keys[j] = tmp;\n\n    tmp = values[i];\n    values[i] = values[j];\n    values[j] = tmp;\n  }\n\n  sort(keys, values,  left,     j, compare);\n  sort(keys, values, j + 1, right, compare);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXZsL3NyYy91dGlscy5qcz83MjA2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0EsWUFBWSxLQUFLO0FBQ2pCLFlBQVksMkJBQTJCO0FBQ3ZDLFlBQVk7QUFDWjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksS0FBSztBQUNqQixZQUFZLE9BQU87QUFDbkIsWUFBWSxRQUFRO0FBQ3BCLFlBQVkseUJBQXlCO0FBQ3JDLFlBQVksMkJBQTJCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUyxFQUFFLDJCQUEyQixFQUFFLGtCQUFrQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsWUFBWSxLQUFLO0FBQ2pCLFlBQVk7QUFDWjtBQUNPO0FBQ1AsaUNBQWlDOztBQUVqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxLQUFLO0FBQ2pCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7O0FBR087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR087QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXZsL3NyYy91dGlscy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBQcmludHMgdHJlZSBob3Jpem9udGFsbHlcbiAqIEBwYXJhbSAge05vZGV9ICAgICAgICAgICAgICAgICAgICAgICByb290XG4gKiBAcGFyYW0gIHtGdW5jdGlvbihub2RlOk5vZGUpOlN0cmluZ30gW3ByaW50Tm9kZV1cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByaW50IChyb290LCBwcmludE5vZGUgPSAobikgPT4gbi5rZXkpIHtcbiAgdmFyIG91dCA9IFtdO1xuICByb3cocm9vdCwgJycsIHRydWUsICh2KSA9PiBvdXQucHVzaCh2KSwgcHJpbnROb2RlKTtcbiAgcmV0dXJuIG91dC5qb2luKCcnKTtcbn1cblxuLyoqXG4gKiBQcmludHMgbGV2ZWwgb2YgdGhlIHRyZWVcbiAqIEBwYXJhbSAge05vZGV9ICAgICAgICAgICAgICAgICAgICAgICAgcm9vdFxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICBwcmVmaXhcbiAqIEBwYXJhbSAge0Jvb2xlYW59ICAgICAgICAgICAgICAgICAgICAgaXNUYWlsXG4gKiBAcGFyYW0gIHtGdW5jdGlvbihpbjpzdHJpbmcpOnZvaWR9ICAgIG91dFxuICogQHBhcmFtICB7RnVuY3Rpb24obm9kZTpOb2RlKTpTdHJpbmd9ICBwcmludE5vZGVcbiAqL1xuZnVuY3Rpb24gcm93IChyb290LCBwcmVmaXgsIGlzVGFpbCwgb3V0LCBwcmludE5vZGUpIHtcbiAgaWYgKHJvb3QpIHtcbiAgICBvdXQoYCR7IHByZWZpeCB9JHsgaXNUYWlsID8gJ+KUlOKUgOKUgCAnIDogJ+KUnOKUgOKUgCAnIH0keyBwcmludE5vZGUocm9vdCkgfVxcbmApO1xuICAgIGNvbnN0IGluZGVudCA9IHByZWZpeCArIChpc1RhaWwgPyAnICAgICcgOiAn4pSCICAgJyk7XG4gICAgaWYgKHJvb3QubGVmdCkgIHJvdyhyb290LmxlZnQsICBpbmRlbnQsIGZhbHNlLCBvdXQsIHByaW50Tm9kZSk7XG4gICAgaWYgKHJvb3QucmlnaHQpIHJvdyhyb290LnJpZ2h0LCBpbmRlbnQsIHRydWUsICBvdXQsIHByaW50Tm9kZSk7XG4gIH1cbn1cblxuXG4vKipcbiAqIElzIHRoZSB0cmVlIGJhbGFuY2VkIChub25lIG9mIHRoZSBzdWJ0cmVlcyBkaWZmZXIgaW4gaGVpZ2h0IGJ5IG1vcmUgdGhhbiAxKVxuICogQHBhcmFtICB7Tm9kZX0gICAgcm9vdFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQmFsYW5jZWQocm9vdCkge1xuICBpZiAocm9vdCA9PT0gbnVsbCkgcmV0dXJuIHRydWU7IC8vIElmIG5vZGUgaXMgZW1wdHkgdGhlbiByZXR1cm4gdHJ1ZVxuXG4gIC8vIEdldCB0aGUgaGVpZ2h0IG9mIGxlZnQgYW5kIHJpZ2h0IHN1YiB0cmVlc1xuICB2YXIgbGggPSBoZWlnaHQocm9vdC5sZWZ0KTtcbiAgdmFyIHJoID0gaGVpZ2h0KHJvb3QucmlnaHQpO1xuXG4gIGlmIChNYXRoLmFicyhsaCAtIHJoKSA8PSAxICYmXG4gICAgICBpc0JhbGFuY2VkKHJvb3QubGVmdCkgICYmXG4gICAgICBpc0JhbGFuY2VkKHJvb3QucmlnaHQpKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBJZiB3ZSByZWFjaCBoZXJlIHRoZW4gdHJlZSBpcyBub3QgaGVpZ2h0LWJhbGFuY2VkXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBUaGUgZnVuY3Rpb24gQ29tcHV0ZSB0aGUgJ2hlaWdodCcgb2YgYSB0cmVlLlxuICogSGVpZ2h0IGlzIHRoZSBudW1iZXIgb2Ygbm9kZXMgYWxvbmcgdGhlIGxvbmdlc3QgcGF0aFxuICogZnJvbSB0aGUgcm9vdCBub2RlIGRvd24gdG8gdGhlIGZhcnRoZXN0IGxlYWYgbm9kZS5cbiAqXG4gKiBAcGFyYW0gIHtOb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGhlaWdodChub2RlKSB7XG4gIHJldHVybiBub2RlID8gKDEgKyBNYXRoLm1heChoZWlnaHQobm9kZS5sZWZ0KSwgaGVpZ2h0KG5vZGUucmlnaHQpKSkgOiAwO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkUmVjdXJzaXZlIChwYXJlbnQsIGtleXMsIHZhbHVlcywgc3RhcnQsIGVuZCkge1xuICBjb25zdCBzaXplID0gZW5kIC0gc3RhcnQ7XG4gIGlmIChzaXplID4gMCkge1xuICAgIGNvbnN0IG1pZGRsZSA9IHN0YXJ0ICsgTWF0aC5mbG9vcihzaXplIC8gMik7XG4gICAgY29uc3Qga2V5ICAgID0ga2V5c1ttaWRkbGVdO1xuICAgIGNvbnN0IGRhdGEgICA9IHZhbHVlc1ttaWRkbGVdO1xuICAgIGNvbnN0IG5vZGUgICA9IHsga2V5LCBkYXRhLCBwYXJlbnQgfTtcbiAgICBub2RlLmxlZnQgICAgPSBsb2FkUmVjdXJzaXZlKG5vZGUsIGtleXMsIHZhbHVlcywgc3RhcnQsIG1pZGRsZSk7XG4gICAgbm9kZS5yaWdodCAgID0gbG9hZFJlY3Vyc2l2ZShub2RlLCBrZXlzLCB2YWx1ZXMsIG1pZGRsZSArIDEsIGVuZCk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcmtCYWxhbmNlKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IG51bGwpIHJldHVybiAwO1xuICBjb25zdCBsaCA9IG1hcmtCYWxhbmNlKG5vZGUubGVmdCk7XG4gIGNvbnN0IHJoID0gbWFya0JhbGFuY2Uobm9kZS5yaWdodCk7XG5cbiAgbm9kZS5iYWxhbmNlRmFjdG9yID0gbGggLSByaDtcbiAgcmV0dXJuIE1hdGgubWF4KGxoLCByaCkgKyAxO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0KGtleXMsIHZhbHVlcywgbGVmdCwgcmlnaHQsIGNvbXBhcmUpIHtcbiAgaWYgKGxlZnQgPj0gcmlnaHQpIHJldHVybjtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICBjb25zdCBwaXZvdCA9IGtleXNbKGxlZnQgKyByaWdodCkgPj4gMV07XG4gIGxldCBpID0gbGVmdCAtIDE7XG4gIGxldCBqID0gcmlnaHQgKyAxO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBkbyBpKys7IHdoaWxlIChjb21wYXJlKGtleXNbaV0sIHBpdm90KSA8IDApO1xuICAgIGRvIGotLTsgd2hpbGUgKGNvbXBhcmUoa2V5c1tqXSwgcGl2b3QpID4gMCk7XG4gICAgaWYgKGkgPj0gaikgYnJlYWs7XG5cbiAgICBsZXQgdG1wID0ga2V5c1tpXTtcbiAgICBrZXlzW2ldID0ga2V5c1tqXTtcbiAgICBrZXlzW2pdID0gdG1wO1xuXG4gICAgdG1wID0gdmFsdWVzW2ldO1xuICAgIHZhbHVlc1tpXSA9IHZhbHVlc1tqXTtcbiAgICB2YWx1ZXNbal0gPSB0bXA7XG4gIH1cblxuICBzb3J0KGtleXMsIHZhbHVlcywgIGxlZnQsICAgICBqLCBjb21wYXJlKTtcbiAgc29ydChrZXlzLCB2YWx1ZXMsIGogKyAxLCByaWdodCwgY29tcGFyZSk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/avl/src/utils.js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./src/puzzle-solver.worker.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--5!./src/puzzle-solver.worker.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sliding_puzzle_algorithms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sliding-puzzle-algorithms */ \"./src/sliding-puzzle-algorithms.js\");\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n\n\nonmessage = function onmessage(e) {\n  var puzzle = _construct(_sliding_puzzle_algorithms__WEBPACK_IMPORTED_MODULE_0__[\"default\"], _toConsumableArray(e.data));\n\n  postMessage(puzzle.solve());\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcHV6emxlLXNvbHZlci53b3JrZXIuanM/YTZmZiJdLCJuYW1lcyI6WyJvbm1lc3NhZ2UiLCJlIiwicHV6emxlIiwiUHV6emxlIiwiZGF0YSIsInBvc3RNZXNzYWdlIiwic29sdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQUEsU0FBUyxHQUFHLG1CQUFBQyxDQUFDLEVBQUk7QUFDaEIsTUFBSUMsTUFBTSxjQUFPQyxrRUFBUCxxQkFBaUJGLENBQUMsQ0FBQ0csSUFBbkIsRUFBVjs7QUFDQUMsYUFBVyxDQUFDSCxNQUFNLENBQUNJLEtBQVAsRUFBRCxDQUFYO0FBQ0EsQ0FIRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPyEuL3NyYy9wdXp6bGUtc29sdmVyLndvcmtlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQdXp6bGUgZnJvbSAnLi9zbGlkaW5nLXB1enpsZS1hbGdvcml0aG1zJ1xuXG5vbm1lc3NhZ2UgPSBlID0+IHtcblx0bGV0IHB1enpsZSA9IG5ldyBQdXp6bGUoLi4uZS5kYXRhKTtcblx0cG9zdE1lc3NhZ2UocHV6emxlLnNvbHZlKCkpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js?!./src/puzzle-solver.worker.js\n");

/***/ }),

/***/ "./node_modules/fastpriorityqueue/FastPriorityQueue.js":
/*!*************************************************************!*\
  !*** ./node_modules/fastpriorityqueue/FastPriorityQueue.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {/**\n * FastPriorityQueue.js : a fast heap-based priority queue  in JavaScript.\n * (c) the authors\n * Licensed under the Apache License, Version 2.0.\n *\n * Speed-optimized heap-based priority queue for modern browsers and JavaScript engines.\n *\n * Usage :\n         Installation (in shell, if you use node):\n         $ npm install fastpriorityqueue\n\n         Running test program (in JavaScript):\n\n         // var FastPriorityQueue = require(\"fastpriorityqueue\");// in node\n         var x = new FastPriorityQueue();\n         x.add(1);\n         x.add(0);\n         x.add(5);\n         x.add(4);\n         x.add(3);\n         x.peek(); // should return 0, leaves x unchanged\n         x.size; // should return 5, leaves x unchanged\n         while(!x.isEmpty()) {\n           console.log(x.poll());\n         } // will print 0 1 3 4 5\n         x.trim(); // (optional) optimizes memory usage\n */\n\n\nvar defaultcomparator = function(a, b) {\n  return a < b;\n};\n\n// the provided comparator function should take a, b and return *true* when a < b\nfunction FastPriorityQueue(comparator) {\n  if (!(this instanceof FastPriorityQueue)) return new FastPriorityQueue(comparator);\n  this.array = [];\n  this.size = 0;\n  this.compare = comparator || defaultcomparator;\n}\n\n// copy the priority queue into another, and return it. Queue items are shallow-copied.\n// Runs in `O(n)` time.\nFastPriorityQueue.prototype.clone = function() {\n  var fpq = new FastPriorityQueue(this.compare);\n  fpq.size = this.size;\n  for (var i = 0; i < this.size; i++) {\n    fpq.array.push(this.array[i]);\n  }\n  return fpq;\n};\n\n// Add an element into the queue\n// runs in O(log n) time\nFastPriorityQueue.prototype.add = function(myval) {\n  var i = this.size;\n  this.array[this.size] = myval;\n  this.size += 1;\n  var p;\n  var ap;\n  while (i > 0) {\n    p = (i - 1) >> 1;\n    ap = this.array[p];\n    if (!this.compare(myval, ap)) {\n      break;\n    }\n    this.array[i] = ap;\n    i = p;\n  }\n  this.array[i] = myval;\n};\n\n// replace the content of the heap by provided array and \"heapify it\"\nFastPriorityQueue.prototype.heapify = function(arr) {\n  this.array = arr;\n  this.size = arr.length;\n  var i;\n  for (i = this.size >> 1; i >= 0; i--) {\n    this._percolateDown(i);\n  }\n};\n\n// for internal use\nFastPriorityQueue.prototype._percolateUp = function(i, force) {\n  var myval = this.array[i];\n  var p;\n  var ap;\n  while (i > 0) {\n    p = (i - 1) >> 1;\n    ap = this.array[p];\n    // force will skip the compare\n    if (!force && !this.compare(myval, ap)) {\n      break;\n    }\n    this.array[i] = ap;\n    i = p;\n  }\n  this.array[i] = myval;\n};\n\n// for internal use\nFastPriorityQueue.prototype._percolateDown = function(i) {\n  var size = this.size;\n  var hsize = this.size >>> 1;\n  var ai = this.array[i];\n  var l;\n  var r;\n  var bestc;\n  while (i < hsize) {\n    l = (i << 1) + 1;\n    r = l + 1;\n    bestc = this.array[l];\n    if (r < size) {\n      if (this.compare(this.array[r], bestc)) {\n        l = r;\n        bestc = this.array[r];\n      }\n    }\n    if (!this.compare(bestc, ai)) {\n      break;\n    }\n    this.array[i] = bestc;\n    i = l;\n  }\n  this.array[i] = ai;\n};\n\n// internal\n// _removeAt(index) will remove the item at the given index from the queue,\n// retaining balance. returns the removed item, or undefined if nothing is removed.\nFastPriorityQueue.prototype._removeAt = function(index) {\n  if (index > this.size - 1 || index < 0) return undefined;\n\n  // impl1:\n  //this.array.splice(index, 1);\n  //this.heapify(this.array);\n  // impl2:\n  this._percolateUp(index, true);\n  return this.poll();\n};\n\n// remove(myval) will remove an item matching the provided value from the\n// queue, checked for equality by using the queue's comparator.\n// return true if removed, false otherwise.\nFastPriorityQueue.prototype.remove = function(myval) {\n  for (var i = 0; i < this.size; i++) {\n    if (!this.compare(this.array[i], myval) && !this.compare(myval, this.array[i])) {\n      // items match, comparator returns false both ways, remove item\n      this._removeAt(i);\n      return true;\n    }\n  }\n  return false;\n};\n\n// internal\n// removes and returns items for which the callback returns true.\nFastPriorityQueue.prototype._batchRemove = function(callback, limit) {\n  // initialize return array with max size of the limit or current queue size\n  var retArr = new Array(limit ? limit : this.size);\n  var count = 0;\n\n  if (typeof callback === 'function' && this.size) {\n    var i = 0;\n    while (i < this.size && count < retArr.length) {\n      if (callback(this.array[i])) {\n        retArr[count] = this._removeAt(i);\n        count++;\n        // move up a level in the heap if we remove an item\n        i = i >> 1;\n      } else {\n        i++;\n      }\n    } \n  }\n  retArr.length = count;\n  return retArr;\n}\n\n// removeOne(callback) will execute the callback function for each item of the queue\n// and will remove the first item for which the callback will return true.\n// return the removed item, or undefined if nothing is removed.\nFastPriorityQueue.prototype.removeOne = function(callback) {\n  var arr = this._batchRemove(callback, 1);\n  return arr.length > 0 ? arr[0] : undefined;\n};\n\n// remove(callback[, limit]) will execute the callback function for each item of\n// the queue and will remove each item for which the callback returns true, up to\n// a max limit of removed items if specified or no limit if unspecified.\n// return an array containing the removed items.\nFastPriorityQueue.prototype.removeMany = function(callback, limit) {\n  return this._batchRemove(callback, limit);\n};\n\n// Look at the top of the queue (one of the smallest elements) without removing it\n// executes in constant time\n//\n// Calling peek on an empty priority queue returns\n// the \"undefined\" value.\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\n//\nFastPriorityQueue.prototype.peek = function() {\n  if (this.size == 0) return undefined;\n  return this.array[0];\n};\n\n// remove the element on top of the heap (one of the smallest elements)\n// runs in logarithmic time\n//\n// If the priority queue is empty, the function returns the\n// \"undefined\" value.\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\n//\n// For long-running and large priority queues, or priority queues\n// storing large objects, you may  want to call the trim function\n// at strategic times to recover allocated memory.\nFastPriorityQueue.prototype.poll = function() {\n  if (this.size == 0) return undefined;\n  var ans = this.array[0];\n  if (this.size > 1) {\n    this.array[0] = this.array[--this.size];\n    this._percolateDown(0);\n  } else {\n    this.size -= 1;\n  }\n  return ans;\n};\n\n// This function adds the provided value to the heap, while removing\n// and returning one of the smallest elements (like poll). The size of the queue\n// thus remains unchanged.\nFastPriorityQueue.prototype.replaceTop = function(myval) {\n  if (this.size == 0) return undefined;\n  var ans = this.array[0];\n  this.array[0] = myval;\n  this._percolateDown(0);\n  return ans;\n};\n\n// recover unused memory (for long-running priority queues)\nFastPriorityQueue.prototype.trim = function() {\n  this.array = this.array.slice(0, this.size);\n};\n\n// Check whether the heap is empty\nFastPriorityQueue.prototype.isEmpty = function() {\n  return this.size === 0;\n};\n\n// iterate over the items in order, pass a callback that receives (item, index) as args.\n// TODO once we transpile, uncomment\n// if (Symbol && Symbol.iterator) {\n//   FastPriorityQueue.prototype[Symbol.iterator] = function*() {\n//     if (this.isEmpty()) return;\n//     var fpq = this.clone();\n//     while (!fpq.isEmpty()) {\n//       yield fpq.poll();\n//     }\n//   };\n// }\nFastPriorityQueue.prototype.forEach = function(callback) {\n  if (this.isEmpty() || typeof callback != 'function') return;\n  var i = 0;\n  var fpq = this.clone();\n  while (!fpq.isEmpty()) {\n    callback(fpq.poll(), i++);\n  }\n};\n\n// return the k 'smallest' elements of the queue\n// runs in O(k log k) time\n// this is the equivalent of repeatedly calling poll, but\n// it has a better computational complexity, which can be\n// important for large data sets.\nFastPriorityQueue.prototype.kSmallest = function(k) {\n  if (this.size == 0) return [];\n  var comparator = this.compare;\n  var arr = this.array\n  var fpq = new FastPriorityQueue(function(a,b){\n   return comparator(arr[a],arr[b]);\n  });\n  k = Math.min(this.size, k);\n  var smallest = new Array(k);\n  var j = 0;\n  fpq.add(0);\n  while (j < k) {\n    var small = fpq.poll();\n    smallest[j++] = this.array[small];\n    var l = (small << 1) + 1;\n    var r = l + 1;\n    if (l < this.size) fpq.add(l);\n    if (r < this.size) fpq.add(r);\n  }\n  return smallest;\n}\n\n// just for illustration purposes\nvar main = function() {\n  // main code\n  var x = new FastPriorityQueue(function(a, b) {\n    return a < b;\n  });\n  x.add(1);\n  x.add(0);\n  x.add(5);\n  x.add(4);\n  x.add(3);\n  while (!x.isEmpty()) {\n    console.log(x.poll());\n  }\n};\n\nif (__webpack_require__.c[__webpack_require__.s] === module) {\n  main();\n}\n\nmodule.exports = FastPriorityQueue;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmFzdHByaW9yaXR5cXVldWUvRmFzdFByaW9yaXR5UXVldWUuanM/ZDkzMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpRUFBaUU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsVUFBVTtBQUNWLGtCQUFrQjtBQUNsQjtBQUNhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGVBQWU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixRQUFRO0FBQ2xDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLDRDQUFZO0FBQ2hCO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmFzdHByaW9yaXR5cXVldWUvRmFzdFByaW9yaXR5UXVldWUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZhc3RQcmlvcml0eVF1ZXVlLmpzIDogYSBmYXN0IGhlYXAtYmFzZWQgcHJpb3JpdHkgcXVldWUgIGluIEphdmFTY3JpcHQuXG4gKiAoYykgdGhlIGF1dGhvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuXG4gKlxuICogU3BlZWQtb3B0aW1pemVkIGhlYXAtYmFzZWQgcHJpb3JpdHkgcXVldWUgZm9yIG1vZGVybiBicm93c2VycyBhbmQgSmF2YVNjcmlwdCBlbmdpbmVzLlxuICpcbiAqIFVzYWdlIDpcbiAgICAgICAgIEluc3RhbGxhdGlvbiAoaW4gc2hlbGwsIGlmIHlvdSB1c2Ugbm9kZSk6XG4gICAgICAgICAkIG5wbSBpbnN0YWxsIGZhc3Rwcmlvcml0eXF1ZXVlXG5cbiAgICAgICAgIFJ1bm5pbmcgdGVzdCBwcm9ncmFtIChpbiBKYXZhU2NyaXB0KTpcblxuICAgICAgICAgLy8gdmFyIEZhc3RQcmlvcml0eVF1ZXVlID0gcmVxdWlyZShcImZhc3Rwcmlvcml0eXF1ZXVlXCIpOy8vIGluIG5vZGVcbiAgICAgICAgIHZhciB4ID0gbmV3IEZhc3RQcmlvcml0eVF1ZXVlKCk7XG4gICAgICAgICB4LmFkZCgxKTtcbiAgICAgICAgIHguYWRkKDApO1xuICAgICAgICAgeC5hZGQoNSk7XG4gICAgICAgICB4LmFkZCg0KTtcbiAgICAgICAgIHguYWRkKDMpO1xuICAgICAgICAgeC5wZWVrKCk7IC8vIHNob3VsZCByZXR1cm4gMCwgbGVhdmVzIHggdW5jaGFuZ2VkXG4gICAgICAgICB4LnNpemU7IC8vIHNob3VsZCByZXR1cm4gNSwgbGVhdmVzIHggdW5jaGFuZ2VkXG4gICAgICAgICB3aGlsZSgheC5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgY29uc29sZS5sb2coeC5wb2xsKCkpO1xuICAgICAgICAgfSAvLyB3aWxsIHByaW50IDAgMSAzIDQgNVxuICAgICAgICAgeC50cmltKCk7IC8vIChvcHRpb25hbCkgb3B0aW1pemVzIG1lbW9yeSB1c2FnZVxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0Y29tcGFyYXRvciA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiO1xufTtcblxuLy8gdGhlIHByb3ZpZGVkIGNvbXBhcmF0b3IgZnVuY3Rpb24gc2hvdWxkIHRha2UgYSwgYiBhbmQgcmV0dXJuICp0cnVlKiB3aGVuIGEgPCBiXG5mdW5jdGlvbiBGYXN0UHJpb3JpdHlRdWV1ZShjb21wYXJhdG9yKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBGYXN0UHJpb3JpdHlRdWV1ZSkpIHJldHVybiBuZXcgRmFzdFByaW9yaXR5UXVldWUoY29tcGFyYXRvcik7XG4gIHRoaXMuYXJyYXkgPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5jb21wYXJlID0gY29tcGFyYXRvciB8fCBkZWZhdWx0Y29tcGFyYXRvcjtcbn1cblxuLy8gY29weSB0aGUgcHJpb3JpdHkgcXVldWUgaW50byBhbm90aGVyLCBhbmQgcmV0dXJuIGl0LiBRdWV1ZSBpdGVtcyBhcmUgc2hhbGxvdy1jb3BpZWQuXG4vLyBSdW5zIGluIGBPKG4pYCB0aW1lLlxuRmFzdFByaW9yaXR5UXVldWUucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHZhciBmcHEgPSBuZXcgRmFzdFByaW9yaXR5UXVldWUodGhpcy5jb21wYXJlKTtcbiAgZnBxLnNpemUgPSB0aGlzLnNpemU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zaXplOyBpKyspIHtcbiAgICBmcHEuYXJyYXkucHVzaCh0aGlzLmFycmF5W2ldKTtcbiAgfVxuICByZXR1cm4gZnBxO1xufTtcblxuLy8gQWRkIGFuIGVsZW1lbnQgaW50byB0aGUgcXVldWVcbi8vIHJ1bnMgaW4gTyhsb2cgbikgdGltZVxuRmFzdFByaW9yaXR5UXVldWUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKG15dmFsKSB7XG4gIHZhciBpID0gdGhpcy5zaXplO1xuICB0aGlzLmFycmF5W3RoaXMuc2l6ZV0gPSBteXZhbDtcbiAgdGhpcy5zaXplICs9IDE7XG4gIHZhciBwO1xuICB2YXIgYXA7XG4gIHdoaWxlIChpID4gMCkge1xuICAgIHAgPSAoaSAtIDEpID4+IDE7XG4gICAgYXAgPSB0aGlzLmFycmF5W3BdO1xuICAgIGlmICghdGhpcy5jb21wYXJlKG15dmFsLCBhcCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLmFycmF5W2ldID0gYXA7XG4gICAgaSA9IHA7XG4gIH1cbiAgdGhpcy5hcnJheVtpXSA9IG15dmFsO1xufTtcblxuLy8gcmVwbGFjZSB0aGUgY29udGVudCBvZiB0aGUgaGVhcCBieSBwcm92aWRlZCBhcnJheSBhbmQgXCJoZWFwaWZ5IGl0XCJcbkZhc3RQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5oZWFwaWZ5ID0gZnVuY3Rpb24oYXJyKSB7XG4gIHRoaXMuYXJyYXkgPSBhcnI7XG4gIHRoaXMuc2l6ZSA9IGFyci5sZW5ndGg7XG4gIHZhciBpO1xuICBmb3IgKGkgPSB0aGlzLnNpemUgPj4gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB0aGlzLl9wZXJjb2xhdGVEb3duKGkpO1xuICB9XG59O1xuXG4vLyBmb3IgaW50ZXJuYWwgdXNlXG5GYXN0UHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuX3BlcmNvbGF0ZVVwID0gZnVuY3Rpb24oaSwgZm9yY2UpIHtcbiAgdmFyIG15dmFsID0gdGhpcy5hcnJheVtpXTtcbiAgdmFyIHA7XG4gIHZhciBhcDtcbiAgd2hpbGUgKGkgPiAwKSB7XG4gICAgcCA9IChpIC0gMSkgPj4gMTtcbiAgICBhcCA9IHRoaXMuYXJyYXlbcF07XG4gICAgLy8gZm9yY2Ugd2lsbCBza2lwIHRoZSBjb21wYXJlXG4gICAgaWYgKCFmb3JjZSAmJiAhdGhpcy5jb21wYXJlKG15dmFsLCBhcCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLmFycmF5W2ldID0gYXA7XG4gICAgaSA9IHA7XG4gIH1cbiAgdGhpcy5hcnJheVtpXSA9IG15dmFsO1xufTtcblxuLy8gZm9yIGludGVybmFsIHVzZVxuRmFzdFByaW9yaXR5UXVldWUucHJvdG90eXBlLl9wZXJjb2xhdGVEb3duID0gZnVuY3Rpb24oaSkge1xuICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgdmFyIGhzaXplID0gdGhpcy5zaXplID4+PiAxO1xuICB2YXIgYWkgPSB0aGlzLmFycmF5W2ldO1xuICB2YXIgbDtcbiAgdmFyIHI7XG4gIHZhciBiZXN0YztcbiAgd2hpbGUgKGkgPCBoc2l6ZSkge1xuICAgIGwgPSAoaSA8PCAxKSArIDE7XG4gICAgciA9IGwgKyAxO1xuICAgIGJlc3RjID0gdGhpcy5hcnJheVtsXTtcbiAgICBpZiAociA8IHNpemUpIHtcbiAgICAgIGlmICh0aGlzLmNvbXBhcmUodGhpcy5hcnJheVtyXSwgYmVzdGMpKSB7XG4gICAgICAgIGwgPSByO1xuICAgICAgICBiZXN0YyA9IHRoaXMuYXJyYXlbcl07XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdGhpcy5jb21wYXJlKGJlc3RjLCBhaSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLmFycmF5W2ldID0gYmVzdGM7XG4gICAgaSA9IGw7XG4gIH1cbiAgdGhpcy5hcnJheVtpXSA9IGFpO1xufTtcblxuLy8gaW50ZXJuYWxcbi8vIF9yZW1vdmVBdChpbmRleCkgd2lsbCByZW1vdmUgdGhlIGl0ZW0gYXQgdGhlIGdpdmVuIGluZGV4IGZyb20gdGhlIHF1ZXVlLFxuLy8gcmV0YWluaW5nIGJhbGFuY2UuIHJldHVybnMgdGhlIHJlbW92ZWQgaXRlbSwgb3IgdW5kZWZpbmVkIGlmIG5vdGhpbmcgaXMgcmVtb3ZlZC5cbkZhc3RQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5fcmVtb3ZlQXQgPSBmdW5jdGlvbihpbmRleCkge1xuICBpZiAoaW5kZXggPiB0aGlzLnNpemUgLSAxIHx8IGluZGV4IDwgMCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAvLyBpbXBsMTpcbiAgLy90aGlzLmFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gIC8vdGhpcy5oZWFwaWZ5KHRoaXMuYXJyYXkpO1xuICAvLyBpbXBsMjpcbiAgdGhpcy5fcGVyY29sYXRlVXAoaW5kZXgsIHRydWUpO1xuICByZXR1cm4gdGhpcy5wb2xsKCk7XG59O1xuXG4vLyByZW1vdmUobXl2YWwpIHdpbGwgcmVtb3ZlIGFuIGl0ZW0gbWF0Y2hpbmcgdGhlIHByb3ZpZGVkIHZhbHVlIGZyb20gdGhlXG4vLyBxdWV1ZSwgY2hlY2tlZCBmb3IgZXF1YWxpdHkgYnkgdXNpbmcgdGhlIHF1ZXVlJ3MgY29tcGFyYXRvci5cbi8vIHJldHVybiB0cnVlIGlmIHJlbW92ZWQsIGZhbHNlIG90aGVyd2lzZS5cbkZhc3RQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihteXZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2l6ZTsgaSsrKSB7XG4gICAgaWYgKCF0aGlzLmNvbXBhcmUodGhpcy5hcnJheVtpXSwgbXl2YWwpICYmICF0aGlzLmNvbXBhcmUobXl2YWwsIHRoaXMuYXJyYXlbaV0pKSB7XG4gICAgICAvLyBpdGVtcyBtYXRjaCwgY29tcGFyYXRvciByZXR1cm5zIGZhbHNlIGJvdGggd2F5cywgcmVtb3ZlIGl0ZW1cbiAgICAgIHRoaXMuX3JlbW92ZUF0KGkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8vIGludGVybmFsXG4vLyByZW1vdmVzIGFuZCByZXR1cm5zIGl0ZW1zIGZvciB3aGljaCB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVlLlxuRmFzdFByaW9yaXR5UXVldWUucHJvdG90eXBlLl9iYXRjaFJlbW92ZSA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBsaW1pdCkge1xuICAvLyBpbml0aWFsaXplIHJldHVybiBhcnJheSB3aXRoIG1heCBzaXplIG9mIHRoZSBsaW1pdCBvciBjdXJyZW50IHF1ZXVlIHNpemVcbiAgdmFyIHJldEFyciA9IG5ldyBBcnJheShsaW1pdCA/IGxpbWl0IDogdGhpcy5zaXplKTtcbiAgdmFyIGNvdW50ID0gMDtcblxuICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nICYmIHRoaXMuc2l6ZSkge1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IHRoaXMuc2l6ZSAmJiBjb3VudCA8IHJldEFyci5sZW5ndGgpIHtcbiAgICAgIGlmIChjYWxsYmFjayh0aGlzLmFycmF5W2ldKSkge1xuICAgICAgICByZXRBcnJbY291bnRdID0gdGhpcy5fcmVtb3ZlQXQoaSk7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICAgIC8vIG1vdmUgdXAgYSBsZXZlbCBpbiB0aGUgaGVhcCBpZiB3ZSByZW1vdmUgYW4gaXRlbVxuICAgICAgICBpID0gaSA+PiAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH0gXG4gIH1cbiAgcmV0QXJyLmxlbmd0aCA9IGNvdW50O1xuICByZXR1cm4gcmV0QXJyO1xufVxuXG4vLyByZW1vdmVPbmUoY2FsbGJhY2spIHdpbGwgZXhlY3V0ZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbSBvZiB0aGUgcXVldWVcbi8vIGFuZCB3aWxsIHJlbW92ZSB0aGUgZmlyc3QgaXRlbSBmb3Igd2hpY2ggdGhlIGNhbGxiYWNrIHdpbGwgcmV0dXJuIHRydWUuXG4vLyByZXR1cm4gdGhlIHJlbW92ZWQgaXRlbSwgb3IgdW5kZWZpbmVkIGlmIG5vdGhpbmcgaXMgcmVtb3ZlZC5cbkZhc3RQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5yZW1vdmVPbmUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgYXJyID0gdGhpcy5fYmF0Y2hSZW1vdmUoY2FsbGJhY2ssIDEpO1xuICByZXR1cm4gYXJyLmxlbmd0aCA+IDAgPyBhcnJbMF0gOiB1bmRlZmluZWQ7XG59O1xuXG4vLyByZW1vdmUoY2FsbGJhY2tbLCBsaW1pdF0pIHdpbGwgZXhlY3V0ZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbSBvZlxuLy8gdGhlIHF1ZXVlIGFuZCB3aWxsIHJlbW92ZSBlYWNoIGl0ZW0gZm9yIHdoaWNoIHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWUsIHVwIHRvXG4vLyBhIG1heCBsaW1pdCBvZiByZW1vdmVkIGl0ZW1zIGlmIHNwZWNpZmllZCBvciBubyBsaW1pdCBpZiB1bnNwZWNpZmllZC5cbi8vIHJldHVybiBhbiBhcnJheSBjb250YWluaW5nIHRoZSByZW1vdmVkIGl0ZW1zLlxuRmFzdFByaW9yaXR5UXVldWUucHJvdG90eXBlLnJlbW92ZU1hbnkgPSBmdW5jdGlvbihjYWxsYmFjaywgbGltaXQpIHtcbiAgcmV0dXJuIHRoaXMuX2JhdGNoUmVtb3ZlKGNhbGxiYWNrLCBsaW1pdCk7XG59O1xuXG4vLyBMb29rIGF0IHRoZSB0b3Agb2YgdGhlIHF1ZXVlIChvbmUgb2YgdGhlIHNtYWxsZXN0IGVsZW1lbnRzKSB3aXRob3V0IHJlbW92aW5nIGl0XG4vLyBleGVjdXRlcyBpbiBjb25zdGFudCB0aW1lXG4vL1xuLy8gQ2FsbGluZyBwZWVrIG9uIGFuIGVtcHR5IHByaW9yaXR5IHF1ZXVlIHJldHVybnNcbi8vIHRoZSBcInVuZGVmaW5lZFwiIHZhbHVlLlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvdW5kZWZpbmVkXG4vL1xuRmFzdFByaW9yaXR5UXVldWUucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuc2l6ZSA9PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICByZXR1cm4gdGhpcy5hcnJheVswXTtcbn07XG5cbi8vIHJlbW92ZSB0aGUgZWxlbWVudCBvbiB0b3Agb2YgdGhlIGhlYXAgKG9uZSBvZiB0aGUgc21hbGxlc3QgZWxlbWVudHMpXG4vLyBydW5zIGluIGxvZ2FyaXRobWljIHRpbWVcbi8vXG4vLyBJZiB0aGUgcHJpb3JpdHkgcXVldWUgaXMgZW1wdHksIHRoZSBmdW5jdGlvbiByZXR1cm5zIHRoZVxuLy8gXCJ1bmRlZmluZWRcIiB2YWx1ZS5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL3VuZGVmaW5lZFxuLy9cbi8vIEZvciBsb25nLXJ1bm5pbmcgYW5kIGxhcmdlIHByaW9yaXR5IHF1ZXVlcywgb3IgcHJpb3JpdHkgcXVldWVzXG4vLyBzdG9yaW5nIGxhcmdlIG9iamVjdHMsIHlvdSBtYXkgIHdhbnQgdG8gY2FsbCB0aGUgdHJpbSBmdW5jdGlvblxuLy8gYXQgc3RyYXRlZ2ljIHRpbWVzIHRvIHJlY292ZXIgYWxsb2NhdGVkIG1lbW9yeS5cbkZhc3RQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnNpemUgPT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgdmFyIGFucyA9IHRoaXMuYXJyYXlbMF07XG4gIGlmICh0aGlzLnNpemUgPiAxKSB7XG4gICAgdGhpcy5hcnJheVswXSA9IHRoaXMuYXJyYXlbLS10aGlzLnNpemVdO1xuICAgIHRoaXMuX3BlcmNvbGF0ZURvd24oMCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zaXplIC09IDE7XG4gIH1cbiAgcmV0dXJuIGFucztcbn07XG5cbi8vIFRoaXMgZnVuY3Rpb24gYWRkcyB0aGUgcHJvdmlkZWQgdmFsdWUgdG8gdGhlIGhlYXAsIHdoaWxlIHJlbW92aW5nXG4vLyBhbmQgcmV0dXJuaW5nIG9uZSBvZiB0aGUgc21hbGxlc3QgZWxlbWVudHMgKGxpa2UgcG9sbCkuIFRoZSBzaXplIG9mIHRoZSBxdWV1ZVxuLy8gdGh1cyByZW1haW5zIHVuY2hhbmdlZC5cbkZhc3RQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5yZXBsYWNlVG9wID0gZnVuY3Rpb24obXl2YWwpIHtcbiAgaWYgKHRoaXMuc2l6ZSA9PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICB2YXIgYW5zID0gdGhpcy5hcnJheVswXTtcbiAgdGhpcy5hcnJheVswXSA9IG15dmFsO1xuICB0aGlzLl9wZXJjb2xhdGVEb3duKDApO1xuICByZXR1cm4gYW5zO1xufTtcblxuLy8gcmVjb3ZlciB1bnVzZWQgbWVtb3J5IChmb3IgbG9uZy1ydW5uaW5nIHByaW9yaXR5IHF1ZXVlcylcbkZhc3RQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS50cmltID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYXJyYXkgPSB0aGlzLmFycmF5LnNsaWNlKDAsIHRoaXMuc2l6ZSk7XG59O1xuXG4vLyBDaGVjayB3aGV0aGVyIHRoZSBoZWFwIGlzIGVtcHR5XG5GYXN0UHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zaXplID09PSAwO1xufTtcblxuLy8gaXRlcmF0ZSBvdmVyIHRoZSBpdGVtcyBpbiBvcmRlciwgcGFzcyBhIGNhbGxiYWNrIHRoYXQgcmVjZWl2ZXMgKGl0ZW0sIGluZGV4KSBhcyBhcmdzLlxuLy8gVE9ETyBvbmNlIHdlIHRyYW5zcGlsZSwgdW5jb21tZW50XG4vLyBpZiAoU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcikge1xuLy8gICBGYXN0UHJpb3JpdHlRdWV1ZS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKigpIHtcbi8vICAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHJldHVybjtcbi8vICAgICB2YXIgZnBxID0gdGhpcy5jbG9uZSgpO1xuLy8gICAgIHdoaWxlICghZnBxLmlzRW1wdHkoKSkge1xuLy8gICAgICAgeWllbGQgZnBxLnBvbGwoKTtcbi8vICAgICB9XG4vLyAgIH07XG4vLyB9XG5GYXN0UHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIGlmICh0aGlzLmlzRW1wdHkoKSB8fCB0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xuICB2YXIgaSA9IDA7XG4gIHZhciBmcHEgPSB0aGlzLmNsb25lKCk7XG4gIHdoaWxlICghZnBxLmlzRW1wdHkoKSkge1xuICAgIGNhbGxiYWNrKGZwcS5wb2xsKCksIGkrKyk7XG4gIH1cbn07XG5cbi8vIHJldHVybiB0aGUgayAnc21hbGxlc3QnIGVsZW1lbnRzIG9mIHRoZSBxdWV1ZVxuLy8gcnVucyBpbiBPKGsgbG9nIGspIHRpbWVcbi8vIHRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgb2YgcmVwZWF0ZWRseSBjYWxsaW5nIHBvbGwsIGJ1dFxuLy8gaXQgaGFzIGEgYmV0dGVyIGNvbXB1dGF0aW9uYWwgY29tcGxleGl0eSwgd2hpY2ggY2FuIGJlXG4vLyBpbXBvcnRhbnQgZm9yIGxhcmdlIGRhdGEgc2V0cy5cbkZhc3RQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5rU21hbGxlc3QgPSBmdW5jdGlvbihrKSB7XG4gIGlmICh0aGlzLnNpemUgPT0gMCkgcmV0dXJuIFtdO1xuICB2YXIgY29tcGFyYXRvciA9IHRoaXMuY29tcGFyZTtcbiAgdmFyIGFyciA9IHRoaXMuYXJyYXlcbiAgdmFyIGZwcSA9IG5ldyBGYXN0UHJpb3JpdHlRdWV1ZShmdW5jdGlvbihhLGIpe1xuICAgcmV0dXJuIGNvbXBhcmF0b3IoYXJyW2FdLGFycltiXSk7XG4gIH0pO1xuICBrID0gTWF0aC5taW4odGhpcy5zaXplLCBrKTtcbiAgdmFyIHNtYWxsZXN0ID0gbmV3IEFycmF5KGspO1xuICB2YXIgaiA9IDA7XG4gIGZwcS5hZGQoMCk7XG4gIHdoaWxlIChqIDwgaykge1xuICAgIHZhciBzbWFsbCA9IGZwcS5wb2xsKCk7XG4gICAgc21hbGxlc3RbaisrXSA9IHRoaXMuYXJyYXlbc21hbGxdO1xuICAgIHZhciBsID0gKHNtYWxsIDw8IDEpICsgMTtcbiAgICB2YXIgciA9IGwgKyAxO1xuICAgIGlmIChsIDwgdGhpcy5zaXplKSBmcHEuYWRkKGwpO1xuICAgIGlmIChyIDwgdGhpcy5zaXplKSBmcHEuYWRkKHIpO1xuICB9XG4gIHJldHVybiBzbWFsbGVzdDtcbn1cblxuLy8ganVzdCBmb3IgaWxsdXN0cmF0aW9uIHB1cnBvc2VzXG52YXIgbWFpbiA9IGZ1bmN0aW9uKCkge1xuICAvLyBtYWluIGNvZGVcbiAgdmFyIHggPSBuZXcgRmFzdFByaW9yaXR5UXVldWUoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhIDwgYjtcbiAgfSk7XG4gIHguYWRkKDEpO1xuICB4LmFkZCgwKTtcbiAgeC5hZGQoNSk7XG4gIHguYWRkKDQpO1xuICB4LmFkZCgzKTtcbiAgd2hpbGUgKCF4LmlzRW1wdHkoKSkge1xuICAgIGNvbnNvbGUubG9nKHgucG9sbCgpKTtcbiAgfVxufTtcblxuaWYgKHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlKSB7XG4gIG1haW4oKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGYXN0UHJpb3JpdHlRdWV1ZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/fastpriorityqueue/FastPriorityQueue.js\n");

/***/ }),

/***/ "./node_modules/iota-array/iota.js":
/*!*****************************************!*\
  !*** ./node_modules/iota-array/iota.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW90YS1hcnJheS9pb3RhLmpzPzIwMzEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQTtBQUNBLGNBQWMsS0FBSztBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9pb3RhLWFycmF5L2lvdGEuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5mdW5jdGlvbiBpb3RhKG4pIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShuKVxuICBmb3IodmFyIGk9MDsgaTxuOyArK2kpIHtcbiAgICByZXN1bHRbaV0gPSBpXG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlvdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/iota-array/iota.js\n");

/***/ }),

/***/ "./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzPzA0NGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/is-buffer/index.js\n");

/***/ }),

/***/ "./node_modules/ndarray/ndarray.js":
/*!*****************************************!*\
  !*** ./node_modules/ndarray/ndarray.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var iota = __webpack_require__(/*! iota-array */ \"./node_modules/iota-array/iota.js\")\nvar isBuffer = __webpack_require__(/*! is-buffer */ \"./node_modules/is-buffer/index.js\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ndarray/ndarray.js\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime-module.js":
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLW1vZHVsZS5qcz9iYmRkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLGdFQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUtbW9kdWxlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vLyBUaGlzIG1ldGhvZCBvZiBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgbmVlZHMgdG8gYmVcbi8vIGtlcHQgaWRlbnRpY2FsIHRvIHRoZSB3YXkgaXQgaXMgb2J0YWluZWQgaW4gcnVudGltZS5qc1xudmFyIGcgPSAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzIHx8ICh0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBzZWxmKTtcbn0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuXG4vLyBVc2UgYGdldE93blByb3BlcnR5TmFtZXNgIGJlY2F1c2Ugbm90IGFsbCBicm93c2VycyBzdXBwb3J0IGNhbGxpbmdcbi8vIGBoYXNPd25Qcm9wZXJ0eWAgb24gdGhlIGdsb2JhbCBgc2VsZmAgb2JqZWN0IGluIGEgd29ya2VyLiBTZWUgIzE4My5cbnZhciBoYWRSdW50aW1lID0gZy5yZWdlbmVyYXRvclJ1bnRpbWUgJiZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZykuaW5kZXhPZihcInJlZ2VuZXJhdG9yUnVudGltZVwiKSA+PSAwO1xuXG4vLyBTYXZlIHRoZSBvbGQgcmVnZW5lcmF0b3JSdW50aW1lIGluIGNhc2UgaXQgbmVlZHMgdG8gYmUgcmVzdG9yZWQgbGF0ZXIuXG52YXIgb2xkUnVudGltZSA9IGhhZFJ1bnRpbWUgJiYgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG5cbi8vIEZvcmNlIHJlZXZhbHV0YXRpb24gb2YgcnVudGltZS5qcy5cbmcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5cbmlmIChoYWRSdW50aW1lKSB7XG4gIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIHJ1bnRpbWUuXG4gIGcucmVnZW5lcmF0b3JSdW50aW1lID0gb2xkUnVudGltZTtcbn0gZWxzZSB7XG4gIC8vIFJlbW92ZSB0aGUgZ2xvYmFsIHByb3BlcnR5IGFkZGVkIGJ5IHJ1bnRpbWUuanMuXG4gIHRyeSB7XG4gICAgZGVsZXRlIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuICB9IGNhdGNoKGUpIHtcbiAgICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime-module.js\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./src/math-utils.js":
/*!***************************!*\
  !*** ./src/math-utils.js ***!
  \***************************/
/*! exports provided: range, permutationGenerator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"range\", function() { return range; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"permutationGenerator\", function() { return permutationGenerator; });\n/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime-module.js\");\n/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0__);\nvar _marked =\n/*#__PURE__*/\nregenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(range),\n    _marked2 =\n/*#__PURE__*/\nregenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(permutationGenerator);\n\n // returns generator over values in range\n// supports range(start, end[, step]) and range(end)\n// (start inclusive, end exclusive)\n// start = 0 by default\n// step = 1 by default\n\nfunction range() {\n  var start,\n      end,\n      step,\n      _len,\n      args,\n      _key,\n      i,\n      _i,\n      _args = arguments;\n\n  return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function range$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = _args[_key];\n          }\n\n          if (args.length === 1) {\n            start = 0;\n            end = args[0];\n            step = 1;\n          } else if (args.length === 2) {\n            start = args[0];\n            end = args[1];\n            step = 1;\n          } else if (args.length === 3) {\n            start = args[0];\n            end = args[1];\n            step = args[2];\n          }\n\n          if (!(end > start)) {\n            _context.next = 14;\n            break;\n          }\n\n          if (!(step < 0)) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new Error(\"Step must bring start closer to end\");\n\n        case 5:\n          i = start;\n\n        case 6:\n          if (!(i < end)) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 9;\n          return i;\n\n        case 9:\n          i += step;\n          _context.next = 6;\n          break;\n\n        case 12:\n          _context.next = 23;\n          break;\n\n        case 14:\n          if (!(step > 0)) {\n            _context.next = 16;\n            break;\n          }\n\n          throw new Error(\"Step must bring start closer to end\");\n\n        case 16:\n          _i = start;\n\n        case 17:\n          if (!(_i > end)) {\n            _context.next = 23;\n            break;\n          }\n\n          _context.next = 20;\n          return _i;\n\n        case 20:\n          _i += step;\n          _context.next = 17;\n          break;\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n} // returns Generator over all permutations of values in arr with length r\n// adapted from python's itertools.permutations\n\n\nfunction permutationGenerator(arr) {\n  var r,\n      pool,\n      n,\n      inds,\n      cycles,\n      output,\n      i,\n      yielded,\n      _i2,\n      temp,\n      j,\n      swapInd,\n      _ref,\n      k,\n      _args2 = arguments;\n\n  return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function permutationGenerator$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          r = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : arr.length;\n          pool = arr;\n          n = arr.length;\n          inds = Uint8Array.from(range(n));\n          cycles = Uint8Array.from(range(n, n - r, -1));\n          output = new Uint8Array(r);\n\n          for (i = 0; i < r; i++) {\n            output[i] = pool[inds[i]];\n          }\n\n          _context2.next = 9;\n          return output;\n\n        case 9:\n          yielded = true;\n\n        case 10:\n          if (!yielded) {\n            _context2.next = 37;\n            break;\n          }\n\n          yielded = false;\n          _i2 = r - 1;\n\n        case 13:\n          if (!(_i2 >= 0)) {\n            _context2.next = 35;\n            break;\n          }\n\n          cycles[_i2]--;\n\n          if (!(cycles[_i2] === 0)) {\n            _context2.next = 22;\n            break;\n          }\n\n          // moves inds[i] to end, push other inds left to fill space\n          temp = inds[_i2];\n          inds.copyWithin(_i2, _i2 + 1);\n          inds[inds.length - 1] = temp;\n          cycles[_i2] = n - _i2;\n          _context2.next = 32;\n          break;\n\n        case 22:\n          j = cycles[_i2];\n          swapInd = j === 0 ? 0 : inds.length - j;\n          _ref = [inds[swapInd], inds[_i2]];\n          inds[_i2] = _ref[0];\n          inds[swapInd] = _ref[1];\n\n          for (k = 0; k < r; k++) {\n            output[k] = pool[inds[k]];\n          }\n\n          _context2.next = 30;\n          return output;\n\n        case 30:\n          yielded = true;\n          return _context2.abrupt(\"break\", 35);\n\n        case 32:\n          _i2--;\n          _context2.next = 13;\n          break;\n\n        case 35:\n          _context2.next = 10;\n          break;\n\n        case 37:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWF0aC11dGlscy5qcz83YmVhIl0sIm5hbWVzIjpbInJhbmdlIiwicGVybXV0YXRpb25HZW5lcmF0b3IiLCJhcmdzIiwibGVuZ3RoIiwic3RhcnQiLCJlbmQiLCJzdGVwIiwiRXJyb3IiLCJpIiwiYXJyIiwiciIsInBvb2wiLCJuIiwiaW5kcyIsIlVpbnQ4QXJyYXkiLCJmcm9tIiwiY3ljbGVzIiwib3V0cHV0IiwieWllbGRlZCIsInRlbXAiLCJjb3B5V2l0aGluIiwiaiIsInN3YXBJbmQiLCJrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O2dFQU9VQSxLOzs7Z0VBNEJBQyxvQjs7Q0FqQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFVRCxLQUFWO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsb0NBQW1CRSxJQUFuQjtBQUFtQkEsZ0JBQW5CO0FBQUE7O0FBRUksY0FBSUEsSUFBSSxDQUFDQyxNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ25CQyxpQkFBSyxHQUFHLENBQVI7QUFDQUMsZUFBRyxHQUFHSCxJQUFJLENBQUMsQ0FBRCxDQUFWO0FBQ0FJLGdCQUFJLEdBQUcsQ0FBUDtBQUNILFdBSkQsTUFJTyxJQUFJSixJQUFJLENBQUNDLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUI7QUFDekJDLGlCQUR5QixHQUNYRixJQURXO0FBQ2xCRyxlQURrQixHQUNYSCxJQURXO0FBRTFCSSxnQkFBSSxHQUFHLENBQVA7QUFDSCxXQUhNLE1BR0EsSUFBSUosSUFBSSxDQUFDQyxNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ3pCQyxpQkFEeUIsR0FDTEYsSUFESztBQUNsQkcsZUFEa0IsR0FDTEgsSUFESztBQUNiSSxnQkFEYSxHQUNMSixJQURLO0FBRTdCOztBQVhMLGdCQWFRRyxHQUFHLEdBQUdELEtBYmQ7QUFBQTtBQUFBO0FBQUE7O0FBQUEsZ0JBY1lFLElBQUksR0FBRyxDQWRuQjtBQUFBO0FBQUE7QUFBQTs7QUFBQSxnQkFla0IsSUFBSUMsS0FBSix1Q0FmbEI7O0FBQUE7QUFpQmlCQyxXQWpCakIsR0FpQnFCSixLQWpCckI7O0FBQUE7QUFBQSxnQkFpQjRCSSxDQUFDLEdBQUdILEdBakJoQztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQWlCZ0QsaUJBQU1HLENBQU47O0FBakJoRDtBQWlCcUNBLFdBQUMsSUFBSUYsSUFqQjFDO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQSxnQkFtQllBLElBQUksR0FBRyxDQW5CbkI7QUFBQTtBQUFBO0FBQUE7O0FBQUEsZ0JBb0JrQixJQUFJQyxLQUFKLHVDQXBCbEI7O0FBQUE7QUFzQmlCQyxZQXRCakIsR0FzQnFCSixLQXRCckI7O0FBQUE7QUFBQSxnQkFzQjRCSSxFQUFDLEdBQUdILEdBdEJoQztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQXNCZ0QsaUJBQU1HLEVBQU47O0FBdEJoRDtBQXNCcUNBLFlBQUMsSUFBSUYsSUF0QjFDO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDLENBMEJBO0FBQ0E7OztBQUNBLFNBQVVMLG9CQUFWLENBQStCUSxHQUEvQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFvQ0MsV0FBcEMsOERBQXNDRCxHQUFHLENBQUNOLE1BQTFDO0FBQ1FRLGNBRFIsR0FDZUYsR0FEZjtBQUVRRyxXQUZSLEdBRVlILEdBQUcsQ0FBQ04sTUFGaEI7QUFJUVUsY0FKUixHQUllQyxVQUFVLENBQUNDLElBQVgsQ0FBZ0JmLEtBQUssQ0FBQ1ksQ0FBRCxDQUFyQixDQUpmO0FBS1FJLGdCQUxSLEdBS2lCRixVQUFVLENBQUNDLElBQVgsQ0FBZ0JmLEtBQUssQ0FBQ1ksQ0FBRCxFQUFJQSxDQUFDLEdBQUdGLENBQVIsRUFBVyxDQUFDLENBQVosQ0FBckIsQ0FMakI7QUFPUU8sZ0JBUFIsR0FPaUIsSUFBSUgsVUFBSixDQUFlSixDQUFmLENBUGpCOztBQVFJLGVBQVNGLENBQVQsR0FBYSxDQUFiLEVBQWdCQSxDQUFDLEdBQUdFLENBQXBCLEVBQXVCRixDQUFDLEVBQXhCO0FBQTRCUyxrQkFBTSxDQUFDVCxDQUFELENBQU4sR0FBWUcsSUFBSSxDQUFDRSxJQUFJLENBQUNMLENBQUQsQ0FBTCxDQUFoQjtBQUE1Qjs7QUFSSjtBQVNJLGlCQUFNUyxNQUFOOztBQVRKO0FBV1FDLGlCQVhSLEdBV2tCLElBWGxCOztBQUFBO0FBQUEsZUFhV0EsT0FiWDtBQUFBO0FBQUE7QUFBQTs7QUFjUUEsaUJBQU8sR0FBRyxLQUFWO0FBQ1NWLGFBZmpCLEdBZXFCRSxDQUFDLEdBQUcsQ0FmekI7O0FBQUE7QUFBQSxnQkFlNEJGLEdBQUMsSUFBRyxDQWZoQztBQUFBO0FBQUE7QUFBQTs7QUFnQllRLGdCQUFNLENBQUNSLEdBQUQsQ0FBTjs7QUFoQlosZ0JBaUJnQlEsTUFBTSxDQUFDUixHQUFELENBQU4sS0FBYyxDQWpCOUI7QUFBQTtBQUFBO0FBQUE7O0FBa0JnQjtBQUNJVyxjQW5CcEIsR0FtQjJCTixJQUFJLENBQUNMLEdBQUQsQ0FuQi9CO0FBb0JnQkssY0FBSSxDQUFDTyxVQUFMLENBQWdCWixHQUFoQixFQUFtQkEsR0FBQyxHQUFHLENBQXZCO0FBQ0FLLGNBQUksQ0FBQ0EsSUFBSSxDQUFDVixNQUFMLEdBQWMsQ0FBZixDQUFKLEdBQXdCZ0IsSUFBeEI7QUFFQUgsZ0JBQU0sQ0FBQ1IsR0FBRCxDQUFOLEdBQVlJLENBQUMsR0FBR0osR0FBaEI7QUF2QmhCO0FBQUE7O0FBQUE7QUF5Qm9CYSxXQXpCcEIsR0F5QndCTCxNQUFNLENBQUNSLEdBQUQsQ0F6QjlCO0FBMEJvQmMsaUJBMUJwQixHQTBCOEJELENBQUMsS0FBSyxDQUFOLEdBQVUsQ0FBVixHQUFjUixJQUFJLENBQUNWLE1BQUwsR0FBY2tCLENBMUIxRDtBQUFBLGlCQTJCMkMsQ0FBQ1IsSUFBSSxDQUFDUyxPQUFELENBQUwsRUFBZ0JULElBQUksQ0FBQ0wsR0FBRCxDQUFwQixDQTNCM0M7QUEyQmlCSyxjQUFJLENBQUNMLEdBQUQsQ0EzQnJCO0FBMkIwQkssY0FBSSxDQUFDUyxPQUFELENBM0I5Qjs7QUE2QmdCLGVBQVNDLENBQVQsR0FBYSxDQUFiLEVBQWdCQSxDQUFDLEdBQUdiLENBQXBCLEVBQXVCYSxDQUFDLEVBQXhCO0FBQTRCTixrQkFBTSxDQUFDTSxDQUFELENBQU4sR0FBWVosSUFBSSxDQUFDRSxJQUFJLENBQUNVLENBQUQsQ0FBTCxDQUFoQjtBQUE1Qjs7QUE3QmhCO0FBOEJnQixpQkFBTU4sTUFBTjs7QUE5QmhCO0FBZ0NnQkMsaUJBQU8sR0FBRyxJQUFWO0FBaENoQjs7QUFBQTtBQWVtQ1YsYUFBQyxFQWZwQztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6Ii4vc3JjL21hdGgtdXRpbHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUnXG5cbi8vIHJldHVybnMgZ2VuZXJhdG9yIG92ZXIgdmFsdWVzIGluIHJhbmdlXG4vLyBzdXBwb3J0cyByYW5nZShzdGFydCwgZW5kWywgc3RlcF0pIGFuZCByYW5nZShlbmQpXG4vLyAoc3RhcnQgaW5jbHVzaXZlLCBlbmQgZXhjbHVzaXZlKVxuLy8gc3RhcnQgPSAwIGJ5IGRlZmF1bHRcbi8vIHN0ZXAgPSAxIGJ5IGRlZmF1bHRcbmZ1bmN0aW9uKiByYW5nZSguLi5hcmdzKSB7XG4gICAgbGV0IHN0YXJ0LCBlbmQsIHN0ZXA7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gYXJnc1swXTtcbiAgICAgICAgc3RlcCA9IDE7XG4gICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBbc3RhcnQsIGVuZF0gPSBhcmdzO1xuICAgICAgICBzdGVwID0gMTtcbiAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgICAgIFtzdGFydCwgZW5kLCBzdGVwXSA9IGFyZ3M7XG4gICAgfVxuXG4gICAgaWYgKGVuZCA+IHN0YXJ0KSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGVwIG11c3QgYnJpbmcgc3RhcnQgY2xvc2VyIHRvIGVuZGApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBzdGVwKSB5aWVsZCBpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGVwIG11c3QgYnJpbmcgc3RhcnQgY2xvc2VyIHRvIGVuZGApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA+IGVuZDsgaSArPSBzdGVwKSB5aWVsZCBpO1xuICAgIH1cbn1cblxuLy8gcmV0dXJucyBHZW5lcmF0b3Igb3ZlciBhbGwgcGVybXV0YXRpb25zIG9mIHZhbHVlcyBpbiBhcnIgd2l0aCBsZW5ndGggclxuLy8gYWRhcHRlZCBmcm9tIHB5dGhvbidzIGl0ZXJ0b29scy5wZXJtdXRhdGlvbnNcbmZ1bmN0aW9uKiBwZXJtdXRhdGlvbkdlbmVyYXRvcihhcnIsIHI9YXJyLmxlbmd0aCkge1xuICAgIGxldCBwb29sID0gYXJyO1xuICAgIGxldCBuID0gYXJyLmxlbmd0aDtcblxuICAgIGxldCBpbmRzID0gVWludDhBcnJheS5mcm9tKHJhbmdlKG4pKTtcbiAgICBsZXQgY3ljbGVzID0gVWludDhBcnJheS5mcm9tKHJhbmdlKG4sIG4gLSByLCAtMSkpO1xuXG4gICAgbGV0IG91dHB1dCA9IG5ldyBVaW50OEFycmF5KHIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcjsgaSsrKSBvdXRwdXRbaV0gPSBwb29sW2luZHNbaV1dO1xuICAgIHlpZWxkIG91dHB1dDtcblxuICAgIGxldCB5aWVsZGVkID0gdHJ1ZTtcblxuICAgIHdoaWxlICh5aWVsZGVkKSB7XG4gICAgICAgIHlpZWxkZWQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHIgLSAxOyBpID49MDsgaS0tKSB7XG4gICAgICAgICAgICBjeWNsZXNbaV0tLTtcbiAgICAgICAgICAgIGlmIChjeWNsZXNbaV0gPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBtb3ZlcyBpbmRzW2ldIHRvIGVuZCwgcHVzaCBvdGhlciBpbmRzIGxlZnQgdG8gZmlsbCBzcGFjZVxuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gaW5kc1tpXTtcbiAgICAgICAgICAgICAgICBpbmRzLmNvcHlXaXRoaW4oaSwgaSArIDEpO1xuICAgICAgICAgICAgICAgIGluZHNbaW5kcy5sZW5ndGggLSAxXSA9IHRlbXA7XG5cbiAgICAgICAgICAgICAgICBjeWNsZXNbaV0gPSBuIC0gaTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGogPSBjeWNsZXNbaV07XG4gICAgICAgICAgICAgICAgbGV0IHN3YXBJbmQgPSBqID09PSAwID8gMCA6IGluZHMubGVuZ3RoIC0gajtcbiAgICAgICAgICAgICAgICBbaW5kc1tpXSwgaW5kc1tzd2FwSW5kXV0gPSBbaW5kc1tzd2FwSW5kXSwgaW5kc1tpXV07XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHI7IGsrKykgb3V0cHV0W2tdID0gcG9vbFtpbmRzW2tdXTtcbiAgICAgICAgICAgICAgICB5aWVsZCBvdXRwdXQ7XG5cbiAgICAgICAgICAgICAgICB5aWVsZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHtyYW5nZSwgcGVybXV0YXRpb25HZW5lcmF0b3J9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/math-utils.js\n");

/***/ }),

/***/ "./src/sliding-puzzle-algorithms.js":
/*!******************************************!*\
  !*** ./src/sliding-puzzle-algorithms.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var fastpriorityqueue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fastpriorityqueue */ \"./node_modules/fastpriorityqueue/FastPriorityQueue.js\");\n/* harmony import */ var fastpriorityqueue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fastpriorityqueue__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ndarray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ndarray */ \"./node_modules/ndarray/ndarray.js\");\n/* harmony import */ var ndarray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ndarray__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var avl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! avl */ \"./node_modules/avl/src/index.js\");\n/* harmony import */ var _math_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./math-utils */ \"./src/math-utils.js\");\n/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime-module.js\");\n/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime__WEBPACK_IMPORTED_MODULE_4__);\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// Operator pre-computation, in-place modification of grid state for ida* based on\n// \"Implementing Fast Heuristic Search Code\"\n// by Ethan Burns and Matthew Hatem and Michael J. Leighton and Wheeler Ruml\n// Linear conflict heuristic based on\n// \"Criticizing Solutions to Relaxed Models Yields Powerful Admissible Heuristics\"\n// by Othar Hansson and Andrew Mayer\n// TODO: modify readme to explain how to use node + webpack + babel\n// TODO: write function to time performance of different alg+heuristic combos\n// TODO: fix freeze when solving some 5x4 puzzles (and presumably those larger than that) using A*\n// iteration limit should work, but not working and/or iterations taking substantially more memory + longer\n\n\n\n\n\nvar REVERSE_MOVE_MAP = {\n  'r': 'l',\n  'l': 'r',\n  'd': 'u',\n  'u': 'd' // TODO: if using pattern database, consider encoding pattern numbers into bytes and storing in int\n  // probably use 6-6-3 pattern database (while not fastest, takes up moderate amount of memory)\n  // consider using IndexedDB for db storage\n  // pros: simple, well-supported\n  // cons: probably slower than loading Map into memory\n  // alternative: look into storing db as bytes, read whole db into memory at start and query from there\n  // TODO: note that pattern dbs will make it difficult to allow non-square puzzles with dimensions > 4\n  // NOTE: methods not static to support using cached MD data specific to puzzle\n  // grid not part of constructor as single heuristic passed between all grids in a given Puzzle\n\n};\n\nvar ManhattanHeuristic =\n/*#__PURE__*/\nfunction () {\n  function ManhattanHeuristic(numRows, numCols) {\n    _classCallCheck(this, ManhattanHeuristic);\n\n    this.numRows = numRows;\n    this.numCols = numCols;\n    this.numTiles = numRows * numCols;\n\n    this._precompute();\n\n    this.moveNumberMap = {\n      'l': 0,\n      'r': 1,\n      'u': 2,\n      'd': 3\n    };\n  } // TODO: change so precompute called once for all puzzles of same size\n  // since no matter what user settings are called, all possible inds and goalInds accounted for\n  // store as class property, and change heuristics back to static\n  // returns whether precomputation could be completed\n\n\n  _createClass(ManhattanHeuristic, [{\n    key: \"_precompute\",\n    value: function _precompute() {\n      // stop precomputing when numTiles > 100 (50,000 array entries in cache)\n      if (this.numTiles > 100) {\n        return false;\n      } // _md.get(i, j) = md value at ind = i, goalInd = j\n\n\n      this._md = ndarray__WEBPACK_IMPORTED_MODULE_1___default()(new Uint16Array(Math.pow(this.numTiles, 2)), [this.numTiles, this.numTiles]); // _mdDelta.get(i, j, k) = change in MD when ind = i, goalInd = j, and move = k\n      // where move = 0 -> 'l', 1 -> 'r', 2 -> 'u' 3 -> 'd'\n\n      this._mdDelta = ndarray__WEBPACK_IMPORTED_MODULE_1___default()(new Int8Array(4 * Math.pow(this.numTiles, 2)), [this.numTiles, this.numTiles, 4]); // l, r, u, d\n\n      var moveDeltaMap = Int16Array.from([-1, 1, -this.numCols, this.numCols]);\n      var ind, goalInd;\n      ind = 0;\n\n      for (var row1 = 0; row1 < this.numRows; row1++) {\n        for (var col1 = 0; col1 < this.numCols; col1++) {\n          goalInd = 0;\n\n          for (var row2 = 0; row2 < this.numRows; row2++) {\n            for (var col2 = 0; col2 < this.numCols; col2++) {\n              this._md.set(ind, goalInd, Math.abs(row2 - row1) + Math.abs(col2 - col1));\n\n              goalInd++;\n            }\n          }\n\n          ind++;\n        }\n      }\n\n      ind = 0;\n\n      for (var _row = 0; _row < this.numRows; _row++) {\n        for (var _col = 0; _col < this.numCols; _col++) {\n          goalInd = 0;\n\n          for (var _row2 = 0; _row2 < this.numRows; _row2++) {\n            for (var _col2 = 0; _col2 < this.numCols; _col2++) {\n              var startMD = this._md.get(ind, goalInd); // l, r, u, d\n\n\n              for (var move = 0; move < 4; move++) {\n                var endMD = this._md.get(ind + moveDeltaMap[move], goalInd);\n\n                this._mdDelta.set(ind, goalInd, move, endMD - startMD);\n              }\n\n              goalInd++;\n            }\n          }\n\n          ind++;\n        }\n      }\n\n      return true;\n    } // returns heuristic distance from goal\n\n  }, {\n    key: \"calculate\",\n    value: function calculate(grid) {\n      var dist = 0;\n\n      for (var i = 0; i < grid.tiles.length; i++) {\n        if (i !== grid.emptyPos) {\n          if (this._md) {\n            dist += this._md.get(i, grid.tiles[i]);\n          } else {\n            dist += grid.getTileDist(i, grid.tiles[i]);\n          }\n        }\n      }\n\n      return dist;\n    } // TODO: consider refactoring to just use \"grid\" to prevent confusion\n    // Returns updated heuristic distance from goal after move\n    // newGrid = Grid after move (distinct object), with all properties updated besides heuristicValue\n    // startInd = ind moved tile started in\n    // endInd = ind moved tile ended up in\n    // move = single-letter move within 'l/r/u/d'\n    // NOTE: assumes newGrid's heuristic value is same as old grid (not yet updated)\n\n  }, {\n    key: \"update\",\n    value: function update(newGrid, startInd, endInd, move) {\n      return this.getUpdateDelta(newGrid, startInd, endInd, move) + newGrid.heuristicValue;\n    } // returns change in heuristic distance from move\n    // newGrid = Grid after move (distinct object), with all properties updated besides heuristicValue\n    // startInd = ind moved tile started in\n    // endInd = ind moved tile ended up in\n    // move = single-letter move within 'l/r/u/d'\n\n  }, {\n    key: \"getUpdateDelta\",\n    value: function getUpdateDelta(newGrid, startInd, endInd, move) {\n      if (this._mdDelta) {\n        // get(movedInd, goalInd, move)\n        // (goalInd is value of tile at endInd, as newGrid's endInd is oldGrid's startInd)\n        return this._mdDelta.get(startInd, newGrid.tiles[endInd], this.moveNumberMap[move]);\n      }\n\n      var goalInd = newGrid.tiles[endInd],\n          goalRow = newGrid.getTileRow(goalInd),\n          goalCol = newGrid.getTileCol(goalInd);\n      var startRow = newGrid.getTileRow(startInd),\n          startCol = newGrid.getTileCol(startInd);\n      var endRow = newGrid.getTileRow(endInd),\n          endCol = newGrid.getTileCol(endInd);\n      return Math.abs(goalRow - endRow) + Math.abs(goalCol - endCol) - Math.abs(goalRow - startRow) + Math.abs(goalCol - startCol);\n    } // returns whether heuristic value indicates if puzzle is solved\n\n  }, {\n    key: \"isSolved\",\n    value: function isSolved(heuristicValue) {\n      return heuristicValue === 0;\n    }\n  }]);\n\n  return ManhattanHeuristic;\n}(); // NOTE: methods not static to support using cached MD data specific to puzzle\n\n\nvar LinearConflictHeuristic =\n/*#__PURE__*/\nfunction (_ManhattanHeuristic) {\n  _inherits(LinearConflictHeuristic, _ManhattanHeuristic);\n\n  function LinearConflictHeuristic(numRows, numCols) {\n    _classCallCheck(this, LinearConflictHeuristic);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LinearConflictHeuristic).call(this, numRows, numCols));\n  } // returns whether precomputation could be completed\n\n\n  _createClass(LinearConflictHeuristic, [{\n    key: \"_precompute\",\n    value: function _precompute() {\n      _get(_getPrototypeOf(LinearConflictHeuristic.prototype), \"_precompute\", this).call(this);\n\n      var n = Math.max(this.numRows, this.numCols); // avoid precomputation when n > 8 or puzzle is 1D (can just use MD)\n      // 9 has 986,409 perms\n      // 8 has 19,173,960 spaces (each > 1 byte given Uint8Array and overhead)\n      // while precomputing still feasible for n = 9, no point as > 1D puzzles not\n      // optimally solvable at that point for current solvers here\n      // ndarray also becomes too large when n = 10 (throws error)\n\n      if (n > 8 || this.numRows === 1 || this.numCols === 1) {\n        return false;\n      } // maps size of orderings of tiles in their goal row/col to an ndarray\n      // mapping the orderings themselves to the linear conflict heuristic value\n      // NOTE: ndarray used instead of map, as constant toString() computationally costlier\n      // than indexing into ndarray\n      // cons: much larger space consumption (sum of n^k from k = 1 to n)\n      // consumes 19,173,960 spaces (each > 1 byte given Uint8Array and overhead) when n = 8\n\n\n      this._lc = new Array(n);\n\n      for (var permSize = 1; permSize <= n; permSize++) {\n        this._lc[permSize] = ndarray__WEBPACK_IMPORTED_MODULE_1___default()(new Uint8Array(Math.pow(n, permSize)), new Uint8Array(permSize).fill(n));\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._permutationHelper(n)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _this$_lc$perm$length;\n\n          var perm = _step.value;\n\n          (_this$_lc$perm$length = this._lc[perm.length]).set.apply(_this$_lc$perm$length, _toConsumableArray(perm).concat([this._calculate(perm)]));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return true;\n    } // returns Generator over possible orderings of tiles in their goal rows/cols\n    // ex: [2, 1, 0] = 0th ind -> tile with goal ind of 2, 1st ind -> tile with goal ind of 1\n    // NOTE: # permutations = sum of n permute k from k = 1 to n = ⌊en!−1⌋\n\n  }, {\n    key: \"_permutationHelper\",\n    value:\n    /*#__PURE__*/\n    regenerator_runtime__WEBPACK_IMPORTED_MODULE_4___default.a.mark(function _permutationHelper(n) {\n      var arr, permSize, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, perm;\n\n      return regenerator_runtime__WEBPACK_IMPORTED_MODULE_4___default.a.wrap(function _permutationHelper$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // while Int8Array goes from 0 to 255, acceptable as memory requirements\n              // balloon when numRows/numCols > 8\n              arr = Uint8Array.from(Object(_math_utils__WEBPACK_IMPORTED_MODULE_3__[\"range\"])(n));\n              permSize = 1;\n\n            case 2:\n              if (!(permSize <= n)) {\n                _context.next = 32;\n                break;\n              }\n\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _iteratorError2 = undefined;\n              _context.prev = 6;\n              _iterator2 = Object(_math_utils__WEBPACK_IMPORTED_MODULE_3__[\"permutationGenerator\"])(arr, permSize)[Symbol.iterator]();\n\n            case 8:\n              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                _context.next = 15;\n                break;\n              }\n\n              perm = _step2.value;\n              _context.next = 12;\n              return perm;\n\n            case 12:\n              _iteratorNormalCompletion2 = true;\n              _context.next = 8;\n              break;\n\n            case 15:\n              _context.next = 21;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](6);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t0;\n\n            case 21:\n              _context.prev = 21;\n              _context.prev = 22;\n\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n\n            case 24:\n              _context.prev = 24;\n\n              if (!_didIteratorError2) {\n                _context.next = 27;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 27:\n              return _context.finish(24);\n\n            case 28:\n              return _context.finish(21);\n\n            case 29:\n              permSize++;\n              _context.next = 2;\n              break;\n\n            case 32:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _permutationHelper, this, [[6, 17, 21, 29], [22,, 24, 28]]);\n    })\n  }, {\n    key: \"_calculate\",\n    value: function _calculate(arr) {\n      var map = new Map();\n\n      for (var i = 0; i < arr.length; i++) {\n        var goalInd = arr[i];\n        map.set(i, {\n          goalInd: goalInd,\n          conflicts: new Set()\n        });\n      }\n\n      return this._calculateForMap(map);\n    } // TODO: consider separating lc condition check into new function for possibly better performance\n    // (less \"if\" checks)\n    // calculates linear conflict of specified grid\n    // optional start/end params allow specifying section of grid to calculate conflict heuristic for\n    // rectangular section of grid, where start is inclusive and end if exclusive\n    // calcMD determines if calculate() includes Manhattan Distance in heuristic calculation\n    // NOTE: since linear conflict + MD always admissible and at least as good, only use\n    // calcMD = false for testing or if you plan on calculating MD in a different way\n    // ex: calculate(grid, 0, 3, 1, 2) calculates heuristic for 3 tile tall vertical chunk\n    // in col[1] from row[0->2]\n    // Heuristic explanation:\n    // linear conflict = 2 tiles in the same goal row/col but have inversion relationship.\n    // horizontal: (a is to right of b but a's goal is to left of b's goal)\n    // vertical: same but with bottom and top instead of right and left\n    // To reach goal positions, one of the tiles in the pair has to move out of the way\n    // for the other tile to reach their goal. The moved tile has to move back into their\n    // goal row/col to reach their goals.\n    //\n    // Linear conflict is calculated on every row and column, and can be combined with\n    // manhattan distance heuristic to make better admissible heuristic,\n    // as manhattan distance heuristic doesn't account for moving tiles out of the way\n    // and linear conflct doesn't account for moving to the correct tile position \n    //\n    // WARNING: You can't just add 2 to the heuristic value for each inversion found,\n    // as moving one tile out of the way can allow 2 tiles it conflicts with to move into their goals\n    // ex: [3, 1, 2] has goal positions of [1, 2, 3]\n    // to reach the goal, move 3 down and slide 1 and 2 over, and then move 3 to the goal\n    // while there are 2 inversions (3, 1) and (3, 2), moving 3 out of the way for 1 means\n    // that it is out of the way for 2 as well.\n    // If you added 2 for each inversion, heuristic = LC = (2 + 2) + MD = (2 + 1 + 1) = 8\n    // when the optimal solution only takes 6 moves (\"3\" down, \"1\" left, \"2\" left, \"3\" right x2, \"3\" up)\n\n  }, {\n    key: \"calculate\",\n    value: function calculate(grid) {\n      var heuristicValue = 0; // candidateTiles.get(i) = map of tiles of row/col i that are in their goal row/col\n      // map = {ind: {goalInd, conflicts}}\n      // - ind = current index in flattened puzzle array\n      // - goalInd = value at ind = index of the tile in the goal puzzle\n      // - conflicts is a set of conflicting indices (initially empty)\n      // NOTE: cols accessed at key = column index + grid.numRows\n      // (first grid.numRows entries are for rows, next grid.numCols entries for columns)\n\n      var candidateTiles = new Map(); // determines which tiles are in their goal row and/or column\n\n      for (var row = 0; row < this.numRows; row++) {\n        for (var col = 0; col < this.numCols; col++) {\n          var ind = grid.getIndex(row, col);\n          var goalInd = grid.tiles[ind],\n              goalRow = grid.getTileRow(goalInd),\n              goalCol = grid.getTileCol(goalInd);\n\n          if (ind !== grid.emptyPos) {\n            // add manhattan distance to heuristic value\n            if (this._md) {\n              heuristicValue += this._md.get(ind, goalInd);\n            } else {\n              heuristicValue += Math.abs(row - goalRow) + Math.abs(col - goalCol);\n            } // NOTE: single tile can be candidate for both row and col conflict\n            // as tile can be part of conflict even when it's in its goal position\n\n\n            if (grid.getTileRow(goalInd) === row) {\n              if (this._lc) {\n                if (!candidateTiles.has(row)) {\n                  candidateTiles.set(row, []);\n                }\n\n                candidateTiles.get(row).push(goalCol);\n              } else {\n                if (!candidateTiles.has(row)) {\n                  candidateTiles.set(row, new Map());\n                }\n\n                candidateTiles.get(row).set(ind, {\n                  goalInd: goalInd,\n                  conflicts: new Set()\n                });\n              }\n            }\n\n            if (grid.getTileCol(goalInd) === col) {\n              var key = grid.numRows + col;\n\n              if (this._lc) {\n                if (!candidateTiles.has(key)) {\n                  candidateTiles.set(key, []);\n                }\n\n                candidateTiles.get(key).push(goalRow);\n              } else {\n                if (!candidateTiles.has(key)) {\n                  candidateTiles.set(key, new Map());\n                }\n\n                candidateTiles.get(key).set(ind, {\n                  goalInd: goalInd,\n                  conflicts: new Set()\n                });\n              }\n            }\n          }\n        }\n      } // TODO: consider making custom function for update since only need to examine\n      // if tile in 1 (known) goal dimension and map also unnecessary\n      // maybe helper functions for processing each row/col?\n      // don't use helpers for regular calculate() though (probably less efficient\n      // since each tile would be iterated over twice (separately for row and col))\n\n\n      if (this._lc) {\n        // TODO: use values since keys unnecessary now\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = candidateTiles.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var _this$_lc$arr$length;\n\n            var _step3$value = _slicedToArray(_step3.value, 2),\n                arr = _step3$value[1];\n\n            heuristicValue += (_this$_lc$arr$length = this._lc[arr.length]).get.apply(_this$_lc$arr$length, _toConsumableArray(arr));\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      } else {\n        // row/grid.numRows + col no longer relevant and can be discarded \n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = candidateTiles.entries()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var _step4$value = _slicedToArray(_step4.value, 2),\n                map = _step4$value[1];\n\n            heuristicValue += this._calculateForMap(map);\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n\n      return heuristicValue;\n    }\n  }, {\n    key: \"_calculateForMap\",\n    value: function _calculateForMap(map) {\n      if (map.size < 2) {\n        return 0;\n      }\n\n      var heuristicValue = 0;\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = map[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n              ind1 = _step5$value[0],\n              _step5$value$ = _step5$value[1],\n              goalInd1 = _step5$value$.goalInd,\n              conflicts1 = _step5$value$.conflicts;\n\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = map[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var _step8$value = _slicedToArray(_step8.value, 2),\n                  ind2 = _step8$value[0],\n                  _step8$value$ = _step8$value[1],\n                  goalInd2 = _step8$value$.goalInd,\n                  conflicts2 = _step8$value$.conflicts;\n\n              if (ind2 > ind1 && goalInd2 < goalInd1) {\n                map.get(ind1).conflicts.add(ind2);\n                map.get(ind2).conflicts.add(ind1);\n              }\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      var conflictTree = new avl__WEBPACK_IMPORTED_MODULE_2__[\"default\"](function (a, b) {\n        if (a.ind === b.ind) return 0;\n        var diff = a.conflicts.size - b.conflicts.size; // sorts by ind ascending if conflicts equal\n        // necessary to identify object by ind in tree, as node with same # conflicts\n        // as desired node can appear before desired node\n\n        return diff === 0 ? a.ind - b.ind : diff;\n      });\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = map[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var _step6$value = _slicedToArray(_step6.value, 2),\n              ind = _step6$value[0],\n              _step6$value$ = _step6$value[1],\n              goalInd = _step6$value$.goalInd,\n              conflicts = _step6$value$.conflicts;\n\n          if (conflicts.size > 0) {\n            conflictTree.insert({\n              conflicts: conflicts,\n              ind: ind\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      var tile;\n\n      while (conflictTree.size > 0) {\n        tile = conflictTree.max(); // NOTE: library has no option for finding and removing largest item in one step\n        // could use pop() workaround with opposite comparator, but pop also calls\n        // remove() after finding min in current version (1.4.4)\n\n        conflictTree.remove(tile); // heuristic += 2 for each tile that must be removed before there are no conflicts\n\n        heuristicValue += 2;\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = tile.conflicts[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var conflict = _step7.value;\n            // corresponding conflicts of conflicting tile\n            // ex: a.conflicts = [b,c], b.conflicts = [a], corrConflicts of a = (Set) [a]\n            var corrConflicts = map.get(conflict).conflicts;\n            var corrObj = {\n              conflicts: corrConflicts,\n              ind: conflict\n            };\n            conflictTree.remove(corrObj); // NOTE: tree uses reference to same conflicts object, so conflicts updated there as well\n\n            corrConflicts.delete(tile.ind); // removed and inserted to reorder based on new number of conflicts\n\n            if (corrConflicts.size > 0) {\n              conflictTree.insert(corrObj);\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n      }\n\n      return heuristicValue;\n    } // calculates LC for given row index\n    // NOTE: doesn't incorporate MD\n\n  }, {\n    key: \"_calculateForRow\",\n    value: function _calculateForRow(grid, row) {\n      var candidateTiles = this._lc ? [] : new Map();\n\n      for (var col = 0; col < this.numCols; col++) {\n        var ind = col + this.numCols * row;\n\n        if (ind !== grid.emptyPos) {\n          var goalInd = grid.tiles[ind],\n              goalRow = grid.getTileRow(goalInd),\n              goalCol = grid.getTileCol(goalInd);\n\n          if (row === goalRow) {\n            if (this._lc) {\n              candidateTiles.push(goalCol);\n            } else {\n              candidateTiles.set(col, {\n                goalInd: goalCol,\n                conflicts: new Set()\n              });\n            }\n          }\n        }\n      }\n\n      if (this._lc) {\n        var _this$_lc$candidateTi;\n\n        if (candidateTiles.length < 2) {\n          return 0;\n        }\n\n        return (_this$_lc$candidateTi = this._lc[candidateTiles.length]).get.apply(_this$_lc$candidateTi, _toConsumableArray(candidateTiles));\n      }\n\n      return this._calculateForMap(candidateTiles);\n    } // calculates LC for given column index\n    // NOTE: doesn't incorporate MD\n\n  }, {\n    key: \"_calculateForCol\",\n    value: function _calculateForCol(grid, col) {\n      var candidateTiles = this._lc ? [] : new Map();\n\n      for (var row = 0; row < this.numRows; row++) {\n        var ind = col + this.numCols * row;\n\n        if (ind !== grid.emptyPos) {\n          var goalInd = grid.tiles[ind],\n              goalRow = grid.getTileRow(goalInd),\n              goalCol = grid.getTileCol(goalInd);\n\n          if (col === goalCol) {\n            if (this._lc) {\n              candidateTiles.push(goalRow);\n            } else {\n              candidateTiles.set(row, {\n                goalInd: goalRow,\n                conflicts: new Set()\n              });\n            }\n          }\n        }\n      }\n\n      if (this._lc) {\n        var _this$_lc$candidateTi2;\n\n        if (candidateTiles.length < 2) {\n          return 0;\n        }\n\n        return (_this$_lc$candidateTi2 = this._lc[candidateTiles.length]).get.apply(_this$_lc$candidateTi2, _toConsumableArray(candidateTiles));\n      }\n\n      return this._calculateForMap(candidateTiles);\n    }\n  }, {\n    key: \"update\",\n    value: function update(newGrid, startInd, endInd, move) {\n      return this.getUpdateDelta(newGrid, startInd, endInd, move) + newGrid.heuristicValue;\n    } // TODO: consider splitting update into 2 parts so newGrid isn't switched back and forth in IDA*\n    // (or create helper that also takes in start and end locations of tile as well as newGrid\n    // for use in IDA*)\n    // TODO: have update function that returns updated grid for use in ida*\n    // TODO: see if calculate() needs anything changed besides emptyPos and tile swap\n    // returns change in heuristic distance from move\n    // newGrid = Grid after move (distinct object), with all properties updated besides heuristicValue\n    // startInd = ind moved tile started in\n    // endInd = ind moved tile ended up in\n    // move = single-letter move within 'l/r/u/d'\n\n  }, {\n    key: \"getUpdateDelta\",\n    value: function getUpdateDelta(newGrid, startInd, endInd, move) {\n      var startRow = newGrid.getTileRow(startInd),\n          startCol = newGrid.getTileCol(startInd);\n      var startVal = 0,\n          endVal = 0;\n      var func;\n      var inds;\n\n      switch (move) {\n        case 'l':\n          func = this._calculateForCol;\n          inds = [startCol, startCol - 1];\n          break;\n\n        case 'r':\n          func = this._calculateForCol;\n          inds = [startCol, startCol + 1];\n          break;\n\n        case 'u':\n          func = this._calculateForRow;\n          inds = [startRow, startRow - 1];\n          break;\n\n        case 'd':\n          func = this._calculateForRow;\n          inds = [startRow, startRow + 1];\n          break;\n      } // Manhattan distance not calculated in func as only needs to be calculated\n      // for single tile moved (more efficient to calculate separately)\n\n\n      endVal += func.call(this, newGrid, inds[0]);\n      endVal += func.call(this, newGrid, inds[1]); // returns grid partially to pre-move state to calculate LC for relevant cols pre-move\n\n      newGrid.swap(startInd, endInd);\n      newGrid.emptyPos = endInd;\n      startVal += func.call(this, newGrid, inds[0]);\n      startVal += func.call(this, newGrid, inds[1]); // return grid to original state\n\n      newGrid.swap(startInd, endInd);\n      newGrid.emptyPos = startInd;\n      return endVal - startVal + _get(_getPrototypeOf(LinearConflictHeuristic.prototype), \"getUpdateDelta\", this).call(this, newGrid, startInd, endInd, move);\n    } // returns whether heuristic value indicates if puzzle is solved\n\n  }, {\n    key: \"isSolved\",\n    value: function isSolved(heuristicValue) {\n      return heuristicValue === 0;\n    }\n  }]);\n\n  return LinearConflictHeuristic;\n}(ManhattanHeuristic); // NOTE: separate from puzzle-graphic's Puzzles to ease testing and reduce memory cost in A*\n\n\nvar Puzzle =\n/*#__PURE__*/\nfunction () {\n  /**\n   * creates new Puzzle instance\n   * @param numRows # rows in grid\n   * @param numCols # columns in grid\n   * @param tiles flattened array of tile ids corresponding to their locations in the unsolved puzzle\n   * (where ids = tile positions in the solved puzzle left to right, top to bottom, 0 indexed)\n   * - ex: startGrid = [b, a, c], goalGrid = [a, b, c], return = [1, 0, 2]\n   * - explanation: b = goalGrid[1], a = goalGrid[0], c = goalGrid[2]\n   * @param emptyPos position of empty tile in grid\n   * @param heuristic heuristic used to determine how far grid is from goal state.\n   * Default heuristic is Linear Conflict, possible values are 'MD' and 'LC'\n   * corresponding with manhattan distance and linear conflict respectively\n   * @param solver solving algorithm to use ('IDA*' or 'A*')\n   */\n  function Puzzle(numRows, numCols, tiles, emptyPos) {\n    var _ref = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {},\n        _ref$heuristic = _ref.heuristic,\n        heuristic = _ref$heuristic === void 0 ? 'LC' : _ref$heuristic,\n        _ref$solver = _ref.solver,\n        solver = _ref$solver === void 0 ? numRows * numCols > 9 ? 'IDA*' : 'A*' : _ref$solver;\n\n    _classCallCheck(this, Puzzle);\n\n    this.numRows = numRows;\n    this.numCols = numCols; // use less memory if possible\n\n    this.tiles = tiles.length > 256 ? Uint16Array.from(tiles) : Uint8Array.from(tiles);\n    this.emptyPos = emptyPos;\n    var heuristicClass;\n\n    switch (heuristic) {\n      case 'MD':\n        heuristicClass = ManhattanHeuristic;\n        break;\n\n      default:\n        heuristicClass = LinearConflictHeuristic;\n    }\n\n    this.heuristic = new heuristicClass(numRows, numCols);\n    this.solver = solver;\n  } // returns\n  // - solution as array of moves within (l/r/u/d)\n  // - -1 if solution took too long to find\n  // - null if solution could not be found\n  // NOTE: maxIterations ignored for 'strategic' option\n\n\n  _createClass(Puzzle, [{\n    key: \"solve\",\n    value: function solve() {\n      var maxIterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100000;\n\n      if (this.solver === 'A*') {\n        return this.solveAStar(maxIterations);\n      } else if (this.solver === 'IDA*') {\n        return this.solveIDAStar(maxIterations);\n      } else if (this.solver === 'strategic') {\n        return this.solveStrategically();\n      } else {\n        throw new Error(\"\\n                {this.solver} is not a valid option. Choose between 'A*', 'IDA*', and 'strategic'.\");\n      }\n    }\n  }, {\n    key: \"solveAStar\",\n    value: function solveAStar(maxIterations) {\n      // TODO: consider using bucket queue instead of priority queue\n      // e.g. array where key = total distance, value = node with that distance\n      // also consider nested bucket queue to allow ordering by traveledDist to tie-break\n      var q = new fastpriorityqueue__WEBPACK_IMPORTED_MODULE_0___default.a( // NOTE: comparator puts grid1 first if return \"true\" (grid1 less than grid2)\n      function (grid1, grid2) {\n        var total1 = grid1.heuristicValue + grid1.traveledDist,\n            total2 = grid2.heuristicValue + grid2.traveledDist; // favor grids with more traveled distance\n        // explanation: since admissisible heuristics\n        // underestimate or match actual distance to goal,\n        // actual distance of grid with more traveled distance is likely to be <=\n        // actual distance of grid with less traveled distance\n        // when total distance is equal\n\n        return total1 === total2 ? grid1.traveledDist > grid2.traveledDist : total1 < total2;\n      });\n      var grid = new Grid(this.numRows, this.numCols, this.tiles, this.emptyPos, this.heuristic, 0);\n      q.add(grid);\n      var curr; // maps Grid state to best/shortest (heuristic + distance traveled) found so far\n\n      var best = new Map();\n      var iterations = 0;\n\n      while (q.size > 0) {\n        if (iterations > maxIterations) {\n          return -1;\n        }\n\n        curr = q.poll();\n\n        if (curr.isSolved()) {\n          console.log(iterations);\n          return curr.reconstructPath();\n        }\n\n        var _iteratorNormalCompletion9 = true;\n        var _didIteratorError9 = false;\n        var _iteratorError9 = undefined;\n\n        try {\n          for (var _iterator9 = curr.getValidMoves()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n            var move = _step9.value;\n\n            // reversing a move will never lead to an optimal path\n            if (move !== Grid.getReversedMove(curr.lastMove)) {\n              var newGrid = curr.cloneAndApplyMove(move);\n              var score = newGrid.traveledDist + newGrid.heuristicValue;\n              var key = newGrid.tiles.toString(); // add to queue and replace best score if score better than previous best\n              // NOTE: not using <, as previous best could be undefined\n              // executes if best either undefined or >= current score\n              // NOTE: obviates need for visited set, as only adds node when\n              // better than best found so far vs. adding when better than best possible\n              // (by the time best possible is found, several nodes could be discarded\n              // by being worse than previous discovered not-yet-popped nodes)\n\n              if (!(score >= best.get(key))) {\n                best.set(key, score);\n                q.add(newGrid);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError9 = true;\n          _iteratorError9 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n              _iterator9.return();\n            }\n          } finally {\n            if (_didIteratorError9) {\n              throw _iteratorError9;\n            }\n          }\n        }\n\n        iterations++;\n      } // no solution found\n\n\n      return null;\n    } // TODO: make use of maxIterations or some other limiting function to stop freezing browser\n\n  }, {\n    key: \"solveIDAStar\",\n    value: function solveIDAStar(maxIterations) {\n      var grid = new Grid(this.numRows, this.numCols, this.tiles, this.emptyPos, this.heuristic, 0); // upper bound of total distance for when to stop exploring nodes in given iteration of dfs\n\n      var bound = grid.heuristicValue;\n      var path = [];\n\n      while (true) {\n        var output = this._searchIDAStar(grid, path, 0, bound);\n\n        if (output === true) {\n          return path;\n        } else if (output === Infinity) {\n          return null;\n        } // upper bound of search updated to min total distance explored that was\n        // greater than previous bound\n\n\n        bound = output;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_searchIDAStar\",\n    value: function _searchIDAStar(grid, path, traveledDist, bound) {\n      var totalDist = traveledDist + grid.heuristicValue;\n      if (totalDist > bound) return totalDist;\n      if (grid.isSolved()) return true; // tracks min total distance of all nodes explored\n\n      var minTotalDist = Infinity;\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = grid.getValidMoves()[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var move = _step10.value;\n\n          // reversing previous move never leads to optimal solution\n          if (move !== Grid.getReversedMove(path[path.length - 1])) {\n            var moveRecord = grid.applyMove(move);\n            path.push(move);\n\n            var output = this._searchIDAStar(grid, path, traveledDist + 1, bound);\n\n            if (output === true) return true;\n            if (output < minTotalDist) minTotalDist = output;\n            path.pop();\n            grid.reverseMove(moveRecord);\n          }\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n\n      return minTotalDist;\n    } // TODO: consider moving functions into closure / avoid nesting for slightly better performance\n    // (no re-instantiation on each call to solveStrategically())\n    // general strategy:\n    // # rows & # columns > 3:\n    // - solve all rows but \n\n  }, {\n    key: \"solveStrategically\",\n    value: function solveStrategically() {\n      var grid = new StrategicGrid(this.numRows, this.numCols, this.tiles, this.emptyPos);\n      var moves = [];\n      var _ref2 = [grid.getTileRow(grid.emptyPos), grid.getTileCol(grid.emptyPos)],\n          emptyRow = _ref2[0],\n          emptyCol = _ref2[1]; // WARNING: does NOT update [row, col]\n\n      function move(moveList) {\n        var _iteratorNormalCompletion11 = true;\n        var _didIteratorError11 = false;\n        var _iteratorError11 = undefined;\n\n        try {\n          for (var _iterator11 = moveList[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n            var _move = _step11.value;\n            moves.push(_move);\n            grid.applyMove(_move);\n\n            switch (_move) {\n              case 'l':\n                emptyCol++;\n                break;\n\n              case 'r':\n                emptyCol--;\n                break;\n\n              case 'u':\n                emptyRow++;\n                break;\n\n              case 'd':\n                emptyRow--;\n                break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError11 = true;\n          _iteratorError11 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n              _iterator11.return();\n            }\n          } finally {\n            if (_didIteratorError11) {\n              throw _iteratorError11;\n            }\n          }\n        }\n      } // moves tile into its goal\n      // NOTE: assumes puzzle filled from top or bottom, left to right\n      // WARNING: should NOT be used for filling in columns instead of rows, as assumptions\n      // will often result in invalid moves/bad solutions\n      // should NOT be used for last 2 rows of puzzles as well, as those must be solved\n      // column by column (solving a single row leaves remaining row no room to maneuver)\n\n\n      function moveTile(ind, goalInd) {\n        if (ind === goalInd) return;\n        var _ref3 = [grid.getTileRow(grid.emptyPos), grid.getTileCol(grid.emptyPos)];\n        emptyRow = _ref3[0];\n        emptyCol = _ref3[1];\n        var _ref4 = [grid.getTileRow(ind), grid.getTileCol(ind)],\n            row = _ref4[0],\n            col = _ref4[1];\n        var _ref5 = [grid.getTileRow(goalInd), grid.getTileCol(goalInd)],\n            goalRow = _ref5[0],\n            goalCol = _ref5[1]; // moves empty out of the way of already solved tiles\n        // explanation: if empty is in row with solved tiles, it must be to their right\n        // more specifically, it will be in the goal col of the current tile\n        // if the current tile is to the left of its goal, empty will need\n        // to move left to get to its left, displacing solved tiles\n        // unless it moves down (or a tile moves up into it) first\n\n        if (col < goalCol && emptyRow === goalRow) {\n          emptyRow === grid.rowEnd - 1 ? move('d') : move('u');\n        }\n\n        while (col > goalCol) {\n          // tile needs to move left, so empty tile needs to be moved to left of tile\n          // empty needs to move out the way to get to the left side of the tile\n          if (row === emptyRow && emptyCol > col) {\n            // move empty around tile to avoid moving solved tiles\n            // if filling top, try to move around bottom of tile if possible\n            if (goalRow === grid.rowStart) {\n              row === grid.rowEnd - 1 ? move('d') : move('u');\n            } else if (goalRow === grid.rowEnd - 1) {\n              // if filling bottom, try to move around top of tile if possible\n              row === grid.rowStart ? move('u') : move('d');\n            }\n          } // move empty to col left of tile\n\n\n          while (emptyCol >= col) {\n            move('r');\n          }\n\n          while (emptyCol < col - 1) {\n            move('l');\n          } // move empty to row of tile\n\n\n          while (emptyRow > row) {\n            move('d');\n          }\n\n          while (emptyRow < row) {\n            move('u');\n          } // move tile left\n\n\n          move('l');\n          col--;\n        }\n\n        while (col < goalCol) {\n          // tile needs to move right, so empty tile needs to be moved to right of tile\n          // empty needs to move out the way to get to the right side of the tile\n          if (row === emptyRow && emptyCol < col) {\n            // move empty around tile to avoid moving solved tiles\n            // if filling top, try to move around bottom of tile if possible\n            if (goalRow === grid.rowStart) {\n              row === grid.rowEnd - 1 ? move('d') : move('u');\n            } else if (goalRow === grid.rowEnd - 1) {\n              // if filling bottom, try to move around top of tile if possible\n              row === grid.rowStart ? move('u') : move('d');\n            }\n          } // move empty to right of tile\n\n\n          while (emptyCol <= col) {\n            move('l');\n          }\n\n          while (emptyCol > col + 1) {\n            move('r');\n          } // move empty to row of tile\n\n\n          while (emptyRow > row) {\n            move('d');\n          }\n\n          while (emptyRow < row) {\n            move('u');\n          } // move tile right\n\n\n          move('r');\n          col++;\n        } // tile now in correct column\n\n\n        while (row > goalRow) {\n          // tile needs to move up, so the empty tile needs to be moved to top of tile\n          // can move up normally as long as\n          // - not last tile in row\n          // - tile is more than 2 tiles below goal\n          if (col !== grid.colEnd - 1 || row - 2 > goalRow) {\n            // if row is 1 below goal and empty is to the left or below tile\n            // empty must rotate around the bottom of the tile to get to the top\n            // so as not to displace previously placed tiles\n            if (row - 1 === goalRow && emptyCol <= col && emptyRow >= row) {\n              // move emptyRow below row\n              while (emptyRow <= row) {\n                move('u');\n              } // move emptyCol to right of tile\n\n\n              while (emptyCol <= col) {\n                move('l');\n              }\n            } // NOTE: necessary despite code block above as tile could be against wall\n            // if empty under tile, move to the right if possible\n            // to avoid displacing previously placed tiles\n\n\n            if (emptyRow > row && emptyCol === col) {\n              col === grid.colEnd - 1 ? move('r') : move('l');\n            } // move empty row to just above tile\n\n\n            while (emptyRow >= row) {\n              move('d');\n            }\n\n            while (emptyRow < row - 1) {\n              move('u');\n            } // move empty col to match tile's\n\n\n            while (emptyCol > col) {\n              move('r');\n            }\n\n            while (emptyCol < col) {\n              move('l');\n            } // move tile up\n\n\n            move('u');\n            row--;\n          } // last tile of row must be rotated in along with previous tile in row\n          // because rotating affects tiles on one side of a tile\n          // and at the last column, only the left column's tiles can be used for rotation\n          else {\n              // tile in last col and row - 2 <= goalRow\n              if (row - 1 === goalRow) {\n                // move directly into goal:\n                // if empty in goalRow, must be directly above tile\n                // as previously tiles already solved\n                if (emptyRow === goalRow) {\n                  move('u');\n                  return;\n                } else {\n                  // move tile down one to give room to maneuver previous tile \n                  // above it\n                  // NOTE: empty must be to left and/or below tile\n                  // as tile is in rightmost column and 1 space below the top\n                  // and empty is not above it\n                  // position empty below tile\n                  while (emptyRow <= row) {\n                    move('u');\n                  }\n\n                  while (emptyCol < col) {\n                    move('l');\n                  } // move tile down\n\n\n                  move('d');\n                  row++;\n                }\n              } // tile is in last col and row - 2 === goalRow\n              // move previous tile into current goal\n              // move empty around tile to get up to previous tile\n\n\n              if (emptyRow > row && emptyCol === col) move('r'); // avoid previously solved tiles while going up and around tile\n\n              while (emptyRow > goalRow + 1) {\n                move('d');\n              }\n\n              while (emptyCol < goalCol) {\n                move('l');\n              } // move empty to goal position\n\n\n              while (emptyRow > goalRow) {\n                move('d');\n              } // current state:\n              // tile 2 spaces below goal\n              // previous tiles in their goals\n              // empty tile 1 space right of previous tile (current tile's goal position)\n              // rotate last 2 tiles in row into place\n\n\n              move('rulurddlu');\n              row = goalRow;\n            }\n        }\n\n        while (row < goalRow) {\n          // tile needs to move down, so the empty tile needs to be moved to bottom of tile\n          if (col !== grid.colEnd - 1 || row + 2 < goalRow) {\n            // empty needs to move out of the way to get to the bottom of the tile\n            // as is currently to tile's top/left and needs to move to tile's bottom\n            if (row + 1 === goalRow && emptyCol <= col && emptyRow <= row) {\n              while (emptyRow >= row) {\n                move('d');\n              }\n\n              while (emptyCol <= col) {\n                move('l');\n              }\n            } // move empty around tile if in same column and empty above tile\n            // (different from above, as above only necessary if tile is too\n            // close to goal and not as good a solution when tile is farther away)\n\n\n            if (col === emptyCol && emptyRow < row) {\n              col === grid.colEnd - 1 ? move('r') : move('l');\n            } // move empty to bottom of tile\n\n\n            while (emptyRow <= row) {\n              move('u');\n            }\n\n            while (emptyRow > row + 1) {\n              move('d');\n            } // move empty to col of tile\n\n\n            while (emptyCol > col) {\n              move('r');\n            }\n\n            while (emptyCol < col) {\n              move('l');\n            } // move tile down\n\n\n            move('d');\n            row++;\n          } else {\n            // last tile of bottom row needs to be rotated in along with previous tile,\n            // similar to last tile of top row\n            // tile in correct col and either 1 or 2 spaces above goal\n            if (row + 1 === goalRow) {\n              // move tile directly into place\n              if (emptyRow === goalRow) {\n                move('d');\n                return;\n              } else {\n                // move tile up to give room for previous tile to maneuver\n                while (emptyRow >= row) {\n                  move('d');\n                }\n\n                while (emptyCol < col) {\n                  move('l');\n                }\n\n                move('u');\n                row--;\n              }\n            } // tile is now 2 spaces above goal\n            // move previous tile into current goal\n            // move empty around tile to get up to previous tile\n\n\n            if (emptyRow < row && emptyCol === col) move('r');\n\n            while (emptyRow < goalRow - 1) {\n              move('u');\n            }\n\n            while (emptyCol < goalCol) {\n              move('l');\n            } // move empty to goal position\n\n\n            while (emptyRow < goalRow) {\n              move('u');\n            } // curent state:\n            // tile 2 spaces above goal\n            // previous tiles in goal\n            // empty tile 1 space right of previous tile (current tile's goal position)\n            // rotate last 2 tiles into place\n\n\n            move('rdldruuld');\n            row = goalRow;\n          }\n        }\n      }\n\n      var emptyGoal = grid.tiles[grid.emptyPos]; // solves 1 dimensional puzzles\n\n      if (grid.numRows === 1) {\n        while (grid.emptyPos < emptyGoal) {\n          move('l');\n        }\n\n        while (grid.emptyPos > emptyGoal) {\n          move('r');\n        }\n\n        return moves;\n      } else if (grid.numCols === 1) {\n        while (grid.emptyPos < emptyGoal) {\n          move('u');\n        }\n\n        while (grid.emptyPos > emptyGoal) {\n          move('d');\n        }\n\n        return moves;\n      }\n\n      var emptyGoalRow = grid.getTileRow(emptyGoal);\n      var emptyGoalCol = grid.getTileCol(emptyGoal); // fill each row left to right, top to bottom until empty tile's row reach\n      // or 2 rows remaining\n\n      for (var row = 0; row < Math.min(emptyGoalRow, grid.numRows - 2); row++) {\n        var start = grid.numCols * row;\n\n        for (var goal = start; goal < start + grid.numCols; goal++) {\n          var ind = grid.goals[goal];\n          moveTile(ind, goal);\n        }\n\n        grid.rowStart++;\n      }\n\n      for (var _row3 = grid.numRows - 1; _row3 > emptyGoalRow + 1; _row3--) {\n        var _start = grid.numCols * _row3;\n\n        for (var _goal = _start; _goal < _start + grid.numCols; _goal++) {\n          var _ind = grid.goals[_goal];\n          moveTile(_ind, _goal);\n        }\n\n        grid.rowEnd--;\n      } // remaining unsolved puzzle is now 2xN (where N is arbitrary integer)\n\n\n      console.log(grid.rowStart, grid.rowEnd, grid.colStart, grid.colEnd);\n      console.log(moves);\n      var emptyColGoal = grid.getTileCol(grid.tiles[grid.emptyPos]); // fill in from left to right until empty tile col reached or 2x2 square remaining\n\n      for (var col = 0; col < Math.min(grid.numCols - 2, emptyColGoal); col++) {\n        // goal and current indices of top tile of leftmost column\n        var topGoal = grid.getIndex(grid.rowStart, grid.colStart);\n        var topInd = grid.goals[topGoal]; // move top tile to its goal\n\n        moveTile(topInd, topGoal); // goal and current indices of bottom tile of leftmost column\n\n        var bottomGoal = topGoal + grid.numCols;\n        var bottomInd = grid.goals[bottomGoal];\n\n        if (bottomInd === bottomGoal) {\n          grid.colStart++;\n          continue;\n        } // current coords of tile that belongs on the bottom of the leftmost column\n\n\n        var bottomCol = grid.getTileCol(bottomInd);\n        var bottomRow = grid.getTileRow(bottomInd); // top tile is occupied, so emptyCol must be in bottom left corner\n        // if bottom tile is one away, can move directly into goal\n\n        if (emptyCol === grid.colStart && grid.emptyPos + 1 === bottomInd) {\n          move('l');\n          grid.colStart++;\n          continue;\n        } // Otherwise:\n        // tile needs to be rotated in similarly to top and bottom tiles\n        // cannot use moveTile() as above, as certain assumptions on\n        // fill order no longer hold true\n        // move bottom tile to 2 spaces right of its goal\n        // first move tile into bottom row\n\n\n        while (bottomRow < grid.rowEnd - 1) {\n          // move into bottom row\n          if (emptyRow === grid.rowStart) move('u'); // move below tile\n\n          while (emptyCol > bottomCol) {\n            move('r');\n          }\n\n          while (emptyCol < bottomCol) {\n            move('l');\n          } // move tile into bottom row\n\n\n          move('d');\n          bottomRow++;\n        } // then move tile into correct col\n        // tile is more than 2 spaces right from final goal\n\n\n        while (bottomCol > col + 2) {\n          // move empty around tile to get to its left if necessary\n          if (emptyRow === bottomRow && emptyCol > bottomCol) move('d');\n\n          while (emptyCol >= bottomCol) {\n            move('r');\n          }\n\n          if (emptyRow < bottomRow) move('u');\n\n          while (emptyCol < bottomCol) {\n            move('l');\n          }\n\n          bottomCol--;\n        } // tile is one right of final goal (1 tile left of intermediate goal)\n\n\n        while (bottomCol < col + 2) {\n          // maneuver empty to right of goal\n          if (emptyCol === bottomCol) move('l');\n          if (emptyRow === grid.rowStart) move('u'); // move bottom col one right\n\n          while (emptyCol > bottomCol) {\n            move('r');\n          }\n\n          bottomCol++;\n        } // tile is now 2 spaces right of goal\n        // need to move top tile one down in preparation for rotating 2 tiles in\n        // move around tile to get below top tile if necessary\n\n\n        if (emptyCol > bottomCol && emptyRow === bottomRow) move('d');\n\n        while (emptyCol >= bottomCol) {\n          move('r');\n        }\n\n        if (emptyRow === grid.rowStart) move('u');\n\n        while (emptyCol > grid.colStart) {\n          move('r');\n        } // current state:\n        // empty tile in bottom goal\n        // top tile in top goal\n        // bottom tile 2 tiles right of bottom goal\n        // rotate both tiles into place\n\n\n        move('dluldrrul');\n        grid.colStart++;\n      } // // fill in from right to left until 2x2 square remaining\n\n\n      for (var _col3 = grid.numCols - 1; _col3 > emptyColGoal + 1; _col3--) {\n        // goal and current indices of top tile of leftmost column\n        var _topGoal = grid.getIndex(grid.rowStart, grid.colEnd - 1);\n\n        var _topInd = grid.goals[_topGoal]; // move top tile to its goal\n        // NOTE: can't use moveTile as relies on assumptions like:\n        // tiles to left in goalRow are filled in and can't be modified\n        // modifying moveTile() to work with right-to-left would\n        // make the function more confusing\n\n        var topCol = grid.getTileCol(_topInd);\n        var topRow = grid.getTileRow(_topInd); // move top tile into correct row\n\n        if (topRow > grid.rowStart) {\n          if (emptyRow === grid.rowEnd - 1) move('d');\n\n          while (emptyCol < topCol) {\n            move('l');\n          }\n\n          while (emptyCol > topCol) {\n            move('r');\n          }\n\n          move('u');\n          topRow--;\n        } // move top tile into correct col\n\n\n        while (topCol < grid.colEnd - 1) {\n          // move empty around tile to get to right if necessary\n          if (emptyCol < topCol && emptyRow === topRow) move('u');\n\n          while (emptyCol <= topCol) {\n            move('l');\n          }\n\n          while (emptyCol > topCol + 1) {\n            move('r');\n          }\n\n          if (emptyRow > topRow) move('d');\n          move('r');\n          topCol++;\n        } // goal and current indices of bottom tile of leftmost column\n\n\n        var _bottomGoal = _topGoal + grid.numCols;\n\n        var _bottomInd = grid.goals[_bottomGoal];\n\n        if (_bottomInd === _bottomGoal) {\n          grid.colEnd--;\n          continue;\n        } // current coords of tile that belongs on the bottom of the leftmost column\n\n\n        var _bottomCol = grid.getTileCol(_bottomInd);\n\n        var _bottomRow = grid.getTileRow(_bottomInd); // top tile is occupied, so emptyCol must be in bottom right corner\n        // if bottom tile is one away, can move directly into goal\n\n\n        if (emptyCol === grid.colEnd - 1 && grid.emptyPos - 1 === _bottomInd) {\n          move('r');\n          grid.colEnd--;\n          continue;\n        } // move bottom tile 2 tiles left of goal in preparation of rotating 2 tiles in\n        // first move tile into bottom row\n\n\n        while (_bottomRow < grid.rowEnd - 1) {\n          // move into bottom row\n          if (emptyRow === grid.rowStart) move('u'); // move below tile\n\n          while (emptyCol > _bottomCol) {\n            move('r');\n          }\n\n          while (emptyCol < _bottomCol) {\n            move('l');\n          } // move tile into bottom row\n\n\n          move('d');\n          _bottomRow++;\n        } // then move tile into correct col\n        // tile is more than 2 spaces left from final goal\n\n\n        while (_bottomCol < _col3 - 2) {\n          // move empty around tile to get to its right if necessary\n          if (emptyRow === _bottomRow && emptyCol < _bottomCol) move('d');\n\n          while (emptyCol <= _bottomCol) {\n            move('l');\n          }\n\n          if (emptyRow < _bottomRow) move('u');\n\n          while (emptyCol > _bottomCol) {\n            move('r');\n          }\n\n          _bottomCol++;\n        } // tile is one left of final goal (1 tile right of intermediate goal)\n\n\n        while (_bottomCol > _col3 - 2) {\n          // maneuver empty to right of goal\n          if (emptyCol === _bottomCol) move('r');\n          if (emptyRow === grid.rowStart) move('u'); // move bottom col one right\n\n          while (emptyCol < _bottomCol) {\n            move('l');\n          }\n\n          _bottomCol--;\n        } // tile is now 2 spaces left of goal\n        // need to move top tile one down in preparation for rotating 2 tiles in\n        // move around tile to get below top tile if necessary\n\n\n        if (emptyCol < _bottomCol && emptyRow === _bottomRow) move('d');\n\n        while (emptyCol <= _bottomCol) {\n          move('l');\n        }\n\n        if (emptyRow === grid.rowStart) move('u');\n\n        while (emptyCol < grid.colEnd - 1) {\n          move('l');\n        } // current state:\n        // empty tile in bottom goal\n        // top tile in top goal\n        // bottom tile 2 tiles left of bottom goal\n        // rotate both tiles into place\n\n\n        move('drurdllur');\n        grid.colEnd--;\n      } // solve remaining 2x2 puzzle\n      // Once 2 tiles (including empty) are solved, \n      // remaining 2 must be already solved if puzzle is solvable\n      // NOTE: moveTile is only used for top-left and bottom-left tiles\n      // as fill-order assumptions mean using it for tiles on the right\n      // won't work\n\n\n      var topLeftGoal = grid.getIndex(grid.rowStart, grid.colStart);\n\n      if (topLeftGoal !== emptyGoal) {\n        // solve top-left tile\n        moveTile(grid.goals[topLeftGoal], topLeftGoal); // if empty needs to move left, its goal is bottom-left tile\n\n        if (emptyCol > emptyGoalCol) {\n          if (emptyRow < emptyGoalRow) move('u');\n          move('r');\n        }\n\n        if (emptyCol < emptyGoalCol) move('l');\n        if (emptyRow > emptyGoalRow) move('d');\n        if (emptyRow < emptyGoalRow) move('u');\n      }\n\n      var bottomLeftGoal = topLeftGoal + grid.numCols;\n\n      if (bottomLeftGoal !== emptyGoal) {\n        // solve bottom-left tile\n        moveTile(grid.goals[bottomLeftGoal], bottomLeftGoal); // if empty needs to move left, its goal is top-left tile\n\n        if (emptyCol > emptyGoalCol) {\n          if (emptyRow > emptyGoalRow) move('d');\n          move('r');\n        }\n\n        if (emptyCol < emptyGoalCol) move('l');\n        if (emptyRow > emptyGoalRow) move('d');\n        if (emptyRow < emptyGoalRow) move('u');\n      }\n\n      return moves;\n    }\n  }]);\n\n  return Puzzle;\n}();\n\nvar BaseGrid =\n/*#__PURE__*/\nfunction () {\n  function BaseGrid(numRows, numCols, tiles, emptyPos) {\n    _classCallCheck(this, BaseGrid);\n\n    this.numRows = numRows;\n    this.numCols = numCols;\n    this.tiles = tiles;\n    this.emptyPos = emptyPos;\n  }\n\n  _createClass(BaseGrid, [{\n    key: \"getTileCol\",\n    value: function getTileCol(ind) {\n      return ind % this.numCols;\n    }\n  }, {\n    key: \"getTileRow\",\n    value: function getTileRow(ind) {\n      return Math.floor(ind / this.numCols);\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(row, col) {\n      return row * this.numCols + col;\n    }\n  }, {\n    key: \"swap\",\n    value: function swap(pos1, pos2) {\n      var _ref6 = [this.tiles[pos2], this.tiles[pos1]];\n      this.tiles[pos1] = _ref6[0];\n      this.tiles[pos2] = _ref6[1];\n    } // returns change in index of tile to be moved after move\n\n  }, {\n    key: \"getMoveDelta\",\n    value: function getMoveDelta(move) {\n      var moveDeltaMap = {\n        'r': 1,\n        'l': -1,\n        'u': -this.numCols,\n        'd': this.numCols\n      };\n      return moveDeltaMap[move];\n    } // TODO: consider instead caching movedInd for every move + emptyPos combo O(n)\n    // returns index of tile that would be moved by specified move\n\n  }, {\n    key: \"getMovedInd\",\n    value: function getMovedInd(move) {\n      return this.emptyPos - this.getMoveDelta(move);\n    }\n  }, {\n    key: \"applyMove\",\n    value: function applyMove(move) {\n      var movedInd = this.getMovedInd(move);\n      var endInd = this.emptyPos;\n      this.swap(endInd, movedInd);\n      this.emptyPos = movedInd;\n    }\n  }], [{\n    key: \"getReversedMove\",\n    value: function getReversedMove(move) {\n      return REVERSE_MOVE_MAP[move];\n    }\n  }]);\n\n  return BaseGrid;\n}(); // Grid optimized for strategic solver\n\n\nvar StrategicGrid =\n/*#__PURE__*/\nfunction (_BaseGrid) {\n  _inherits(StrategicGrid, _BaseGrid);\n\n  function StrategicGrid(numRows, numCols, tiles, emptyPos) {\n    var _this;\n\n    _classCallCheck(this, StrategicGrid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StrategicGrid).call(this, numRows, numCols, tiles, emptyPos)); // maps goal index to current index\n    // ex: arr[0] = 2 -> tile with goal index 0 is now at index 2\n\n    _this.goals = tiles.length > 256 ? new Uint16Array(tiles.length) : new Uint8Array(tiles.length);\n\n    _this.tiles.forEach(function (goal, ind) {\n      return _this.goals[goal] = ind;\n    }); // marks bounds of unsolved grid (start inclusive, end exclusive)\n    // NOTE: bounds do NOT affect any tile positions/indices\n    // i.e. indices/rows/cols are the same as if no bounds exist\n\n\n    _this.rowStart = 0;\n    _this.rowEnd = numRows;\n    _this.colStart = 0;\n    _this.colEnd = numCols;\n    _this.colBounds = [0, numCols];\n    return _this;\n  }\n\n  _createClass(StrategicGrid, [{\n    key: \"swap\",\n    value: function swap(pos1, pos2) {\n      // each goal position now corresponds with the opposite tile's swapped position\n      var _ref7 = [pos2, pos1];\n      this.goals[this.tiles[pos1]] = _ref7[0];\n      this.goals[this.tiles[pos2]] = _ref7[1];\n\n      _get(_getPrototypeOf(StrategicGrid.prototype), \"swap\", this).call(this, pos1, pos2);\n    }\n  }]);\n\n  return StrategicGrid;\n}(BaseGrid); // TODO: consider moving validMoves to field of Class instead of instance\n// (indexed under grid dimensions)\n// TODO: consider having both this and graphical grid extend from BaseGrid to reuse move functions\n// pros: cleaner, less redundancy\n// cons: performance hit as called functions now have to move up prototype chain\n// (not a huge problem for strategic solver, but IDA* explores a lot more nodes)\n// Grid optimized for A* and IDA*\n\n\nvar Grid =\n/*#__PURE__*/\nfunction () {\n  function Grid(numRows, numCols, tiles, emptyPos, heuristic, traveledDist) {\n    var heuristicValue = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    var lastMove = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n    var lastGrid = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n    var validMoves = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;\n\n    _classCallCheck(this, Grid);\n\n    this.numRows = numRows;\n    this.numCols = numCols;\n    this.tiles = tiles;\n    this.emptyPos = emptyPos;\n    this.heuristic = heuristic;\n    this.traveledDist = traveledDist;\n    this.heuristicValue = heuristicValue === null ? heuristic.calculate(this) : heuristicValue;\n    this.lastMove = lastMove;\n    this.lastGrid = lastGrid; // TODO: attach to external obj or pass between grids to avoid recomputing every new grid\n    // precomputing values for better performance\n    // IDEA: do all precomputing inside Puzzle() to be referenced by Grid\n    // (passing along takes up memory)\n\n    this.validMoves = validMoves === null ? this._precomputeValidMoves() : validMoves;\n  }\n\n  _createClass(Grid, [{\n    key: \"getTileCol\",\n    value: function getTileCol(ind) {\n      return ind % this.numCols;\n    }\n  }, {\n    key: \"getTileRow\",\n    value: function getTileRow(ind) {\n      return Math.floor(ind / this.numCols);\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(row, col) {\n      return row * this.numCols + col;\n    } // returns change in index of tile to be moved after move\n\n  }, {\n    key: \"getMoveDelta\",\n    value: function getMoveDelta(move) {\n      var moveDeltaMap = {\n        'r': 1,\n        'l': -1,\n        'u': -this.numCols,\n        'd': this.numCols\n      };\n      return moveDeltaMap[move];\n    } // TODO: consider instead caching movedInd for every move + emptyPos combo O(n)\n    // returns index of tile that would be moved by specified move\n\n  }, {\n    key: \"getMovedInd\",\n    value: function getMovedInd(move) {\n      return this.emptyPos - this.getMoveDelta(move);\n    }\n  }, {\n    key: \"getTileDist\",\n    value: function getTileDist(tile1, tile2) {\n      return Math.abs(this.getTileRow(tile1) - this.getTileRow(tile2)) + Math.abs(this.getTileCol(tile1) - this.getTileCol(tile2));\n    }\n  }, {\n    key: \"reconstructPath\",\n    value: function reconstructPath() {\n      var path = [];\n      var curr = this;\n\n      while (curr.lastMove !== null) {\n        path.unshift(curr.lastMove);\n        curr = curr.lastGrid;\n      }\n\n      return path;\n    }\n    /**\n     * returns deep copy of grid ignoring lastGrid (null)\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Grid(this.numRows, this.numCols, this.tiles.slice(), this.emptyPos, this.heuristic, this.traveledDist, this.heuristicValue, this.lastMove, null, this.validMoves);\n    }\n    /**\n     * returns copy of current grid with specified directional move applied to tile moving into empty position\n     * also updates all affected Grid fields in new Grid (emptyPos, heuristic/travel distance, etc.)\n     * @param move direction to move tile into empty space\n     * @return returns copy of current grid with specified move applied to tile into empty position\n     */\n\n  }, {\n    key: \"cloneAndApplyMove\",\n    value: function cloneAndApplyMove(move) {\n      var newGrid = this.clone();\n      newGrid.lastGrid = this;\n      newGrid.lastMove = move;\n      return Grid._applyMoveHelper(move, newGrid);\n    } // Applies move to grid NOT clone on grid\n    // Returns moveRecord object storing old heuristicValue and emptyPos (for use in reverseMove())\n    // (useful for IDA* as memory allocation can be avoided)\n    // NOTE: separate function instead of consolidation with \"clone\" param for slightly better performance\n    // NOTE: does NOT update lastMove or lastGrid\n\n  }, {\n    key: \"applyMove\",\n    value: function applyMove(move) {\n      var oldHeuristicValue = this.heuristicValue;\n      var oldEmptyPos = this.emptyPos;\n\n      Grid._applyMoveHelper(move, this); // TODO; consider changing to typedArray for slightly better performance\n\n\n      return {\n        heuristicValue: oldHeuristicValue,\n        emptyPos: oldEmptyPos\n      };\n    }\n  }, {\n    key: \"reverseMove\",\n    value: function reverseMove(moveRecord) {\n      this.traveledDist--;\n      this.heuristicValue = moveRecord.heuristicValue;\n      this.swap(this.emptyPos, moveRecord.emptyPos);\n      this.emptyPos = moveRecord.emptyPos;\n    } // applies move to specified grid WITHOUT updating lastMove or lastGrid\n\n  }, {\n    key: \"swap\",\n\n    /**\n     * WARNING: Does NOT update heuristicValue, lastMove, emptyPos, or lastGrid\n     * swaps 2 positions in grid.\n     */\n    value: function swap(pos1, pos2) {\n      var _ref8 = [this.tiles[pos2], this.tiles[pos1]];\n      this.tiles[pos1] = _ref8[0];\n      this.tiles[pos2] = _ref8[1];\n    } // precomputes valid moves for each possible emptyPos to give slight performance benefit\n\n  }, {\n    key: \"_precomputeValidMoves\",\n    value: function _precomputeValidMoves() {\n      var moves;\n      var validMoves = [];\n\n      for (var emptyPos = 0; emptyPos < this.tiles.length; emptyPos++) {\n        moves = [];\n        var row = this.getTileRow(emptyPos);\n        var col = this.getTileCol(emptyPos);\n\n        if (row < this.numRows - 1) {\n          moves.push('u');\n        }\n\n        if (row > 0) {\n          moves.push('d');\n        }\n\n        if (col < this.numCols - 1) {\n          moves.push('l');\n        }\n\n        if (col > 0) {\n          moves.push('r');\n        }\n\n        validMoves[emptyPos] = moves;\n      }\n\n      return validMoves;\n    }\n    /**\n     * returns array of valid moves, where 'l' = left, 'r' = right, 'd' = down, and 'u' = up.\n     * @returns {Array} array of valid moves, where moves are defined by tiles moving into the empty space in the grid\n     */\n\n  }, {\n    key: \"getValidMoves\",\n    value: function getValidMoves() {\n      return this.validMoves[this.emptyPos];\n    }\n    /**\n     * Returns whether grid is solved assuming goal is [0, 1, ... tiles.length - 1]\n     * @returns {boolean} whether puzzle is solved\n     */\n\n  }, {\n    key: \"isSolved\",\n    value: function isSolved() {\n      if (this.heuristic.isSolved(this.heuristicValue)) return true; // accounts for if can't determine if puzzle solved using heuristic value\n\n      return this.tiles.every(function (goalInd, ind) {\n        return goalInd === ind;\n      });\n    }\n  }], [{\n    key: \"getReversedMove\",\n    value: function getReversedMove(move) {\n      return REVERSE_MOVE_MAP[move];\n    }\n  }, {\n    key: \"_applyMoveHelper\",\n    value: function _applyMoveHelper(move, grid) {\n      var movedInd = grid.getMovedInd(move);\n      var endInd = grid.emptyPos;\n      grid.swap(endInd, movedInd);\n      grid.emptyPos = movedInd;\n      grid.traveledDist++;\n      grid.heuristicValue = grid.heuristic.update(grid, movedInd, endInd, move);\n      return grid;\n    }\n  }]);\n\n  return Grid;\n}();\n\nfunction testLinearConflictHeuristic() {\n  var testCases = [[[0, 2, 1, 7, 4, 5, 6, 3, 8], 0], [[0, 2, 1, 5, 4, 3, 6, 7, 8], 0], [[4, 3, 6, 8, 0, 7, 5, 2, 1], 4], [[2, 7, 0, 5, 4, 3, 8, 1, 6], 2]];\n  var ans = [8, 12, 22, 24];\n  var _iteratorNormalCompletion12 = true;\n  var _didIteratorError12 = false;\n  var _iteratorError12 = undefined;\n\n  try {\n    for (var _iterator12 = testCases.entries()[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n      var _step12$value = _slicedToArray(_step12.value, 2),\n          ind = _step12$value[0],\n          testCase = _step12$value[1];\n\n      var testGrid = _construct(Grid, [3, 3].concat(_toConsumableArray(testCase), [new LinearConflictHeuristic(3, 3), 0]));\n\n      console.assert(testGrid.heuristicValue === ans[ind], \"incorrect answer: answer = \".concat(testGrid.heuristicValue, \", correct answer = \").concat(ans[ind]));\n    }\n  } catch (err) {\n    _didIteratorError12 = true;\n    _iteratorError12 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n        _iterator12.return();\n      }\n    } finally {\n      if (_didIteratorError12) {\n        throw _iteratorError12;\n      }\n    }\n  }\n} // TODO: remove after done testing\n// testLinearConflictHeuristic();\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Puzzle);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sliding-puzzle-algorithms.js\n");

/***/ })

/******/ });
//# sourceMappingURL=puzzle-solver.worker.js.map