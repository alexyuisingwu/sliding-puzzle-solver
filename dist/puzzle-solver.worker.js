/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./node_modules/babel-loader/lib/index.js?!./src/puzzle-solver.worker.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/babel-loader/lib/index.js?!./src/puzzle-solver.worker.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--5!./src/puzzle-solver.worker.js ***!
  \*****************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sliding_puzzle_algorithms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sliding-puzzle-algorithms */ \"./src/sliding-puzzle-algorithms.js\");\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n\n\nonmessage = function onmessage(e) {\n  var puzzle = _construct(_sliding_puzzle_algorithms__WEBPACK_IMPORTED_MODULE_0__[\"default\"], _toConsumableArray(e.data));\n\n  puzzle.solve().then(function (moves) {\n    return postMessage(moves);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcHV6emxlLXNvbHZlci53b3JrZXIuanM/YTZmZiJdLCJuYW1lcyI6WyJvbm1lc3NhZ2UiLCJlIiwicHV6emxlIiwiUHV6emxlIiwiZGF0YSIsInNvbHZlIiwidGhlbiIsIm1vdmVzIiwicG9zdE1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQUEsU0FBUyxHQUFHLG1CQUFBQyxDQUFDLEVBQUk7QUFDaEIsTUFBSUMsTUFBTSxjQUFPQyxrRUFBUCxxQkFBaUJGLENBQUMsQ0FBQ0csSUFBbkIsRUFBVjs7QUFDQUYsUUFBTSxDQUFDRyxLQUFQLEdBQWVDLElBQWYsQ0FBb0IsVUFBQUMsS0FBSztBQUFBLFdBQUlDLFdBQVcsQ0FBQ0QsS0FBRCxDQUFmO0FBQUEsR0FBekI7QUFDQSxDQUhEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/IS4vc3JjL3B1enpsZS1zb2x2ZXIud29ya2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFB1enpsZSBmcm9tICcuL3NsaWRpbmctcHV6emxlLWFsZ29yaXRobXMnXG5cbm9ubWVzc2FnZSA9IGUgPT4ge1xuXHRsZXQgcHV6emxlID0gbmV3IFB1enpsZSguLi5lLmRhdGEpO1xuXHRwdXp6bGUuc29sdmUoKS50aGVuKG1vdmVzID0+IHBvc3RNZXNzYWdlKG1vdmVzKSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js?!./src/puzzle-solver.worker.js\n");

/***/ }),

/***/ "./node_modules/fastpriorityqueue/FastPriorityQueue.js":
/*!*************************************************************!*\
  !*** ./node_modules/fastpriorityqueue/FastPriorityQueue.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {/**\n * FastPriorityQueue.js : a fast heap-based priority queue  in JavaScript.\n * (c) the authors\n * Licensed under the Apache License, Version 2.0.\n *\n * Speed-optimized heap-based priority queue for modern browsers and JavaScript engines.\n *\n * Usage :\n         Installation (in shell, if you use node):\n         $ npm install fastpriorityqueue\n\n         Running test program (in JavaScript):\n\n         // var FastPriorityQueue = require(\"fastpriorityqueue\");// in node\n         var x = new FastPriorityQueue();\n         x.add(1);\n         x.add(0);\n         x.add(5);\n         x.add(4);\n         x.add(3);\n         x.peek(); // should return 0, leaves x unchanged\n         x.size; // should return 5, leaves x unchanged\n         while(!x.isEmpty()) {\n           console.log(x.poll());\n         } // will print 0 1 3 4 5\n         x.trim(); // (optional) optimizes memory usage\n */\n\n\nvar defaultcomparator = function(a, b) {\n  return a < b;\n};\n\n// the provided comparator function should take a, b and return *true* when a < b\nfunction FastPriorityQueue(comparator) {\n  if (!(this instanceof FastPriorityQueue)) return new FastPriorityQueue(comparator);\n  this.array = [];\n  this.size = 0;\n  this.compare = comparator || defaultcomparator;\n}\n\n// copy the priority queue into another, and return it. Queue items are shallow-copied.\n// Runs in `O(n)` time.\nFastPriorityQueue.prototype.clone = function() {\n  var fpq = new FastPriorityQueue(this.compare);\n  fpq.size = this.size;\n  for (var i = 0; i < this.size; i++) {\n    fpq.array.push(this.array[i]);\n  }\n  return fpq;\n};\n\n// Add an element into the queue\n// runs in O(log n) time\nFastPriorityQueue.prototype.add = function(myval) {\n  var i = this.size;\n  this.array[this.size] = myval;\n  this.size += 1;\n  var p;\n  var ap;\n  while (i > 0) {\n    p = (i - 1) >> 1;\n    ap = this.array[p];\n    if (!this.compare(myval, ap)) {\n      break;\n    }\n    this.array[i] = ap;\n    i = p;\n  }\n  this.array[i] = myval;\n};\n\n// replace the content of the heap by provided array and \"heapify it\"\nFastPriorityQueue.prototype.heapify = function(arr) {\n  this.array = arr;\n  this.size = arr.length;\n  var i;\n  for (i = this.size >> 1; i >= 0; i--) {\n    this._percolateDown(i);\n  }\n};\n\n// for internal use\nFastPriorityQueue.prototype._percolateUp = function(i, force) {\n  var myval = this.array[i];\n  var p;\n  var ap;\n  while (i > 0) {\n    p = (i - 1) >> 1;\n    ap = this.array[p];\n    // force will skip the compare\n    if (!force && !this.compare(myval, ap)) {\n      break;\n    }\n    this.array[i] = ap;\n    i = p;\n  }\n  this.array[i] = myval;\n};\n\n// for internal use\nFastPriorityQueue.prototype._percolateDown = function(i) {\n  var size = this.size;\n  var hsize = this.size >>> 1;\n  var ai = this.array[i];\n  var l;\n  var r;\n  var bestc;\n  while (i < hsize) {\n    l = (i << 1) + 1;\n    r = l + 1;\n    bestc = this.array[l];\n    if (r < size) {\n      if (this.compare(this.array[r], bestc)) {\n        l = r;\n        bestc = this.array[r];\n      }\n    }\n    if (!this.compare(bestc, ai)) {\n      break;\n    }\n    this.array[i] = bestc;\n    i = l;\n  }\n  this.array[i] = ai;\n};\n\n// internal\n// _removeAt(index) will remove the item at the given index from the queue,\n// retaining balance. returns the removed item, or undefined if nothing is removed.\nFastPriorityQueue.prototype._removeAt = function(index) {\n  if (index > this.size - 1 || index < 0) return undefined;\n\n  // impl1:\n  //this.array.splice(index, 1);\n  //this.heapify(this.array);\n  // impl2:\n  this._percolateUp(index, true);\n  return this.poll();\n};\n\n// remove(myval) will remove an item matching the provided value from the\n// queue, checked for equality by using the queue's comparator.\n// return true if removed, false otherwise.\nFastPriorityQueue.prototype.remove = function(myval) {\n  for (var i = 0; i < this.size; i++) {\n    if (!this.compare(this.array[i], myval) && !this.compare(myval, this.array[i])) {\n      // items match, comparator returns false both ways, remove item\n      this._removeAt(i);\n      return true;\n    }\n  }\n  return false;\n};\n\n// internal\n// removes and returns items for which the callback returns true.\nFastPriorityQueue.prototype._batchRemove = function(callback, limit) {\n  // initialize return array with max size of the limit or current queue size\n  var retArr = new Array(limit ? limit : this.size);\n  var count = 0;\n\n  if (typeof callback === 'function' && this.size) {\n    var i = 0;\n    while (i < this.size && count < retArr.length) {\n      if (callback(this.array[i])) {\n        retArr[count] = this._removeAt(i);\n        count++;\n        // move up a level in the heap if we remove an item\n        i = i >> 1;\n      } else {\n        i++;\n      }\n    } \n  }\n  retArr.length = count;\n  return retArr;\n}\n\n// removeOne(callback) will execute the callback function for each item of the queue\n// and will remove the first item for which the callback will return true.\n// return the removed item, or undefined if nothing is removed.\nFastPriorityQueue.prototype.removeOne = function(callback) {\n  var arr = this._batchRemove(callback, 1);\n  return arr.length > 0 ? arr[0] : undefined;\n};\n\n// remove(callback[, limit]) will execute the callback function for each item of\n// the queue and will remove each item for which the callback returns true, up to\n// a max limit of removed items if specified or no limit if unspecified.\n// return an array containing the removed items.\nFastPriorityQueue.prototype.removeMany = function(callback, limit) {\n  return this._batchRemove(callback, limit);\n};\n\n// Look at the top of the queue (one of the smallest elements) without removing it\n// executes in constant time\n//\n// Calling peek on an empty priority queue returns\n// the \"undefined\" value.\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\n//\nFastPriorityQueue.prototype.peek = function() {\n  if (this.size == 0) return undefined;\n  return this.array[0];\n};\n\n// remove the element on top of the heap (one of the smallest elements)\n// runs in logarithmic time\n//\n// If the priority queue is empty, the function returns the\n// \"undefined\" value.\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\n//\n// For long-running and large priority queues, or priority queues\n// storing large objects, you may  want to call the trim function\n// at strategic times to recover allocated memory.\nFastPriorityQueue.prototype.poll = function() {\n  if (this.size == 0) return undefined;\n  var ans = this.array[0];\n  if (this.size > 1) {\n    this.array[0] = this.array[--this.size];\n    this._percolateDown(0);\n  } else {\n    this.size -= 1;\n  }\n  return ans;\n};\n\n// This function adds the provided value to the heap, while removing\n// and returning one of the smallest elements (like poll). The size of the queue\n// thus remains unchanged.\nFastPriorityQueue.prototype.replaceTop = function(myval) {\n  if (this.size == 0) return undefined;\n  var ans = this.array[0];\n  this.array[0] = myval;\n  this._percolateDown(0);\n  return ans;\n};\n\n// recover unused memory (for long-running priority queues)\nFastPriorityQueue.prototype.trim = function() {\n  this.array = this.array.slice(0, this.size);\n};\n\n// Check whether the heap is empty\nFastPriorityQueue.prototype.isEmpty = function() {\n  return this.size === 0;\n};\n\n// iterate over the items in order, pass a callback that receives (item, index) as args.\n// TODO once we transpile, uncomment\n// if (Symbol && Symbol.iterator) {\n//   FastPriorityQueue.prototype[Symbol.iterator] = function*() {\n//     if (this.isEmpty()) return;\n//     var fpq = this.clone();\n//     while (!fpq.isEmpty()) {\n//       yield fpq.poll();\n//     }\n//   };\n// }\nFastPriorityQueue.prototype.forEach = function(callback) {\n  if (this.isEmpty() || typeof callback != 'function') return;\n  var i = 0;\n  var fpq = this.clone();\n  while (!fpq.isEmpty()) {\n    callback(fpq.poll(), i++);\n  }\n};\n\n// return the k 'smallest' elements of the queue\n// runs in O(k log k) time\n// this is the equivalent of repeatedly calling poll, but\n// it has a better computational complexity, which can be\n// important for large data sets.\nFastPriorityQueue.prototype.kSmallest = function(k) {\n  if (this.size == 0) return [];\n  var comparator = this.compare;\n  var arr = this.array\n  var fpq = new FastPriorityQueue(function(a,b){\n   return comparator(arr[a],arr[b]);\n  });\n  k = Math.min(this.size, k);\n  var smallest = new Array(k);\n  var j = 0;\n  fpq.add(0);\n  while (j < k) {\n    var small = fpq.poll();\n    smallest[j++] = this.array[small];\n    var l = (small << 1) + 1;\n    var r = l + 1;\n    if (l < this.size) fpq.add(l);\n    if (r < this.size) fpq.add(r);\n  }\n  return smallest;\n}\n\n// just for illustration purposes\nvar main = function() {\n  // main code\n  var x = new FastPriorityQueue(function(a, b) {\n    return a < b;\n  });\n  x.add(1);\n  x.add(0);\n  x.add(5);\n  x.add(4);\n  x.add(3);\n  while (!x.isEmpty()) {\n    console.log(x.poll());\n  }\n};\n\nif (__webpack_require__.c[__webpack_require__.s] === module) {\n  main();\n}\n\nmodule.exports = FastPriorityQueue;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fastpriorityqueue/FastPriorityQueue.js\n");

/***/ }),

/***/ "./node_modules/iota-array/iota.js":
/*!*****************************************!*\
  !*** ./node_modules/iota-array/iota.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW90YS1hcnJheS9pb3RhLmpzPzIwMzEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQTtBQUNBLGNBQWMsS0FBSztBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9pb3RhLWFycmF5L2lvdGEuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIlxuXG5mdW5jdGlvbiBpb3RhKG4pIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShuKVxuICBmb3IodmFyIGk9MDsgaTxuOyArK2kpIHtcbiAgICByZXN1bHRbaV0gPSBpXG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlvdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/iota-array/iota.js\n");

/***/ }),

/***/ "./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzPzA0NGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/is-buffer/index.js\n");

/***/ }),

/***/ "./node_modules/ndarray/ndarray.js":
/*!*****************************************!*\
  !*** ./node_modules/ndarray/ndarray.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var iota = __webpack_require__(/*! iota-array */ \"./node_modules/iota-array/iota.js\")\nvar isBuffer = __webpack_require__(/*! is-buffer */ \"./node_modules/is-buffer/index.js\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ndarray/ndarray.js\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime-module.js":
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLW1vZHVsZS5qcz9iYmRkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLGdFQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUtbW9kdWxlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vLyBUaGlzIG1ldGhvZCBvZiBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgbmVlZHMgdG8gYmVcbi8vIGtlcHQgaWRlbnRpY2FsIHRvIHRoZSB3YXkgaXQgaXMgb2J0YWluZWQgaW4gcnVudGltZS5qc1xudmFyIGcgPSAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzIHx8ICh0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBzZWxmKTtcbn0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuXG4vLyBVc2UgYGdldE93blByb3BlcnR5TmFtZXNgIGJlY2F1c2Ugbm90IGFsbCBicm93c2VycyBzdXBwb3J0IGNhbGxpbmdcbi8vIGBoYXNPd25Qcm9wZXJ0eWAgb24gdGhlIGdsb2JhbCBgc2VsZmAgb2JqZWN0IGluIGEgd29ya2VyLiBTZWUgIzE4My5cbnZhciBoYWRSdW50aW1lID0gZy5yZWdlbmVyYXRvclJ1bnRpbWUgJiZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZykuaW5kZXhPZihcInJlZ2VuZXJhdG9yUnVudGltZVwiKSA+PSAwO1xuXG4vLyBTYXZlIHRoZSBvbGQgcmVnZW5lcmF0b3JSdW50aW1lIGluIGNhc2UgaXQgbmVlZHMgdG8gYmUgcmVzdG9yZWQgbGF0ZXIuXG52YXIgb2xkUnVudGltZSA9IGhhZFJ1bnRpbWUgJiYgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG5cbi8vIEZvcmNlIHJlZXZhbHV0YXRpb24gb2YgcnVudGltZS5qcy5cbmcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5cbmlmIChoYWRSdW50aW1lKSB7XG4gIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIHJ1bnRpbWUuXG4gIGcucmVnZW5lcmF0b3JSdW50aW1lID0gb2xkUnVudGltZTtcbn0gZWxzZSB7XG4gIC8vIFJlbW92ZSB0aGUgZ2xvYmFsIHByb3BlcnR5IGFkZGVkIGJ5IHJ1bnRpbWUuanMuXG4gIHRyeSB7XG4gICAgZGVsZXRlIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuICB9IGNhdGNoKGUpIHtcbiAgICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime-module.js\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./src/math-utils.js":
/*!***************************!*\
  !*** ./src/math-utils.js ***!
  \***************************/
/*! exports provided: range, permutationGenerator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"range\", function() { return range; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"permutationGenerator\", function() { return permutationGenerator; });\n/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime-module.js\");\n/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0__);\nvar _marked =\n/*#__PURE__*/\nregenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(range),\n    _marked2 =\n/*#__PURE__*/\nregenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(permutationGenerator);\n\n // returns generator over values in range\n// supports range(start, end[, step]) and range(end)\n// (start inclusive, end exclusive)\n// start = 0 by default\n// step = 1 by default\n\nfunction range() {\n  var start,\n      end,\n      step,\n      _len,\n      args,\n      _key,\n      i,\n      _i,\n      _args = arguments;\n\n  return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function range$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = _args[_key];\n          }\n\n          if (args.length === 1) {\n            start = 0;\n            end = args[0];\n            step = 1;\n          } else if (args.length === 2) {\n            start = args[0];\n            end = args[1];\n            step = 1;\n          } else if (args.length === 3) {\n            start = args[0];\n            end = args[1];\n            step = args[2];\n          }\n\n          if (!(end > start)) {\n            _context.next = 14;\n            break;\n          }\n\n          if (!(step < 0)) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new Error(\"Step must bring start closer to end\");\n\n        case 5:\n          i = start;\n\n        case 6:\n          if (!(i < end)) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 9;\n          return i;\n\n        case 9:\n          i += step;\n          _context.next = 6;\n          break;\n\n        case 12:\n          _context.next = 23;\n          break;\n\n        case 14:\n          if (!(step > 0)) {\n            _context.next = 16;\n            break;\n          }\n\n          throw new Error(\"Step must bring start closer to end\");\n\n        case 16:\n          _i = start;\n\n        case 17:\n          if (!(_i > end)) {\n            _context.next = 23;\n            break;\n          }\n\n          _context.next = 20;\n          return _i;\n\n        case 20:\n          _i += step;\n          _context.next = 17;\n          break;\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n} // returns Generator over all permutations of values in arr with length r\n// adapted from python's itertools.permutations\n\n\nfunction permutationGenerator(arr) {\n  var r,\n      pool,\n      n,\n      inds,\n      cycles,\n      output,\n      i,\n      yielded,\n      _i2,\n      temp,\n      j,\n      swapInd,\n      _ref,\n      k,\n      _args2 = arguments;\n\n  return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function permutationGenerator$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          r = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : arr.length;\n          pool = arr;\n          n = arr.length;\n          inds = Uint8Array.from(range(n));\n          cycles = Uint8Array.from(range(n, n - r, -1));\n          output = new Uint8Array(r);\n\n          for (i = 0; i < r; i++) {\n            output[i] = pool[inds[i]];\n          }\n\n          _context2.next = 9;\n          return output;\n\n        case 9:\n          yielded = true;\n\n        case 10:\n          if (!yielded) {\n            _context2.next = 37;\n            break;\n          }\n\n          yielded = false;\n          _i2 = r - 1;\n\n        case 13:\n          if (!(_i2 >= 0)) {\n            _context2.next = 35;\n            break;\n          }\n\n          cycles[_i2]--;\n\n          if (!(cycles[_i2] === 0)) {\n            _context2.next = 22;\n            break;\n          }\n\n          // moves inds[i] to end, push other inds left to fill space\n          temp = inds[_i2];\n          inds.copyWithin(_i2, _i2 + 1);\n          inds[inds.length - 1] = temp;\n          cycles[_i2] = n - _i2;\n          _context2.next = 32;\n          break;\n\n        case 22:\n          j = cycles[_i2];\n          swapInd = j === 0 ? 0 : inds.length - j;\n          _ref = [inds[swapInd], inds[_i2]];\n          inds[_i2] = _ref[0];\n          inds[swapInd] = _ref[1];\n\n          for (k = 0; k < r; k++) {\n            output[k] = pool[inds[k]];\n          }\n\n          _context2.next = 30;\n          return output;\n\n        case 30:\n          yielded = true;\n          return _context2.abrupt(\"break\", 35);\n\n        case 32:\n          _i2--;\n          _context2.next = 13;\n          break;\n\n        case 35:\n          _context2.next = 10;\n          break;\n\n        case 37:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWF0aC11dGlscy5qcz83YmVhIl0sIm5hbWVzIjpbInJhbmdlIiwicGVybXV0YXRpb25HZW5lcmF0b3IiLCJhcmdzIiwibGVuZ3RoIiwic3RhcnQiLCJlbmQiLCJzdGVwIiwiRXJyb3IiLCJpIiwiYXJyIiwiciIsInBvb2wiLCJuIiwiaW5kcyIsIlVpbnQ4QXJyYXkiLCJmcm9tIiwiY3ljbGVzIiwib3V0cHV0IiwieWllbGRlZCIsInRlbXAiLCJjb3B5V2l0aGluIiwiaiIsInN3YXBJbmQiLCJrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O2dFQU9VQSxLOzs7Z0VBNEJBQyxvQjs7Q0FqQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFVRCxLQUFWO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsb0NBQW1CRSxJQUFuQjtBQUFtQkEsZ0JBQW5CO0FBQUE7O0FBRUksY0FBSUEsSUFBSSxDQUFDQyxNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ25CQyxpQkFBSyxHQUFHLENBQVI7QUFDQUMsZUFBRyxHQUFHSCxJQUFJLENBQUMsQ0FBRCxDQUFWO0FBQ0FJLGdCQUFJLEdBQUcsQ0FBUDtBQUNILFdBSkQsTUFJTyxJQUFJSixJQUFJLENBQUNDLE1BQUwsS0FBZ0IsQ0FBcEIsRUFBdUI7QUFDekJDLGlCQUR5QixHQUNYRixJQURXO0FBQ2xCRyxlQURrQixHQUNYSCxJQURXO0FBRTFCSSxnQkFBSSxHQUFHLENBQVA7QUFDSCxXQUhNLE1BR0EsSUFBSUosSUFBSSxDQUFDQyxNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ3pCQyxpQkFEeUIsR0FDTEYsSUFESztBQUNsQkcsZUFEa0IsR0FDTEgsSUFESztBQUNiSSxnQkFEYSxHQUNMSixJQURLO0FBRTdCOztBQVhMLGdCQWFRRyxHQUFHLEdBQUdELEtBYmQ7QUFBQTtBQUFBO0FBQUE7O0FBQUEsZ0JBY1lFLElBQUksR0FBRyxDQWRuQjtBQUFBO0FBQUE7QUFBQTs7QUFBQSxnQkFla0IsSUFBSUMsS0FBSix1Q0FmbEI7O0FBQUE7QUFpQmlCQyxXQWpCakIsR0FpQnFCSixLQWpCckI7O0FBQUE7QUFBQSxnQkFpQjRCSSxDQUFDLEdBQUdILEdBakJoQztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQWlCZ0QsaUJBQU1HLENBQU47O0FBakJoRDtBQWlCcUNBLFdBQUMsSUFBSUYsSUFqQjFDO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQSxnQkFtQllBLElBQUksR0FBRyxDQW5CbkI7QUFBQTtBQUFBO0FBQUE7O0FBQUEsZ0JBb0JrQixJQUFJQyxLQUFKLHVDQXBCbEI7O0FBQUE7QUFzQmlCQyxZQXRCakIsR0FzQnFCSixLQXRCckI7O0FBQUE7QUFBQSxnQkFzQjRCSSxFQUFDLEdBQUdILEdBdEJoQztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQXNCZ0QsaUJBQU1HLEVBQU47O0FBdEJoRDtBQXNCcUNBLFlBQUMsSUFBSUYsSUF0QjFDO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDLENBMEJBO0FBQ0E7OztBQUNBLFNBQVVMLG9CQUFWLENBQStCUSxHQUEvQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFvQ0MsV0FBcEMsOERBQXNDRCxHQUFHLENBQUNOLE1BQTFDO0FBQ1FRLGNBRFIsR0FDZUYsR0FEZjtBQUVRRyxXQUZSLEdBRVlILEdBQUcsQ0FBQ04sTUFGaEI7QUFJUVUsY0FKUixHQUllQyxVQUFVLENBQUNDLElBQVgsQ0FBZ0JmLEtBQUssQ0FBQ1ksQ0FBRCxDQUFyQixDQUpmO0FBS1FJLGdCQUxSLEdBS2lCRixVQUFVLENBQUNDLElBQVgsQ0FBZ0JmLEtBQUssQ0FBQ1ksQ0FBRCxFQUFJQSxDQUFDLEdBQUdGLENBQVIsRUFBVyxDQUFDLENBQVosQ0FBckIsQ0FMakI7QUFPUU8sZ0JBUFIsR0FPaUIsSUFBSUgsVUFBSixDQUFlSixDQUFmLENBUGpCOztBQVFJLGVBQVNGLENBQVQsR0FBYSxDQUFiLEVBQWdCQSxDQUFDLEdBQUdFLENBQXBCLEVBQXVCRixDQUFDLEVBQXhCO0FBQTRCUyxrQkFBTSxDQUFDVCxDQUFELENBQU4sR0FBWUcsSUFBSSxDQUFDRSxJQUFJLENBQUNMLENBQUQsQ0FBTCxDQUFoQjtBQUE1Qjs7QUFSSjtBQVNJLGlCQUFNUyxNQUFOOztBQVRKO0FBV1FDLGlCQVhSLEdBV2tCLElBWGxCOztBQUFBO0FBQUEsZUFhV0EsT0FiWDtBQUFBO0FBQUE7QUFBQTs7QUFjUUEsaUJBQU8sR0FBRyxLQUFWO0FBQ1NWLGFBZmpCLEdBZXFCRSxDQUFDLEdBQUcsQ0FmekI7O0FBQUE7QUFBQSxnQkFlNEJGLEdBQUMsSUFBRyxDQWZoQztBQUFBO0FBQUE7QUFBQTs7QUFnQllRLGdCQUFNLENBQUNSLEdBQUQsQ0FBTjs7QUFoQlosZ0JBaUJnQlEsTUFBTSxDQUFDUixHQUFELENBQU4sS0FBYyxDQWpCOUI7QUFBQTtBQUFBO0FBQUE7O0FBa0JnQjtBQUNJVyxjQW5CcEIsR0FtQjJCTixJQUFJLENBQUNMLEdBQUQsQ0FuQi9CO0FBb0JnQkssY0FBSSxDQUFDTyxVQUFMLENBQWdCWixHQUFoQixFQUFtQkEsR0FBQyxHQUFHLENBQXZCO0FBQ0FLLGNBQUksQ0FBQ0EsSUFBSSxDQUFDVixNQUFMLEdBQWMsQ0FBZixDQUFKLEdBQXdCZ0IsSUFBeEI7QUFFQUgsZ0JBQU0sQ0FBQ1IsR0FBRCxDQUFOLEdBQVlJLENBQUMsR0FBR0osR0FBaEI7QUF2QmhCO0FBQUE7O0FBQUE7QUF5Qm9CYSxXQXpCcEIsR0F5QndCTCxNQUFNLENBQUNSLEdBQUQsQ0F6QjlCO0FBMEJvQmMsaUJBMUJwQixHQTBCOEJELENBQUMsS0FBSyxDQUFOLEdBQVUsQ0FBVixHQUFjUixJQUFJLENBQUNWLE1BQUwsR0FBY2tCLENBMUIxRDtBQUFBLGlCQTJCMkMsQ0FBQ1IsSUFBSSxDQUFDUyxPQUFELENBQUwsRUFBZ0JULElBQUksQ0FBQ0wsR0FBRCxDQUFwQixDQTNCM0M7QUEyQmlCSyxjQUFJLENBQUNMLEdBQUQsQ0EzQnJCO0FBMkIwQkssY0FBSSxDQUFDUyxPQUFELENBM0I5Qjs7QUE2QmdCLGVBQVNDLENBQVQsR0FBYSxDQUFiLEVBQWdCQSxDQUFDLEdBQUdiLENBQXBCLEVBQXVCYSxDQUFDLEVBQXhCO0FBQTRCTixrQkFBTSxDQUFDTSxDQUFELENBQU4sR0FBWVosSUFBSSxDQUFDRSxJQUFJLENBQUNVLENBQUQsQ0FBTCxDQUFoQjtBQUE1Qjs7QUE3QmhCO0FBOEJnQixpQkFBTU4sTUFBTjs7QUE5QmhCO0FBZ0NnQkMsaUJBQU8sR0FBRyxJQUFWO0FBaENoQjs7QUFBQTtBQWVtQ1YsYUFBQyxFQWZwQztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6Ii4vc3JjL21hdGgtdXRpbHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUnXG5cbi8vIHJldHVybnMgZ2VuZXJhdG9yIG92ZXIgdmFsdWVzIGluIHJhbmdlXG4vLyBzdXBwb3J0cyByYW5nZShzdGFydCwgZW5kWywgc3RlcF0pIGFuZCByYW5nZShlbmQpXG4vLyAoc3RhcnQgaW5jbHVzaXZlLCBlbmQgZXhjbHVzaXZlKVxuLy8gc3RhcnQgPSAwIGJ5IGRlZmF1bHRcbi8vIHN0ZXAgPSAxIGJ5IGRlZmF1bHRcbmZ1bmN0aW9uKiByYW5nZSguLi5hcmdzKSB7XG4gICAgbGV0IHN0YXJ0LCBlbmQsIHN0ZXA7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gYXJnc1swXTtcbiAgICAgICAgc3RlcCA9IDE7XG4gICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBbc3RhcnQsIGVuZF0gPSBhcmdzO1xuICAgICAgICBzdGVwID0gMTtcbiAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgICAgIFtzdGFydCwgZW5kLCBzdGVwXSA9IGFyZ3M7XG4gICAgfVxuXG4gICAgaWYgKGVuZCA+IHN0YXJ0KSB7XG4gICAgICAgIGlmIChzdGVwIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGVwIG11c3QgYnJpbmcgc3RhcnQgY2xvc2VyIHRvIGVuZGApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBzdGVwKSB5aWVsZCBpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGVwIG11c3QgYnJpbmcgc3RhcnQgY2xvc2VyIHRvIGVuZGApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA+IGVuZDsgaSArPSBzdGVwKSB5aWVsZCBpO1xuICAgIH1cbn1cblxuLy8gcmV0dXJucyBHZW5lcmF0b3Igb3ZlciBhbGwgcGVybXV0YXRpb25zIG9mIHZhbHVlcyBpbiBhcnIgd2l0aCBsZW5ndGggclxuLy8gYWRhcHRlZCBmcm9tIHB5dGhvbidzIGl0ZXJ0b29scy5wZXJtdXRhdGlvbnNcbmZ1bmN0aW9uKiBwZXJtdXRhdGlvbkdlbmVyYXRvcihhcnIsIHI9YXJyLmxlbmd0aCkge1xuICAgIGxldCBwb29sID0gYXJyO1xuICAgIGxldCBuID0gYXJyLmxlbmd0aDtcblxuICAgIGxldCBpbmRzID0gVWludDhBcnJheS5mcm9tKHJhbmdlKG4pKTtcbiAgICBsZXQgY3ljbGVzID0gVWludDhBcnJheS5mcm9tKHJhbmdlKG4sIG4gLSByLCAtMSkpO1xuXG4gICAgbGV0IG91dHB1dCA9IG5ldyBVaW50OEFycmF5KHIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcjsgaSsrKSBvdXRwdXRbaV0gPSBwb29sW2luZHNbaV1dO1xuICAgIHlpZWxkIG91dHB1dDtcblxuICAgIGxldCB5aWVsZGVkID0gdHJ1ZTtcblxuICAgIHdoaWxlICh5aWVsZGVkKSB7XG4gICAgICAgIHlpZWxkZWQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHIgLSAxOyBpID49MDsgaS0tKSB7XG4gICAgICAgICAgICBjeWNsZXNbaV0tLTtcbiAgICAgICAgICAgIGlmIChjeWNsZXNbaV0gPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBtb3ZlcyBpbmRzW2ldIHRvIGVuZCwgcHVzaCBvdGhlciBpbmRzIGxlZnQgdG8gZmlsbCBzcGFjZVxuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gaW5kc1tpXTtcbiAgICAgICAgICAgICAgICBpbmRzLmNvcHlXaXRoaW4oaSwgaSArIDEpO1xuICAgICAgICAgICAgICAgIGluZHNbaW5kcy5sZW5ndGggLSAxXSA9IHRlbXA7XG5cbiAgICAgICAgICAgICAgICBjeWNsZXNbaV0gPSBuIC0gaTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGogPSBjeWNsZXNbaV07XG4gICAgICAgICAgICAgICAgbGV0IHN3YXBJbmQgPSBqID09PSAwID8gMCA6IGluZHMubGVuZ3RoIC0gajtcbiAgICAgICAgICAgICAgICBbaW5kc1tpXSwgaW5kc1tzd2FwSW5kXV0gPSBbaW5kc1tzd2FwSW5kXSwgaW5kc1tpXV07XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHI7IGsrKykgb3V0cHV0W2tdID0gcG9vbFtpbmRzW2tdXTtcbiAgICAgICAgICAgICAgICB5aWVsZCBvdXRwdXQ7XG5cbiAgICAgICAgICAgICAgICB5aWVsZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHtyYW5nZSwgcGVybXV0YXRpb25HZW5lcmF0b3J9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/math-utils.js\n");

/***/ }),

/***/ "./src/sliding-puzzle-algorithms.js":
/*!******************************************!*\
  !*** ./src/sliding-puzzle-algorithms.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var fastpriorityqueue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fastpriorityqueue */ \"./node_modules/fastpriorityqueue/FastPriorityQueue.js\");\n/* harmony import */ var fastpriorityqueue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fastpriorityqueue__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ndarray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ndarray */ \"./node_modules/ndarray/ndarray.js\");\n/* harmony import */ var ndarray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ndarray__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _math_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math-utils */ \"./src/math-utils.js\");\n/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime-module.js\");\n/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime__WEBPACK_IMPORTED_MODULE_3__);\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// Operator pre-computation, in-place modification of grid state for ida* based on\n// \"Implementing Fast Heuristic Search Code\"\n// by Ethan Burns and Matthew Hatem and Michael J. Leighton and Wheeler Ruml\n// Linear conflict heuristic based on\n// \"Criticizing Solutions to Relaxed Models Yields Powerful Admissible Heuristics\"\n// by Othar Hansson and Andrew Mayer\n// TODO: consider implementing in web assembly for better speed\n// TODO: consider using closure compiler for smaller bundles and faster runtime\n// TODO: write function to time performance of different alg+heuristic combos\n// TODO: fix freeze when solving some 5x4 puzzles (and presumably those larger than that) using A*\n// iteration limit should work, but not working and/or iterations taking substantially more memory + longer\n\n\n\n\nvar REVERSE_MOVE_MAP = {\n  'r': 'l',\n  'l': 'r',\n  'd': 'u',\n  'u': 'd' // TODO: if using pattern database, consider encoding pattern numbers into bytes and storing in int\n  // probably use 6-6-3 pattern database for 4x4 puzzles (while not fastest, takes up moderate amount of memory)\n  // store db as binary file, read relevant db into memory at start and query from there\n  // NOTE: pattern database may be unfeasible/require too much download/storage space in memory\n  // See Korf and Felner's \"Disjoint pattern database heuristics\" for details\n  // NOTE: storing minimum heuristic value over all possible blank positions results\n  // in an INCONSISTENT heuristic (see \"Inconsistent Hueristics\" by Zahavi et. al and\n  // 1.6-Bit Pattern Databases\" by Breyer and Korf)\n  // Tentative pdb implementation:\n  // each relevant puzzle dimension combo will have a folder (e.g. 4x4, 2x6, etc.)\n  // each puzzle folder will have 1 or more pdbs\n  // each pdb will be stored in a folder with partition split (e.g. 6-6-3)\n  // each folder will have 1 file per partition, with name indicating tiles in partition\n  // each file will map current position of tile in puzzle to heuristic value\n  // If iterating through files in folder without knowing file names impossible for frontend javascript,\n  // add informational file with set name to folder(s)\n  // problem: seems very inefficient, especially when numbers are non-contiguous and don't start from 1\n  // solution: map permutations to lexicographic ordering index of permutations \n  //     cons: more complicated to find index, probably not worth it due to performance concerns\n  // other solution: hashMap\n  // cons: performance bad (javascript hashing relies on conversion to string)\n  // NOTE: methods not static to support using cached MD data specific to puzzle\n  // grid not part of constructor as single heuristic passed between all grids in a given Puzzle\n\n};\n\nvar ManhattanHeuristic =\n/*#__PURE__*/\nfunction () {\n  function ManhattanHeuristic(grid) {\n    _classCallCheck(this, ManhattanHeuristic);\n\n    this.numRows = grid.numRows;\n    this.numCols = grid.numCols;\n    this.numTiles = grid.numRows * grid.numCols; // TODO: consider changing moves to constants or enums\n\n    this.moveNumberMap = {\n      'l': 0,\n      'r': 1,\n      'u': 2,\n      'd': 3\n    };\n  }\n\n  _createClass(ManhattanHeuristic, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_runtime__WEBPACK_IMPORTED_MODULE_3___default.a.mark(function _callee() {\n        return regenerator_runtime__WEBPACK_IMPORTED_MODULE_3___default.a.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._precompute();\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n\n      return initialize;\n    }() // TODO: change so precompute called once for all puzzles of same size\n    // since no matter what user settings are called, all possible inds and goalInds accounted for\n    // store as class property, and change heuristics back to static\n    // returns whether precomputation could be completed\n\n  }, {\n    key: \"_precompute\",\n    value: function _precompute() {\n      // stop precomputing when numTiles > 100 (50,000 array entries in cache)\n      if (this.numTiles > 100) {\n        return false;\n      } // _md.get(i, j) = md value at ind = i, goalInd = j\n\n\n      this._md = ndarray__WEBPACK_IMPORTED_MODULE_1___default()(new Uint16Array(Math.pow(this.numTiles, 2)), [this.numTiles, this.numTiles]); // _mdDelta.get(i, j, k) = change in MD when ind = i, goalInd = j, and move = k\n      // where move = 0 -> 'l', 1 -> 'r', 2 -> 'u' 3 -> 'd'\n\n      this._mdDelta = ndarray__WEBPACK_IMPORTED_MODULE_1___default()(new Int8Array(4 * Math.pow(this.numTiles, 2)), [this.numTiles, this.numTiles, 4]); // l, r, u, d\n\n      var moveDeltaMap = Int16Array.from([-1, 1, -this.numCols, this.numCols]);\n      var ind, goalInd;\n      ind = 0;\n\n      for (var row1 = 0; row1 < this.numRows; row1++) {\n        for (var col1 = 0; col1 < this.numCols; col1++) {\n          goalInd = 0;\n\n          for (var row2 = 0; row2 < this.numRows; row2++) {\n            for (var col2 = 0; col2 < this.numCols; col2++) {\n              this._md.set(ind, goalInd, Math.abs(row2 - row1) + Math.abs(col2 - col1));\n\n              goalInd++;\n            }\n          }\n\n          ind++;\n        }\n      }\n\n      ind = 0;\n\n      for (var _row = 0; _row < this.numRows; _row++) {\n        for (var _col = 0; _col < this.numCols; _col++) {\n          goalInd = 0;\n\n          for (var _row2 = 0; _row2 < this.numRows; _row2++) {\n            for (var _col2 = 0; _col2 < this.numCols; _col2++) {\n              var startMD = this._md.get(ind, goalInd); // l, r, u, d\n\n\n              for (var move = 0; move < 4; move++) {\n                var endMD = this._md.get(ind + moveDeltaMap[move], goalInd);\n\n                this._mdDelta.set(ind, goalInd, move, endMD - startMD);\n              }\n\n              goalInd++;\n            }\n          }\n\n          ind++;\n        }\n      }\n\n      return true;\n    } // returns heuristic distance from goal\n\n  }, {\n    key: \"calculate\",\n    value: function calculate(grid) {\n      var dist = 0;\n\n      for (var i = 0; i < grid.tiles.length; i++) {\n        if (i !== grid.emptyPos) {\n          if (this._md) {\n            dist += this._md.get(i, grid.tiles[i]);\n          } else {\n            dist += grid.getTileDist(i, grid.tiles[i]);\n          }\n        }\n      }\n\n      return dist;\n    } // TODO: consider refactoring to just use \"grid\" to prevent confusion\n    // Returns updated heuristic distance from goal after move\n    // newGrid = Grid after move (distinct object), with all properties updated besides heuristicValue\n    // startInd = ind moved tile started in\n    // endInd = ind moved tile ended up in\n    // move = single-letter move within 'l/r/u/d'\n    // NOTE: assumes newGrid's heuristic value is same as old grid (not yet updated)\n\n  }, {\n    key: \"update\",\n    value: function update(newGrid, startInd, endInd, move) {\n      return this.getUpdateDelta(newGrid, startInd, endInd, move) + newGrid.heuristicValue;\n    } // only here for compatability reasons (useful in PDB)\n\n  }, {\n    key: \"reverseUpdate\",\n    value: function reverseUpdate() {} // returns change in heuristic distance from move\n    // newGrid = Grid after move (distinct object), with all properties updated besides heuristicValue\n    // startInd = ind moved tile started in\n    // endInd = ind moved tile ended up in\n    // move = single-letter move within 'l/r/u/d'\n\n  }, {\n    key: \"getUpdateDelta\",\n    value: function getUpdateDelta(newGrid, startInd, endInd, move) {\n      if (this._mdDelta) {\n        // get(movedInd, goalInd, move)\n        // (goalInd is value of tile at endInd, as newGrid's endInd is oldGrid's startInd)\n        return this._mdDelta.get(startInd, newGrid.tiles[endInd], this.moveNumberMap[move]);\n      }\n\n      var goalInd = newGrid.tiles[endInd],\n          goalRow = newGrid.getTileRow(goalInd),\n          goalCol = newGrid.getTileCol(goalInd);\n      var startRow = newGrid.getTileRow(startInd),\n          startCol = newGrid.getTileCol(startInd);\n      var endRow = newGrid.getTileRow(endInd),\n          endCol = newGrid.getTileCol(endInd);\n      return Math.abs(goalRow - endRow) + Math.abs(goalCol - endCol) - Math.abs(goalRow - startRow) + Math.abs(goalCol - startCol);\n    } // returns whether heuristic value indicates if puzzle is solved\n\n  }, {\n    key: \"isSolved\",\n    value: function isSolved(heuristicValue) {\n      return heuristicValue === 0;\n    }\n  }]);\n\n  return ManhattanHeuristic;\n}(); // NOTE: methods not static to support using cached MD data specific to puzzle\n\n\nvar LinearConflictHeuristic =\n/*#__PURE__*/\nfunction (_ManhattanHeuristic) {\n  _inherits(LinearConflictHeuristic, _ManhattanHeuristic);\n\n  function LinearConflictHeuristic(grid) {\n    _classCallCheck(this, LinearConflictHeuristic);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LinearConflictHeuristic).call(this, grid));\n  } // returns whether precomputation could be completed\n\n\n  _createClass(LinearConflictHeuristic, [{\n    key: \"_precompute\",\n    value: function _precompute() {\n      _get(_getPrototypeOf(LinearConflictHeuristic.prototype), \"_precompute\", this).call(this);\n\n      var n = Math.max(this.numRows, this.numCols); // avoid precomputation when n > 8 or puzzle is 1D (can just use MD)\n      // 9 has 986,409 perms\n      // 8 has 19,173,960 spaces (each > 1 byte given Uint8Array and overhead)\n      // while precomputing still feasible for n = 9, no point as > 1D puzzles not\n      // optimally solvable at that point for current solvers here\n      // ndarray also becomes too large when n = 10 (throws error)\n\n      if (n > 8 || this.numRows === 1 || this.numCols === 1) {\n        return false;\n      } // maps size of orderings of tiles in their goal row/col to an ndarray\n      // mapping the orderings themselves to the linear conflict heuristic value\n      // NOTE: ndarray used instead of map, as constant toString() computationally costlier\n      // than indexing into ndarray\n      // cons: much larger space consumption (sum of n^k from k = 1 to n)\n      // consumes 19,173,960 spaces (each > 1 byte given Uint8Array and overhead) when n = 8\n\n\n      this._lc = [null];\n\n      for (var permSize = 1; permSize <= n; permSize++) {\n        this._lc.push(ndarray__WEBPACK_IMPORTED_MODULE_1___default()(new Uint8Array(Math.pow(n, permSize)), new Uint8Array(permSize).fill(n)));\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._permutationHelper(n)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _this$_lc$perm$length;\n\n          var perm = _step.value;\n\n          (_this$_lc$perm$length = this._lc[perm.length]).set.apply(_this$_lc$perm$length, _toConsumableArray(perm).concat([this._calculate(perm)]));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return true;\n    } // returns Generator over possible orderings of tiles in their goal rows/cols\n    // ex: [2, 1, 0] = 0th ind -> tile with goal ind of 2, 1st ind -> tile with goal ind of 1\n    // NOTE: # permutations = sum of n permute k from k = 1 to n = ⌊en!−1⌋\n\n  }, {\n    key: \"_permutationHelper\",\n    value:\n    /*#__PURE__*/\n    regenerator_runtime__WEBPACK_IMPORTED_MODULE_3___default.a.mark(function _permutationHelper(n) {\n      var arr, permSize, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, perm;\n\n      return regenerator_runtime__WEBPACK_IMPORTED_MODULE_3___default.a.wrap(function _permutationHelper$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // while Int8Array goes from 0 to 255, acceptable as memory requirements\n              // balloon when numRows/numCols > 8\n              arr = Uint8Array.from(Object(_math_utils__WEBPACK_IMPORTED_MODULE_2__[\"range\"])(n));\n              permSize = 1;\n\n            case 2:\n              if (!(permSize <= n)) {\n                _context2.next = 32;\n                break;\n              }\n\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _iteratorError2 = undefined;\n              _context2.prev = 6;\n              _iterator2 = Object(_math_utils__WEBPACK_IMPORTED_MODULE_2__[\"permutationGenerator\"])(arr, permSize)[Symbol.iterator]();\n\n            case 8:\n              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                _context2.next = 15;\n                break;\n              }\n\n              perm = _step2.value;\n              _context2.next = 12;\n              return perm;\n\n            case 12:\n              _iteratorNormalCompletion2 = true;\n              _context2.next = 8;\n              break;\n\n            case 15:\n              _context2.next = 21;\n              break;\n\n            case 17:\n              _context2.prev = 17;\n              _context2.t0 = _context2[\"catch\"](6);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context2.t0;\n\n            case 21:\n              _context2.prev = 21;\n              _context2.prev = 22;\n\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n\n            case 24:\n              _context2.prev = 24;\n\n              if (!_didIteratorError2) {\n                _context2.next = 27;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 27:\n              return _context2.finish(24);\n\n            case 28:\n              return _context2.finish(21);\n\n            case 29:\n              permSize++;\n              _context2.next = 2;\n              break;\n\n            case 32:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _permutationHelper, this, [[6, 17, 21, 29], [22,, 24, 28]]);\n    }) // calculates linear conflict WITHOUT manhattan distance for array\n\n  }, {\n    key: \"_calculate\",\n    value: function _calculate(arr) {\n      if (arr.length < 2) return 0;\n\n      if (this._lc) {\n        var _this$_lc$arr$length;\n\n        return (_this$_lc$arr$length = this._lc[arr.length]).get.apply(_this$_lc$arr$length, _toConsumableArray(arr));\n      } else {\n        // See linear conflict explanation below for details on what LC is.\n        // Each tile that needs to be removed for the tiles in a row/col\n        // to move into their correct positions adds 2 to linear conflict.\n        // As the tiles in their goal positions are numbered in ascending order\n        // left to right, top to bottom, the tile orderings must be in sorted order\n        // to have no conflicts. Only tiles' relative positions matter,\n        // as tiles in correct relative position can easily move to their goal positions\n        // without stepping over neighboring tiles.\n        // Therefore, the number of conflicts, or tiles that\n        // need to be removed to, is the number of tiles needed to be removed\n        // to get an increasing subsequence.\n        // The minimum tiles to be removed is arr.length - the longest subsequence possible.\n        return (arr.length - this._longestIncreasingSubsequence(arr)) * 2;\n      }\n    } // calculates linear conflict of specified grid\n    // optional start/end params allow specifying section of grid to calculate conflict heuristic for\n    // rectangular section of grid, where start is inclusive and end if exclusive\n    // calcMD determines if calculate() includes Manhattan Distance in heuristic calculation\n    // NOTE: since linear conflict + MD always admissible and at least as good, only use\n    // calcMD = false for testing or if you plan on calculating MD in a different way\n    // ex: calculate(grid, 0, 3, 1, 2) calculates heuristic for 3 tile tall vertical chunk\n    // in col[1] from row[0->2]\n    // Heuristic explanation:\n    // linear conflict = 2 tiles in the same goal row/col but have inversion relationship.\n    // horizontal: (a is to right of b but a's goal is to left of b's goal)\n    // vertical: same but with bottom and top instead of right and left\n    // To reach goal positions, one of the tiles in the pair has to move out of the way\n    // for the other tile to reach their goal. The moved tile has to move back into their\n    // goal row/col to reach their goals.\n    //\n    // Linear conflict is calculated on every row and column, and can be combined with\n    // manhattan distance heuristic to make better admissible heuristic,\n    // as manhattan distance heuristic doesn't account for moving tiles out of the way\n    // and linear conflct doesn't account for moving to the correct tile position \n    //\n    // WARNING: You can't just add 2 to the heuristic value for each inversion found,\n    // as moving one tile out of the way can allow 2 tiles it conflicts with to move into their goals\n    // ex: [3, 1, 2] has goal positions of [1, 2, 3]\n    // to reach the goal, move 3 down and slide 1 and 2 over, and then move 3 to the goal\n    // while there are 2 inversions (3, 1) and (3, 2), moving 3 out of the way for 1 means\n    // that it is out of the way for 2 as well.\n    // If you added 2 for each inversion, heuristic = LC = (2 + 2) + MD = (2 + 1 + 1) = 8\n    // when the optimal solution only takes 6 moves (\"3\" down, \"1\" left, \"2\" left, \"3\" right x2, \"3\" up)\n\n  }, {\n    key: \"calculate\",\n    value: function calculate(grid) {\n      var heuristicValue = 0; // candidateTiles.get(i) = map of tiles of row/col i that are in their goal row/col\n      // map = {ind: {goalInd, conflicts}}\n      // - ind = current index in flattened puzzle array\n      // - goalInd = value at ind = index of the tile in the goal puzzle\n      // - conflicts is a set of conflicting indices (initially empty)\n      // NOTE: cols accessed at key = column index + grid.numRows\n      // (first grid.numRows entries are for rows, next grid.numCols entries for columns)\n\n      var candidateTiles = new Map();\n      var ind = 0; // determines which tiles are in their goal row and/or column\n\n      for (var row = 0; row < this.numRows; row++) {\n        for (var col = 0; col < this.numCols; col++) {\n          var goalInd = grid.tiles[ind],\n              goalRow = grid.getTileRow(goalInd),\n              goalCol = grid.getTileCol(goalInd);\n\n          if (ind !== grid.emptyPos) {\n            // add manhattan distance to heuristic value\n            if (this._md) {\n              heuristicValue += this._md.get(ind, goalInd);\n            } else {\n              heuristicValue += Math.abs(row - goalRow) + Math.abs(col - goalCol);\n            } // NOTE: single tile can be candidate for both row and col conflict\n            // as tile can be part of conflict even when it's in its goal position\n\n\n            if (grid.getTileRow(goalInd) === row) {\n              if (!candidateTiles.has(row)) {\n                candidateTiles.set(row, []);\n              }\n\n              candidateTiles.get(row).push(goalCol);\n            }\n\n            if (grid.getTileCol(goalInd) === col) {\n              var key = grid.numRows + col;\n\n              if (!candidateTiles.has(key)) {\n                candidateTiles.set(key, []);\n              }\n\n              candidateTiles.get(key).push(goalRow);\n            }\n          }\n\n          ind++;\n        }\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = candidateTiles.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var arr = _step3.value;\n          heuristicValue += this._calculate(arr);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return heuristicValue;\n    } // TODO: consider moving to utils\n    // returns length of longest increasing subsequence in arr\n\n  }, {\n    key: \"_longestIncreasingSubsequence\",\n    value: function _longestIncreasingSubsequence(arr) {\n      var maxLength = 0; // stores current longest increasing subsequence ending at each index\n\n      var cache = new Uint8Array(arr.length).fill(1); // for each ending index, see if you can add the element at arr[end]\n      // to the longest sequence at a previous end (cache[prev])\n\n      for (var end = 0; end < arr.length; end++) {\n        for (var prev = 0; prev < end; prev++) {\n          if (arr[prev] < arr[end] && cache[prev] + 1 > cache[end]) {\n            cache[end] = cache[prev] + 1;\n          }\n        }\n      }\n\n      return Math.max.apply(Math, _toConsumableArray(cache));\n    } // TODO: consider modifying to take in 2 rows,\n    // with params specifying which col was swapped\n    // and where emptyPos is\n    // as then, candidateTiles doesn't need to be built from scratch\n    // twice\n    // Also, getUpdateDelta won't need to swap back and forth\n    // calculates LC for given row index\n    // NOTE: doesn't incorporate MD\n\n  }, {\n    key: \"_calculateForRow\",\n    value: function _calculateForRow(grid, row) {\n      var candidateTiles = [];\n      var ind = this.numCols * row;\n\n      for (var col = 0; col < this.numCols; col++) {\n        if (ind !== grid.emptyPos) {\n          var goalInd = grid.tiles[ind],\n              goalRow = grid.getTileRow(goalInd),\n              goalCol = grid.getTileCol(goalInd);\n\n          if (row === goalRow) {\n            candidateTiles.push(goalCol);\n          }\n        }\n\n        ind++;\n      }\n\n      return this._calculate(candidateTiles);\n    } // calculates LC for given column index\n    // NOTE: doesn't incorporate MD\n\n  }, {\n    key: \"_calculateForCol\",\n    value: function _calculateForCol(grid, col) {\n      var candidateTiles = [];\n      var ind = col;\n\n      for (var row = 0; row < this.numRows; row++) {\n        if (ind !== grid.emptyPos) {\n          var goalInd = grid.tiles[ind],\n              goalRow = grid.getTileRow(goalInd),\n              goalCol = grid.getTileCol(goalInd);\n\n          if (col === goalCol) {\n            candidateTiles.push(goalRow);\n          }\n        }\n\n        ind += this.numCols;\n      }\n\n      return this._calculate(candidateTiles);\n    }\n  }, {\n    key: \"update\",\n    value: function update(newGrid, startInd, endInd, move) {\n      return this.getUpdateDelta(newGrid, startInd, endInd, move) + newGrid.heuristicValue;\n    } // TODO: consider storing and updating whether each tile is in its goal\n    // row and col so we can simply use those arrays rather than recalculating\n    // whether each tile is in goal col/row\n    // TODO: consider splitting update into 2 parts so newGrid isn't switched back and forth in IDA*\n    // (or create helper that also takes in start and end locations of tile as well as newGrid\n    // for use in IDA*)\n    // TODO: have update function that returns updated grid for use in ida*\n    // TODO: see if calculate() needs anything changed besides emptyPos and tile swap\n    // returns change in heuristic distance from move\n    // newGrid = Grid after move (distinct object), with all properties updated besides heuristicValue\n    // startInd = ind moved tile started in\n    // endInd = ind moved tile ended up in\n    // move = single-letter move within 'l/r/u/d'\n\n  }, {\n    key: \"getUpdateDelta\",\n    value: function getUpdateDelta(newGrid, startInd, endInd, move) {\n      var startRow = newGrid.getTileRow(startInd),\n          startCol = newGrid.getTileCol(startInd);\n      var func;\n      var inds;\n\n      switch (move) {\n        case 'l':\n          func = this._calculateForCol;\n          inds = [startCol, startCol - 1];\n          break;\n\n        case 'r':\n          func = this._calculateForCol;\n          inds = [startCol, startCol + 1];\n          break;\n\n        case 'u':\n          func = this._calculateForRow;\n          inds = [startRow, startRow - 1];\n          break;\n\n        case 'd':\n          func = this._calculateForRow;\n          inds = [startRow, startRow + 1];\n          break;\n      } // Manhattan distance not calculated in func as only needs to be calculated\n      // for single tile moved (more efficient to calculate separately)\n\n\n      var endVal = func.call(this, newGrid, inds[0]) + func.call(this, newGrid, inds[1]); // returns grid partially to pre-move state to calculate LC for relevant cols pre-move\n\n      newGrid.swap(startInd, endInd);\n      newGrid.emptyPos = endInd;\n      var startVal = func.call(this, newGrid, inds[0]) + func.call(this, newGrid, inds[1]); // return grid to original state\n\n      newGrid.swap(startInd, endInd);\n      newGrid.emptyPos = startInd; // adds linear conflict heuristic value to manhattan distance heuristic value\n\n      return endVal - startVal + _get(_getPrototypeOf(LinearConflictHeuristic.prototype), \"getUpdateDelta\", this).call(this, newGrid, startInd, endInd, move);\n    } // returns whether heuristic value indicates if puzzle is solved\n\n  }, {\n    key: \"isSolved\",\n    value: function isSolved(heuristicValue) {\n      return heuristicValue === 0;\n    }\n  }]);\n\n  return LinearConflictHeuristic;\n}(ManhattanHeuristic);\n\nvar PatternDatabaseHeuristic =\n/*#__PURE__*/\nfunction () {\n  function PatternDatabaseHeuristic(grid) {\n    var _this = this;\n\n    _classCallCheck(this, PatternDatabaseHeuristic);\n\n    this.numRows = grid.numRows;\n    this.numCols = grid.numCols;\n    this.numTiles = grid.numRows * grid.numCols; // tracks empty goal position\n\n    this.emptyPos = grid.tiles[grid.emptyPos];\n    this.partitions = [];\n    this.dbs = []; // maps goal indices to tile indices\n\n    this.goalMap = new Uint8Array(this.numTiles);\n    grid.tiles.forEach(function (goalInd, ind) {\n      _this.goalMap[goalInd] = ind;\n    });\n  }\n\n  _createClass(PatternDatabaseHeuristic, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_runtime__WEBPACK_IMPORTED_MODULE_3___default.a.mark(function _callee2() {\n        return regenerator_runtime__WEBPACK_IMPORTED_MODULE_3___default.a.wrap(function _callee2$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this._loadDatabase(this.emptyPos));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function initialize() {\n        return _initialize2.apply(this, arguments);\n      }\n\n      return initialize;\n    }()\n  }, {\n    key: \"_loadDatabase\",\n    value: function () {\n      var _loadDatabase2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_runtime__WEBPACK_IMPORTED_MODULE_3___default.a.mark(function _callee3(emptyPos) {\n        var _this2 = this;\n\n        var loadPromise, directory, response, json, promises, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _loop, _iterator4, _step4;\n\n        return regenerator_runtime__WEBPACK_IMPORTED_MODULE_3___default.a.wrap(function _callee3$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // NOTE: can't return outer fetch\n                // NOTE: not using escape character at end of line\n                // as spaces preceding next line would be included\n                directory = '../databases' + \"/\".concat(this.numRows, \" rows\") + \"/\".concat(this.numCols, \" columns\") + \"/Empty \".concat(emptyPos);\n                _context4.next = 3;\n                return fetch(directory + '/info.json');\n\n              case 3:\n                response = _context4.sent;\n\n                if (!response.ok) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                _context4.next = 7;\n                return response.json();\n\n              case 7:\n                json = _context4.sent;\n                _context4.next = 11;\n                break;\n\n              case 10:\n                throw new Error('Database info json could not be loaded');\n\n              case 11:\n                promises = [];\n                _iteratorNormalCompletion4 = true;\n                _didIteratorError4 = false;\n                _iteratorError4 = undefined;\n                _context4.prev = 15;\n\n                _loop = function _loop() {\n                  var partition = _step4.value;\n                  var fileName = \"\".concat(emptyPos, \"|\") + partition.join(',') + '.db'; // NOTE: not using await to let each fetch request execute asynchronously\n\n                  promises.push(fetch(directory + '/' + fileName).then(function (response) {\n                    // console.log(response);\n                    if (response.ok) {\n                      return response.arrayBuffer();\n                    } else {\n                      throw new Error('Database could not be loaded');\n                    }\n                  }).then(function (buffer) {\n                    // NOTE: partitions added here instead of at start to ensure async addition of dbs line up\n                    _this2.partitions.push(partition);\n\n                    _this2.dbs.push(ndarray__WEBPACK_IMPORTED_MODULE_1___default()(new Uint8Array(buffer), new Uint8Array(partition.length).fill(_this2.numTiles)));\n                  }));\n                };\n\n                for (_iterator4 = json['partitions'][Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                  _loop();\n                }\n\n                _context4.next = 24;\n                break;\n\n              case 20:\n                _context4.prev = 20;\n                _context4.t0 = _context4[\"catch\"](15);\n                _didIteratorError4 = true;\n                _iteratorError4 = _context4.t0;\n\n              case 24:\n                _context4.prev = 24;\n                _context4.prev = 25;\n\n                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                  _iterator4.return();\n                }\n\n              case 27:\n                _context4.prev = 27;\n\n                if (!_didIteratorError4) {\n                  _context4.next = 30;\n                  break;\n                }\n\n                throw _iteratorError4;\n\n              case 30:\n                return _context4.finish(27);\n\n              case 31:\n                return _context4.finish(24);\n\n              case 32:\n                _context4.next = 34;\n                return Promise.all(promises);\n\n              case 34:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee3, this, [[15, 20, 24, 32], [25,, 27, 31]]);\n      }));\n\n      function _loadDatabase(_x) {\n        return _loadDatabase2.apply(this, arguments);\n      }\n\n      return _loadDatabase;\n    }() // TODO: only calculate affected partition for performance\n    // TODO: calculate partition map once and keep updating for performance\n\n  }, {\n    key: \"calculate\",\n    value: function calculate(grid) {\n      var _this3 = this;\n\n      var heuristicValue = 0;\n      this.partitions.forEach(function (partition, ind) {\n        var _this3$dbs$ind;\n\n        var indices = partition.map(function (goalInd) {\n          return _this3.goalMap[goalInd];\n        });\n        heuristicValue += (_this3$dbs$ind = _this3.dbs[ind]).get.apply(_this3$dbs$ind, _toConsumableArray(indices));\n      });\n      return heuristicValue;\n    }\n  }, {\n    key: \"update\",\n    value: function update(newGrid, startInd, endInd, move) {\n      this.goalMap[newGrid.tiles[endInd]] = endInd;\n      this.goalMap[newGrid.tiles[startInd]] = startInd;\n      return this.calculate(newGrid);\n    } // reverses changes in this.goalMap\n    // newGrid = grid before reversing move\n    // 2nd param = moveRecord\n\n  }, {\n    key: \"reverseUpdate\",\n    value: function reverseUpdate(newGrid, _ref) {\n      var oldEmptyPos = _ref.emptyPos;\n      var goalInd = newGrid.tiles[oldEmptyPos];\n      var emptyGoalInd = newGrid.tiles[newGrid.emptyPos]; // swap moved tile with empty tile\n\n      this.goalMap[goalInd] = newGrid.emptyPos;\n      this.goalMap[emptyGoalInd] = oldEmptyPos;\n    }\n  }, {\n    key: \"isSolved\",\n    value: function isSolved(heuristicValue) {\n      return heuristicValue === 0;\n    }\n  }]);\n\n  return PatternDatabaseHeuristic;\n}(); // NOTE: separate from puzzle-graphic's Puzzles to ease testing and reduce memory cost in A*\n\n\nvar Puzzle =\n/*#__PURE__*/\nfunction () {\n  /**\n   * creates new Puzzle instance\n   * @param numRows # rows in grid\n   * @param numCols # columns in grid\n   * @param tiles flattened array of tile ids corresponding to their locations in the unsolved puzzle\n   * (where ids = tile positions in the solved puzzle left to right, top to bottom, 0 indexed)\n   * - ex: startGrid = [b, a, c], goalGrid = [a, b, c], return = [1, 0, 2]\n   * - explanation: b = goalGrid[1], a = goalGrid[0], c = goalGrid[2]\n   * @param emptyPos position of empty tile in grid\n   * @param heuristic heuristic used to determine how far grid is from goal state.\n   * Default heuristic is Linear Conflict, possible values are 'MD' and 'LC'\n   * corresponding with manhattan distance and linear conflict respectively\n   * @param solver solving algorithm to use ('IDA*' or 'strategic')\n   */\n  function Puzzle(numRows, numCols, tiles, emptyPos) {\n    var _ref2 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {},\n        heuristic = _ref2.heuristic,\n        _ref2$solver = _ref2.solver,\n        solver = _ref2$solver === void 0 ? 'IDA*' : _ref2$solver;\n\n    _classCallCheck(this, Puzzle);\n\n    this.numRows = numRows;\n    this.numCols = numCols; // use less memory if possible\n\n    this.tiles = tiles.length > 256 ? Uint16Array.from(tiles) : Uint8Array.from(tiles);\n    this.emptyPos = emptyPos;\n    var heuristicClass;\n\n    switch (heuristic) {\n      case 'MD':\n        heuristicClass = ManhattanHeuristic;\n        break;\n\n      case 'LC':\n        heuristicClass = LinearConflictHeuristic;\n        break;\n\n      case 'PDB':\n        heuristicClass = PatternDatabaseHeuristic;\n        break;\n\n      default:\n        if (numRows === 4 && numCols === 4) {\n          heuristicClass = PatternDatabaseHeuristic;\n        } else {\n          heuristicClass = LinearConflictHeuristic;\n        }\n\n    }\n\n    this.heuristic = new heuristicClass(this);\n    this.solver = solver;\n  } // returns\n  // - solution as array of moves within (l/r/u/d)\n  // - -1 if solution took too long to find\n  // - null if solution could not be found\n  // NOTE: maxNodesExpanded ignored for 'strategic' option\n\n\n  _createClass(Puzzle, [{\n    key: \"solve\",\n    value: function () {\n      var _solve = _asyncToGenerator(\n      /*#__PURE__*/\n      regenerator_runtime__WEBPACK_IMPORTED_MODULE_3___default.a.mark(function _callee4() {\n        var maxNodesExpanded,\n            _args5 = arguments;\n        return regenerator_runtime__WEBPACK_IMPORTED_MODULE_3___default.a.wrap(function _callee4$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                maxNodesExpanded = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : 1000000000;\n                _context5.next = 3;\n                return this.heuristic.initialize();\n\n              case 3:\n                _context5.t0 = this.solver;\n                _context5.next = _context5.t0 === 'IDA*' ? 6 : _context5.t0 === 'strategic' ? 7 : 8;\n                break;\n\n              case 6:\n                return _context5.abrupt(\"return\", this.solveIDAStar(maxNodesExpanded));\n\n              case 7:\n                return _context5.abrupt(\"return\", this.solveStrategically());\n\n              case 8:\n                throw new Error(\"\\n                    {this.solver} is not a valid option.                     Choose between 'IDA*', and 'strategic'.\");\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function solve() {\n        return _solve.apply(this, arguments);\n      }\n\n      return solve;\n    }() // TODO: make use of maxNodesExpanded to limit runtime\n    // TODO: consider converting to non-recursive function (probably better performance and memory usage while sacrificing code clarity)\n    // TODO: consider using array (npm denque) or linked-list backed stack to improve performance\n    // (profile performance, as linked-list loses locality of reference, and array-based stack will be very similar to native array\n    // except probably less optimized (with only possible advantage being not shrinking array when popping))\n\n  }, {\n    key: \"solveIDAStar\",\n    value: function solveIDAStar(maxNodesExpanded) {\n      var grid = new Grid(this.numRows, this.numCols, this.tiles, this.emptyPos, this.heuristic); // upper bound of total distance for when to stop exploring nodes in given iteration of dfs\n\n      var bound = grid.heuristicValue;\n      var path = [];\n\n      while (true) {\n        var output = this._searchIDAStar(grid, path, 0, bound);\n\n        if (output === true) {\n          return path;\n        } else if (output === Infinity) {\n          return null;\n        } // upper bound of search updated to min total distance explored that was\n        // greater than previous bound\n\n\n        bound = output;\n      }\n\n      return null;\n    } // recursive helper for solveIDAStar\n\n  }, {\n    key: \"_searchIDAStar\",\n    value: function _searchIDAStar(grid, path, traveledDist, bound) {\n      var totalDist = traveledDist + grid.heuristicValue;\n      if (totalDist > bound) return totalDist;\n      if (grid.isSolved()) return true; // tracks min total distance of all nodes explored\n\n      var minTotalDist = Infinity;\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = grid.getValidMoves()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var move = _step5.value;\n\n          // reversing previous move never leads to optimal solution\n          if (move !== Grid.getReversedMove(path[path.length - 1])) {\n            var moveRecord = grid.applyMove(move);\n            path.push(move);\n\n            var output = this._searchIDAStar(grid, path, traveledDist + 1, bound);\n\n            if (output === true) return true;\n            if (output < minTotalDist) minTotalDist = output;\n            path.pop();\n            grid.reverseMove(moveRecord);\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      return minTotalDist;\n    } // TODO: consider moving functions into closure / avoid nesting for slightly better performance\n    // (no re-instantiation on each call to solveStrategically())\n    // general strategy:\n    // # rows & # columns > 3:\n    // - solve all rows but \n\n  }, {\n    key: \"solveStrategically\",\n    value: function solveStrategically() {\n      var grid = new StrategicGrid(this.numRows, this.numCols, this.tiles, this.emptyPos);\n      var moves = [];\n      var _ref3 = [grid.getTileRow(grid.emptyPos), grid.getTileCol(grid.emptyPos)],\n          emptyRow = _ref3[0],\n          emptyCol = _ref3[1]; // WARNING: does NOT update [row, col]\n\n      function move(moveList) {\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n          for (var _iterator6 = moveList[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var _move = _step6.value;\n            moves.push(_move);\n            grid.applyMove(_move);\n\n            switch (_move) {\n              case 'l':\n                emptyCol++;\n                break;\n\n              case 'r':\n                emptyCol--;\n                break;\n\n              case 'u':\n                emptyRow++;\n                break;\n\n              case 'd':\n                emptyRow--;\n                break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n              _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n      } // moves tile into its goal\n      // NOTE: assumes puzzle filled from top or bottom, left to right\n      // WARNING: should NOT be used for filling in columns instead of rows, as assumptions\n      // will often result in invalid moves/bad solutions\n      // should NOT be used for last 2 rows of puzzles as well, as those must be solved\n      // column by column (solving a single row leaves remaining row no room to maneuver)\n\n\n      function moveTile(ind, goalInd) {\n        if (ind === goalInd) return;\n        var _ref4 = [grid.getTileRow(grid.emptyPos), grid.getTileCol(grid.emptyPos)];\n        emptyRow = _ref4[0];\n        emptyCol = _ref4[1];\n        var _ref5 = [grid.getTileRow(ind), grid.getTileCol(ind)],\n            row = _ref5[0],\n            col = _ref5[1];\n        var _ref6 = [grid.getTileRow(goalInd), grid.getTileCol(goalInd)],\n            goalRow = _ref6[0],\n            goalCol = _ref6[1]; // moves empty out of the way of already solved tiles\n        // explanation: if empty is in row with solved tiles, it must be to their right\n        // more specifically, it will be in the goal col of the current tile\n        // if the current tile is to the left of its goal, empty will need\n        // to move left to get to its left, displacing solved tiles\n        // unless it moves down (or a tile moves up into it) first\n\n        if (col < goalCol && emptyRow === goalRow) {\n          emptyRow === grid.rowEnd - 1 ? move('d') : move('u');\n        }\n\n        while (col > goalCol) {\n          // tile needs to move left, so empty tile needs to be moved to left of tile\n          // empty needs to move out the way to get to the left side of the tile\n          if (row === emptyRow && emptyCol > col) {\n            // move empty around tile to avoid moving solved tiles\n            // if filling top, try to move around bottom of tile if possible\n            if (goalRow === grid.rowStart) {\n              row === grid.rowEnd - 1 ? move('d') : move('u');\n            } else if (goalRow === grid.rowEnd - 1) {\n              // if filling bottom, try to move around top of tile if possible\n              row === grid.rowStart ? move('u') : move('d');\n            }\n          } // move empty to col left of tile\n\n\n          while (emptyCol >= col) {\n            move('r');\n          }\n\n          while (emptyCol < col - 1) {\n            move('l');\n          } // move empty to row of tile\n\n\n          while (emptyRow > row) {\n            move('d');\n          }\n\n          while (emptyRow < row) {\n            move('u');\n          } // move tile left\n\n\n          move('l');\n          col--;\n        }\n\n        while (col < goalCol) {\n          // tile needs to move right, so empty tile needs to be moved to right of tile\n          // empty needs to move out the way to get to the right side of the tile\n          if (row === emptyRow && emptyCol < col) {\n            // move empty around tile to avoid moving solved tiles\n            // if filling top, try to move around bottom of tile if possible\n            if (goalRow === grid.rowStart) {\n              row === grid.rowEnd - 1 ? move('d') : move('u');\n            } else if (goalRow === grid.rowEnd - 1) {\n              // if filling bottom, try to move around top of tile if possible\n              row === grid.rowStart ? move('u') : move('d');\n            }\n          } // move empty to right of tile\n\n\n          while (emptyCol <= col) {\n            move('l');\n          }\n\n          while (emptyCol > col + 1) {\n            move('r');\n          } // move empty to row of tile\n\n\n          while (emptyRow > row) {\n            move('d');\n          }\n\n          while (emptyRow < row) {\n            move('u');\n          } // move tile right\n\n\n          move('r');\n          col++;\n        } // tile now in correct column\n\n\n        while (row > goalRow) {\n          // tile needs to move up, so the empty tile needs to be moved to top of tile\n          // can move up normally as long as\n          // - not last tile in row\n          // - tile is more than 2 tiles below goal\n          if (col !== grid.colEnd - 1 || row - 2 > goalRow) {\n            // if row is 1 below goal and empty is to the left or below tile\n            // empty must rotate around the bottom of the tile to get to the top\n            // so as not to displace previously placed tiles\n            if (row - 1 === goalRow && emptyCol <= col && emptyRow >= row) {\n              // move emptyRow below row\n              while (emptyRow <= row) {\n                move('u');\n              } // move emptyCol to right of tile\n\n\n              while (emptyCol <= col) {\n                move('l');\n              }\n            } // NOTE: necessary despite code block above as tile could be against wall\n            // if empty under tile, move to the right if possible\n            // to avoid displacing previously placed tiles\n\n\n            if (emptyRow > row && emptyCol === col) {\n              col === grid.colEnd - 1 ? move('r') : move('l');\n            } // move empty row to just above tile\n\n\n            while (emptyRow >= row) {\n              move('d');\n            }\n\n            while (emptyRow < row - 1) {\n              move('u');\n            } // move empty col to match tile's\n\n\n            while (emptyCol > col) {\n              move('r');\n            }\n\n            while (emptyCol < col) {\n              move('l');\n            } // move tile up\n\n\n            move('u');\n            row--;\n          } // last tile of row must be rotated in along with previous tile in row\n          // because rotating affects tiles on one side of a tile\n          // and at the last column, only the left column's tiles can be used for rotation\n          else {\n              // tile in last col and row - 2 <= goalRow\n              if (row - 1 === goalRow) {\n                // move directly into goal:\n                // if empty in goalRow, must be directly above tile\n                // as previously tiles already solved\n                if (emptyRow === goalRow) {\n                  move('u');\n                  return;\n                } else {\n                  // move tile down one to give room to maneuver previous tile \n                  // above it\n                  // NOTE: empty must be to left and/or below tile\n                  // as tile is in rightmost column and 1 space below the top\n                  // and empty is not above it\n                  // position empty below tile\n                  while (emptyRow <= row) {\n                    move('u');\n                  }\n\n                  while (emptyCol < col) {\n                    move('l');\n                  } // move tile down\n\n\n                  move('d');\n                  row++;\n                }\n              } // tile is in last col and row - 2 === goalRow\n              // move previous tile into current goal\n              // move empty around tile to get up to previous tile\n\n\n              if (emptyRow > row && emptyCol === col) move('r'); // avoid previously solved tiles while going up and around tile\n\n              while (emptyRow > goalRow + 1) {\n                move('d');\n              }\n\n              while (emptyCol < goalCol) {\n                move('l');\n              } // move empty to goal position\n\n\n              while (emptyRow > goalRow) {\n                move('d');\n              } // current state:\n              // tile 2 spaces below goal\n              // previous tiles in their goals\n              // empty tile 1 space right of previous tile (current tile's goal position)\n              // rotate last 2 tiles in row into place\n\n\n              move('rulurddlu');\n              row = goalRow;\n            }\n        }\n\n        while (row < goalRow) {\n          // tile needs to move down, so the empty tile needs to be moved to bottom of tile\n          if (col !== grid.colEnd - 1 || row + 2 < goalRow) {\n            // empty needs to move out of the way to get to the bottom of the tile\n            // as is currently to tile's top/left and needs to move to tile's bottom\n            if (row + 1 === goalRow && emptyCol <= col && emptyRow <= row) {\n              while (emptyRow >= row) {\n                move('d');\n              }\n\n              while (emptyCol <= col) {\n                move('l');\n              }\n            } // move empty around tile if in same column and empty above tile\n            // (different from above, as above only necessary if tile is too\n            // close to goal and not as good a solution when tile is farther away)\n\n\n            if (col === emptyCol && emptyRow < row) {\n              col === grid.colEnd - 1 ? move('r') : move('l');\n            } // move empty to bottom of tile\n\n\n            while (emptyRow <= row) {\n              move('u');\n            }\n\n            while (emptyRow > row + 1) {\n              move('d');\n            } // move empty to col of tile\n\n\n            while (emptyCol > col) {\n              move('r');\n            }\n\n            while (emptyCol < col) {\n              move('l');\n            } // move tile down\n\n\n            move('d');\n            row++;\n          } else {\n            // last tile of bottom row needs to be rotated in along with previous tile,\n            // similar to last tile of top row\n            // tile in correct col and either 1 or 2 spaces above goal\n            if (row + 1 === goalRow) {\n              // move tile directly into place\n              if (emptyRow === goalRow) {\n                move('d');\n                return;\n              } else {\n                // move tile up to give room for previous tile to maneuver\n                while (emptyRow >= row) {\n                  move('d');\n                }\n\n                while (emptyCol < col) {\n                  move('l');\n                }\n\n                move('u');\n                row--;\n              }\n            } // tile is now 2 spaces above goal\n            // move previous tile into current goal\n            // move empty around tile to get up to previous tile\n\n\n            if (emptyRow < row && emptyCol === col) move('r');\n\n            while (emptyRow < goalRow - 1) {\n              move('u');\n            }\n\n            while (emptyCol < goalCol) {\n              move('l');\n            } // move empty to goal position\n\n\n            while (emptyRow < goalRow) {\n              move('u');\n            } // curent state:\n            // tile 2 spaces above goal\n            // previous tiles in goal\n            // empty tile 1 space right of previous tile (current tile's goal position)\n            // rotate last 2 tiles into place\n\n\n            move('rdldruuld');\n            row = goalRow;\n          }\n        }\n      }\n\n      var emptyGoal = grid.tiles[grid.emptyPos]; // solves 1 dimensional puzzles\n\n      if (grid.numRows === 1) {\n        while (grid.emptyPos < emptyGoal) {\n          move('l');\n        }\n\n        while (grid.emptyPos > emptyGoal) {\n          move('r');\n        }\n\n        return moves;\n      } else if (grid.numCols === 1) {\n        while (grid.emptyPos < emptyGoal) {\n          move('u');\n        }\n\n        while (grid.emptyPos > emptyGoal) {\n          move('d');\n        }\n\n        return moves;\n      }\n\n      var emptyGoalRow = grid.getTileRow(emptyGoal);\n      var emptyGoalCol = grid.getTileCol(emptyGoal); // fill each row left to right, top to bottom until empty tile's row reach\n      // or 2 rows remaining\n\n      for (var row = 0; row < Math.min(emptyGoalRow, grid.numRows - 2); row++) {\n        var start = grid.numCols * row;\n\n        for (var goal = start; goal < start + grid.numCols; goal++) {\n          var ind = grid.goals[goal];\n          moveTile(ind, goal);\n        }\n\n        grid.rowStart++;\n      }\n\n      for (var _row3 = grid.numRows - 1; _row3 > emptyGoalRow + 1; _row3--) {\n        var _start = grid.numCols * _row3;\n\n        for (var _goal = _start; _goal < _start + grid.numCols; _goal++) {\n          var _ind = grid.goals[_goal];\n          moveTile(_ind, _goal);\n        }\n\n        grid.rowEnd--;\n      } // remaining unsolved puzzle is now 2xN (where N is arbitrary integer)\n\n\n      var emptyColGoal = grid.getTileCol(grid.tiles[grid.emptyPos]); // fill in from left to right until empty tile col reached or 2x2 square remaining\n\n      for (var col = 0; col < Math.min(grid.numCols - 2, emptyColGoal); col++) {\n        // goal and current indices of top tile of leftmost column\n        var topGoal = grid.getIndex(grid.rowStart, grid.colStart);\n        var topInd = grid.goals[topGoal]; // move top tile to its goal\n\n        moveTile(topInd, topGoal); // goal and current indices of bottom tile of leftmost column\n\n        var bottomGoal = topGoal + grid.numCols;\n        var bottomInd = grid.goals[bottomGoal];\n\n        if (bottomInd === bottomGoal) {\n          grid.colStart++;\n          continue;\n        } // current coords of tile that belongs on the bottom of the leftmost column\n\n\n        var bottomCol = grid.getTileCol(bottomInd);\n        var bottomRow = grid.getTileRow(bottomInd); // top tile is occupied, so emptyCol must be in bottom left corner\n        // if bottom tile is one away, can move directly into goal\n\n        if (emptyCol === grid.colStart && grid.emptyPos + 1 === bottomInd) {\n          move('l');\n          grid.colStart++;\n          continue;\n        } // Otherwise:\n        // tile needs to be rotated in similarly to top and bottom tiles\n        // cannot use moveTile() as above, as certain assumptions on\n        // fill order no longer hold true\n        // move bottom tile to 2 spaces right of its goal\n        // first move tile into bottom row\n\n\n        while (bottomRow < grid.rowEnd - 1) {\n          // move into bottom row\n          if (emptyRow === grid.rowStart) move('u'); // move below tile\n\n          while (emptyCol > bottomCol) {\n            move('r');\n          }\n\n          while (emptyCol < bottomCol) {\n            move('l');\n          } // move tile into bottom row\n\n\n          move('d');\n          bottomRow++;\n        } // then move tile into correct col\n        // tile is more than 2 spaces right from final goal\n\n\n        while (bottomCol > col + 2) {\n          // move empty around tile to get to its left if necessary\n          if (emptyRow === bottomRow && emptyCol > bottomCol) move('d');\n\n          while (emptyCol >= bottomCol) {\n            move('r');\n          }\n\n          if (emptyRow < bottomRow) move('u');\n\n          while (emptyCol < bottomCol) {\n            move('l');\n          }\n\n          bottomCol--;\n        } // tile is one right of final goal (1 tile left of intermediate goal)\n\n\n        while (bottomCol < col + 2) {\n          // maneuver empty to right of goal\n          if (emptyCol === bottomCol) move('l');\n          if (emptyRow === grid.rowStart) move('u'); // move bottom col one right\n\n          while (emptyCol > bottomCol) {\n            move('r');\n          }\n\n          bottomCol++;\n        } // tile is now 2 spaces right of goal\n        // need to move top tile one down in preparation for rotating 2 tiles in\n        // move around tile to get below top tile if necessary\n\n\n        if (emptyCol > bottomCol && emptyRow === bottomRow) move('d');\n\n        while (emptyCol >= bottomCol) {\n          move('r');\n        }\n\n        if (emptyRow === grid.rowStart) move('u');\n\n        while (emptyCol > grid.colStart) {\n          move('r');\n        } // current state:\n        // empty tile in bottom goal\n        // top tile in top goal\n        // bottom tile 2 tiles right of bottom goal\n        // rotate both tiles into place\n\n\n        move('dluldrrul');\n        grid.colStart++;\n      } // // fill in from right to left until 2x2 square remaining\n\n\n      for (var _col3 = grid.numCols - 1; _col3 > emptyColGoal + 1; _col3--) {\n        // goal and current indices of top tile of leftmost column\n        var _topGoal = grid.getIndex(grid.rowStart, grid.colEnd - 1);\n\n        var _topInd = grid.goals[_topGoal]; // move top tile to its goal\n        // NOTE: can't use moveTile as relies on assumptions like:\n        // tiles to left in goalRow are filled in and can't be modified\n        // modifying moveTile() to work with right-to-left would\n        // make the function more confusing\n\n        var topCol = grid.getTileCol(_topInd);\n        var topRow = grid.getTileRow(_topInd); // move top tile into correct row\n\n        if (topRow > grid.rowStart) {\n          if (emptyRow === grid.rowEnd - 1) move('d');\n\n          while (emptyCol < topCol) {\n            move('l');\n          }\n\n          while (emptyCol > topCol) {\n            move('r');\n          }\n\n          move('u');\n          topRow--;\n        } // move top tile into correct col\n\n\n        while (topCol < grid.colEnd - 1) {\n          // move empty around tile to get to right if necessary\n          if (emptyCol < topCol && emptyRow === topRow) move('u');\n\n          while (emptyCol <= topCol) {\n            move('l');\n          }\n\n          while (emptyCol > topCol + 1) {\n            move('r');\n          }\n\n          if (emptyRow > topRow) move('d');\n          move('r');\n          topCol++;\n        } // goal and current indices of bottom tile of leftmost column\n\n\n        var _bottomGoal = _topGoal + grid.numCols;\n\n        var _bottomInd = grid.goals[_bottomGoal];\n\n        if (_bottomInd === _bottomGoal) {\n          grid.colEnd--;\n          continue;\n        } // current coords of tile that belongs on the bottom of the leftmost column\n\n\n        var _bottomCol = grid.getTileCol(_bottomInd);\n\n        var _bottomRow = grid.getTileRow(_bottomInd); // top tile is occupied, so emptyCol must be in bottom right corner\n        // if bottom tile is one away, can move directly into goal\n\n\n        if (emptyCol === grid.colEnd - 1 && grid.emptyPos - 1 === _bottomInd) {\n          move('r');\n          grid.colEnd--;\n          continue;\n        } // move bottom tile 2 tiles left of goal in preparation of rotating 2 tiles in\n        // first move tile into bottom row\n\n\n        while (_bottomRow < grid.rowEnd - 1) {\n          // move into bottom row\n          if (emptyRow === grid.rowStart) move('u'); // move below tile\n\n          while (emptyCol > _bottomCol) {\n            move('r');\n          }\n\n          while (emptyCol < _bottomCol) {\n            move('l');\n          } // move tile into bottom row\n\n\n          move('d');\n          _bottomRow++;\n        } // then move tile into correct col\n        // tile is more than 2 spaces left from final goal\n\n\n        while (_bottomCol < _col3 - 2) {\n          // move empty around tile to get to its right if necessary\n          if (emptyRow === _bottomRow && emptyCol < _bottomCol) move('d');\n\n          while (emptyCol <= _bottomCol) {\n            move('l');\n          }\n\n          if (emptyRow < _bottomRow) move('u');\n\n          while (emptyCol > _bottomCol) {\n            move('r');\n          }\n\n          _bottomCol++;\n        } // tile is one left of final goal (1 tile right of intermediate goal)\n\n\n        while (_bottomCol > _col3 - 2) {\n          // maneuver empty to right of goal\n          if (emptyCol === _bottomCol) move('r');\n          if (emptyRow === grid.rowStart) move('u'); // move bottom col one right\n\n          while (emptyCol < _bottomCol) {\n            move('l');\n          }\n\n          _bottomCol--;\n        } // tile is now 2 spaces left of goal\n        // need to move top tile one down in preparation for rotating 2 tiles in\n        // move around tile to get below top tile if necessary\n\n\n        if (emptyCol < _bottomCol && emptyRow === _bottomRow) move('d');\n\n        while (emptyCol <= _bottomCol) {\n          move('l');\n        }\n\n        if (emptyRow === grid.rowStart) move('u');\n\n        while (emptyCol < grid.colEnd - 1) {\n          move('l');\n        } // current state:\n        // empty tile in bottom goal\n        // top tile in top goal\n        // bottom tile 2 tiles left of bottom goal\n        // rotate both tiles into place\n\n\n        move('drurdllur');\n        grid.colEnd--;\n      } // solve remaining 2x2 puzzle\n      // Once 2 tiles (including empty) are solved, \n      // remaining 2 must be already solved if puzzle is solvable\n      // NOTE: moveTile is only used for top-left and bottom-left tiles\n      // as fill-order assumptions mean using it for tiles on the right\n      // won't work\n\n\n      var topLeftGoal = grid.getIndex(grid.rowStart, grid.colStart);\n\n      if (topLeftGoal !== emptyGoal) {\n        // solve top-left tile\n        moveTile(grid.goals[topLeftGoal], topLeftGoal); // if empty needs to move left, its goal is bottom-left tile\n\n        if (emptyCol > emptyGoalCol) {\n          if (emptyRow < emptyGoalRow) move('u');\n          move('r');\n        }\n\n        if (emptyCol < emptyGoalCol) move('l');\n        if (emptyRow > emptyGoalRow) move('d');\n        if (emptyRow < emptyGoalRow) move('u');\n      }\n\n      var bottomLeftGoal = topLeftGoal + grid.numCols;\n\n      if (bottomLeftGoal !== emptyGoal) {\n        // solve bottom-left tile\n        moveTile(grid.goals[bottomLeftGoal], bottomLeftGoal); // if empty needs to move left, its goal is top-left tile\n\n        if (emptyCol > emptyGoalCol) {\n          if (emptyRow > emptyGoalRow) move('d');\n          move('r');\n        }\n\n        if (emptyCol < emptyGoalCol) move('l');\n        if (emptyRow > emptyGoalRow) move('d');\n        if (emptyRow < emptyGoalRow) move('u');\n      }\n\n      return moves;\n    }\n  }]);\n\n  return Puzzle;\n}();\n\nvar BaseGrid =\n/*#__PURE__*/\nfunction () {\n  function BaseGrid(numRows, numCols, tiles, emptyPos) {\n    _classCallCheck(this, BaseGrid);\n\n    this.numRows = numRows;\n    this.numCols = numCols;\n    this.tiles = tiles;\n    this.emptyPos = emptyPos;\n  }\n\n  _createClass(BaseGrid, [{\n    key: \"getTileCol\",\n    value: function getTileCol(ind) {\n      return ind % this.numCols;\n    }\n  }, {\n    key: \"getTileRow\",\n    value: function getTileRow(ind) {\n      return Math.floor(ind / this.numCols);\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(row, col) {\n      return row * this.numCols + col;\n    }\n  }, {\n    key: \"swap\",\n    value: function swap(pos1, pos2) {\n      var _ref7 = [this.tiles[pos2], this.tiles[pos1]];\n      this.tiles[pos1] = _ref7[0];\n      this.tiles[pos2] = _ref7[1];\n    } // returns change in index of tile to be moved after move\n\n  }, {\n    key: \"getMoveDelta\",\n    value: function getMoveDelta(move) {\n      var moveDeltaMap = {\n        'r': 1,\n        'l': -1,\n        'u': -this.numCols,\n        'd': this.numCols\n      };\n      return moveDeltaMap[move];\n    } // TODO: consider instead caching movedInd for every move + emptyPos combo O(n)\n    // returns index of tile that would be moved by specified move\n\n  }, {\n    key: \"getMovedInd\",\n    value: function getMovedInd(move) {\n      return this.emptyPos - this.getMoveDelta(move);\n    }\n  }, {\n    key: \"applyMove\",\n    value: function applyMove(move) {\n      var movedInd = this.getMovedInd(move);\n      var endInd = this.emptyPos;\n      this.swap(endInd, movedInd);\n      this.emptyPos = movedInd;\n    }\n  }], [{\n    key: \"getReversedMove\",\n    value: function getReversedMove(move) {\n      return REVERSE_MOVE_MAP[move];\n    }\n  }]);\n\n  return BaseGrid;\n}(); // Grid optimized for strategic solver\n\n\nvar StrategicGrid =\n/*#__PURE__*/\nfunction (_BaseGrid) {\n  _inherits(StrategicGrid, _BaseGrid);\n\n  function StrategicGrid(numRows, numCols, tiles, emptyPos) {\n    var _this4;\n\n    _classCallCheck(this, StrategicGrid);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(StrategicGrid).call(this, numRows, numCols, tiles, emptyPos)); // maps goal index to current index\n    // ex: arr[0] = 2 -> tile with goal index 0 is now at index 2\n\n    _this4.goals = tiles.length > 256 ? new Uint16Array(tiles.length) : new Uint8Array(tiles.length);\n\n    _this4.tiles.forEach(function (goal, ind) {\n      return _this4.goals[goal] = ind;\n    }); // marks bounds of unsolved grid (start inclusive, end exclusive)\n    // NOTE: bounds do NOT affect any tile positions/indices\n    // i.e. indices/rows/cols are the same as if no bounds exist\n\n\n    _this4.rowStart = 0;\n    _this4.rowEnd = numRows;\n    _this4.colStart = 0;\n    _this4.colEnd = numCols;\n    _this4.colBounds = [0, numCols];\n    return _this4;\n  }\n\n  _createClass(StrategicGrid, [{\n    key: \"swap\",\n    value: function swap(pos1, pos2) {\n      // each goal position now corresponds with the opposite tile's swapped position\n      var _ref8 = [pos2, pos1];\n      this.goals[this.tiles[pos1]] = _ref8[0];\n      this.goals[this.tiles[pos2]] = _ref8[1];\n\n      _get(_getPrototypeOf(StrategicGrid.prototype), \"swap\", this).call(this, pos1, pos2);\n    }\n  }]);\n\n  return StrategicGrid;\n}(BaseGrid); // TODO: consider moving validMoves to field of Class instead of instance\n// (indexed under grid dimensions)\n// TODO: consider having both this and graphical grid extend from BaseGrid to reuse move functions\n// pros: cleaner, less redundancy\n// cons: performance hit as called functions now have to move up prototype chain\n// (not a huge problem for strategic solver, but IDA* explores a lot more nodes)\n// Grid optimized for A* and IDA*\n\n\nvar Grid =\n/*#__PURE__*/\nfunction () {\n  function Grid(numRows, numCols, tiles, emptyPos, heuristic) {\n    var traveledDist = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    var heuristicValue = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    var validMoves = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n\n    _classCallCheck(this, Grid);\n\n    this.numRows = numRows;\n    this.numCols = numCols;\n    this.tiles = tiles;\n    this.emptyPos = emptyPos;\n    this.heuristic = heuristic;\n    this.traveledDist = traveledDist;\n    this.heuristicValue = heuristicValue === null ? heuristic.calculate(this) : heuristicValue; // TODO: attach to external obj or pass between grids to avoid recomputing every new grid\n    // precomputing values for better performance\n    // IDEA: do all precomputing inside Puzzle() to be referenced by Grid\n    // (passing along takes up memory)\n\n    this.validMoves = validMoves === null ? this._precomputeValidMoves() : validMoves;\n  }\n\n  _createClass(Grid, [{\n    key: \"getTileCol\",\n    value: function getTileCol(ind) {\n      return ind % this.numCols;\n    }\n  }, {\n    key: \"getTileRow\",\n    value: function getTileRow(ind) {\n      return Math.floor(ind / this.numCols);\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(row, col) {\n      return row * this.numCols + col;\n    } // returns change in index of tile to be moved after move\n\n  }, {\n    key: \"getMoveDelta\",\n    value: function getMoveDelta(move) {\n      var moveDeltaMap = {\n        'r': 1,\n        'l': -1,\n        'u': -this.numCols,\n        'd': this.numCols\n      };\n      return moveDeltaMap[move];\n    } // TODO: consider instead caching movedInd for every move + emptyPos combo O(n)\n    // returns index of tile that would be moved by specified move\n\n  }, {\n    key: \"getMovedInd\",\n    value: function getMovedInd(move) {\n      return this.emptyPos - this.getMoveDelta(move);\n    }\n  }, {\n    key: \"getTileDist\",\n    value: function getTileDist(tile1, tile2) {\n      return Math.abs(this.getTileRow(tile1) - this.getTileRow(tile2)) + Math.abs(this.getTileCol(tile1) - this.getTileCol(tile2));\n    } // Applies move to grid\n    // Returns moveRecord object storing old heuristicValue and emptyPos (for use in reverseMove())\n    // (useful for IDA* as memory allocation can be avoided)\n    // NOTE: moveRecord used instead of storing info directly on grid\n    // to allow for use of single grid instance in IDA*\n\n  }, {\n    key: \"applyMove\",\n    value: function applyMove(move) {\n      var oldHeuristicValue = this.heuristicValue;\n      var oldEmptyPos = this.emptyPos;\n      var movedInd = this.getMovedInd(move);\n      var endInd = this.emptyPos;\n      this.swap(endInd, movedInd);\n      this.emptyPos = movedInd;\n      this.traveledDist++;\n      this.heuristicValue = this.heuristic.update(this, movedInd, endInd, move); // TODO; consider changing to typedArray for possibly slightly better performance\n\n      return {\n        heuristicValue: oldHeuristicValue,\n        emptyPos: oldEmptyPos\n      };\n    }\n  }, {\n    key: \"reverseMove\",\n    value: function reverseMove(moveRecord) {\n      this.heuristic.reverseUpdate(this, moveRecord);\n      this.traveledDist--;\n      this.heuristicValue = moveRecord.heuristicValue;\n      this.swap(this.emptyPos, moveRecord.emptyPos);\n      this.emptyPos = moveRecord.emptyPos;\n    }\n    /**\n     * WARNING: Does NOT update heuristicValue, lastMove, emptyPos, or lastGrid\n     * swaps 2 positions in grid.\n     */\n\n  }, {\n    key: \"swap\",\n    value: function swap(pos1, pos2) {\n      var _ref9 = [this.tiles[pos2], this.tiles[pos1]];\n      this.tiles[pos1] = _ref9[0];\n      this.tiles[pos2] = _ref9[1];\n    } // precomputes valid moves for each possible emptyPos to give slight performance benefit\n\n  }, {\n    key: \"_precomputeValidMoves\",\n    value: function _precomputeValidMoves() {\n      var moves;\n      var validMoves = [];\n\n      for (var emptyPos = 0; emptyPos < this.tiles.length; emptyPos++) {\n        moves = [];\n        var row = this.getTileRow(emptyPos);\n        var col = this.getTileCol(emptyPos);\n        if (row < this.numRows - 1) moves.push('u');\n        if (row > 0) moves.push('d');\n        if (col < this.numCols - 1) moves.push('l');\n        if (col > 0) moves.push('r');\n        validMoves[emptyPos] = moves;\n      }\n\n      return validMoves;\n    }\n    /**\n     * returns array of valid moves, where 'l' = left, 'r' = right, 'd' = down, and 'u' = up.\n     * @returns {Array} array of valid moves, where moves are defined by tiles moving into the empty space in the grid\n     */\n\n  }, {\n    key: \"getValidMoves\",\n    value: function getValidMoves() {\n      return this.validMoves[this.emptyPos];\n    }\n    /**\n     * Returns whether grid is solved assuming goal is [0, 1, ... tiles.length - 1]\n     * @returns {boolean} whether puzzle is solved\n     */\n\n  }, {\n    key: \"isSolved\",\n    value: function isSolved() {\n      var solved = this.heuristic.isSolved(this.heuristicValue);\n\n      if (solved === undefined) {\n        // accounts for if can't determine if puzzle solved using heuristic value\n        return this.tiles.every(function (goalInd, ind) {\n          return goalInd === ind;\n        });\n      } else {\n        return solved;\n      }\n    }\n  }], [{\n    key: \"getReversedMove\",\n    value: function getReversedMove(move) {\n      return REVERSE_MOVE_MAP[move];\n    }\n  }]);\n\n  return Grid;\n}();\n\nfunction testLinearConflictHeuristic() {\n  var testCases = [[[0, 2, 1, 7, 4, 5, 6, 3, 8], 0], [[0, 2, 1, 5, 4, 3, 6, 7, 8], 0], [[4, 3, 6, 8, 0, 7, 5, 2, 1], 4], [[2, 7, 0, 5, 4, 3, 8, 1, 6], 2]];\n  var ans = [8, 12, 22, 24];\n  var _iteratorNormalCompletion7 = true;\n  var _didIteratorError7 = false;\n  var _iteratorError7 = undefined;\n\n  try {\n    for (var _iterator7 = testCases.entries()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n          ind = _step7$value[0],\n          testCase = _step7$value[1];\n\n      var testGrid = _construct(Grid, [3, 3].concat(_toConsumableArray(testCase), [new LinearConflictHeuristic(3, 3), 0]));\n\n      console.assert(testGrid.heuristicValue === ans[ind], \"incorrect answer: answer = \".concat(testGrid.heuristicValue, \", correct answer = \").concat(ans[ind]));\n    }\n  } catch (err) {\n    _didIteratorError7 = true;\n    _iteratorError7 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n        _iterator7.return();\n      }\n    } finally {\n      if (_didIteratorError7) {\n        throw _iteratorError7;\n      }\n    }\n  }\n} // TODO: remove after done testing\n// testLinearConflictHeuristic();\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Puzzle);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sliding-puzzle-algorithms.js\n");

/***/ })

/******/ });
//# sourceMappingURL=puzzle-solver.worker.js.map